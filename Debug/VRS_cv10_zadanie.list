
VRS_cv10_zadanie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000371c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  080038ac  080038ac  000138ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ac0  08003ac0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ac0  08003ac0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ac0  08003ac0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000084  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000870b  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b6e  00000000  00000000  000287a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  0002a318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007a0  00000000  00000000  0002ab90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000175fe  00000000  00000000  0002b330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006ab7  00000000  00000000  0004292e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007a3a0  00000000  00000000  000493e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c3785  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000273c  00000000  00000000  000c37d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003894 	.word	0x08003894

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08003894 	.word	0x08003894

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <__NVIC_GetPriorityGrouping+0x18>)
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	0a1b      	lsrs	r3, r3, #8
 800027a:	f003 0307 	and.w	r3, r3, #7
}
 800027e:	4618      	mov	r0, r3
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029a:	2b00      	cmp	r3, #0
 800029c:	db0b      	blt.n	80002b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	f003 021f 	and.w	r2, r3, #31
 80002a4:	4907      	ldr	r1, [pc, #28]	; (80002c4 <__NVIC_EnableIRQ+0x38>)
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	095b      	lsrs	r3, r3, #5
 80002ac:	2001      	movs	r0, #1
 80002ae:	fa00 f202 	lsl.w	r2, r0, r2
 80002b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	6039      	str	r1, [r7, #0]
 80002d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	db0a      	blt.n	80002f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	490c      	ldr	r1, [pc, #48]	; (8000314 <__NVIC_SetPriority+0x4c>)
 80002e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e6:	0112      	lsls	r2, r2, #4
 80002e8:	b2d2      	uxtb	r2, r2
 80002ea:	440b      	add	r3, r1
 80002ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f0:	e00a      	b.n	8000308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4908      	ldr	r1, [pc, #32]	; (8000318 <__NVIC_SetPriority+0x50>)
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	f003 030f 	and.w	r3, r3, #15
 80002fe:	3b04      	subs	r3, #4
 8000300:	0112      	lsls	r2, r2, #4
 8000302:	b2d2      	uxtb	r2, r2
 8000304:	440b      	add	r3, r1
 8000306:	761a      	strb	r2, [r3, #24]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	e000e100 	.word	0xe000e100
 8000318:	e000ed00 	.word	0xe000ed00

0800031c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800031c:	b480      	push	{r7}
 800031e:	b089      	sub	sp, #36	; 0x24
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f003 0307 	and.w	r3, r3, #7
 800032e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000330:	69fb      	ldr	r3, [r7, #28]
 8000332:	f1c3 0307 	rsb	r3, r3, #7
 8000336:	2b04      	cmp	r3, #4
 8000338:	bf28      	it	cs
 800033a:	2304      	movcs	r3, #4
 800033c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	3304      	adds	r3, #4
 8000342:	2b06      	cmp	r3, #6
 8000344:	d902      	bls.n	800034c <NVIC_EncodePriority+0x30>
 8000346:	69fb      	ldr	r3, [r7, #28]
 8000348:	3b03      	subs	r3, #3
 800034a:	e000      	b.n	800034e <NVIC_EncodePriority+0x32>
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	f04f 32ff 	mov.w	r2, #4294967295
 8000354:	69bb      	ldr	r3, [r7, #24]
 8000356:	fa02 f303 	lsl.w	r3, r2, r3
 800035a:	43da      	mvns	r2, r3
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	401a      	ands	r2, r3
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000364:	f04f 31ff 	mov.w	r1, #4294967295
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	43d9      	mvns	r1, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000374:	4313      	orrs	r3, r2
         );
}
 8000376:	4618      	mov	r0, r3
 8000378:	3724      	adds	r7, #36	; 0x24
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
	...

08000384 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800038e:	695a      	ldr	r2, [r3, #20]
 8000390:	4907      	ldr	r1, [pc, #28]	; (80003b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4313      	orrs	r3, r2
 8000396:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800039a:	695a      	ldr	r2, [r3, #20]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4013      	ands	r3, r2
 80003a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003a2:	68fb      	ldr	r3, [r7, #12]
}
 80003a4:	bf00      	nop
 80003a6:	3714      	adds	r7, #20
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	40021000 	.word	0x40021000

080003b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80003b8:	2001      	movs	r0, #1
 80003ba:	f7ff ffe3 	bl	8000384 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80003be:	f7ff ff57 	bl	8000270 <__NVIC_GetPriorityGrouping>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2200      	movs	r2, #0
 80003c6:	2100      	movs	r1, #0
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff ffa7 	bl	800031c <NVIC_EncodePriority>
 80003ce:	4603      	mov	r3, r0
 80003d0:	4619      	mov	r1, r3
 80003d2:	2010      	movs	r0, #16
 80003d4:	f7ff ff78 	bl	80002c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80003d8:	2010      	movs	r0, #16
 80003da:	f7ff ff57 	bl	800028c <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80003de:	f7ff ff47 	bl	8000270 <__NVIC_GetPriorityGrouping>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2200      	movs	r2, #0
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff97 	bl	800031c <NVIC_EncodePriority>
 80003ee:	4603      	mov	r3, r0
 80003f0:	4619      	mov	r1, r3
 80003f2:	2011      	movs	r0, #17
 80003f4:	f7ff ff68 	bl	80002c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80003f8:	2011      	movs	r0, #17
 80003fa:	f7ff ff47 	bl	800028c <__NVIC_EnableIRQ>

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <LL_AHB1_GRP1_EnableClock>:
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800040e:	695a      	ldr	r2, [r3, #20]
 8000410:	4907      	ldr	r1, [pc, #28]	; (8000430 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4313      	orrs	r3, r2
 8000416:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800041a:	695a      	ldr	r2, [r3, #20]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4013      	ands	r3, r2
 8000420:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000422:	68fb      	ldr	r3, [r7, #12]
}
 8000424:	bf00      	nop
 8000426:	3714      	adds	r7, #20
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000

08000434 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000438:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800043c:	f7ff ffe2 	bl	8000404 <LL_AHB1_GRP1_EnableClock>

}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}

08000444 <__NVIC_SetPriorityGrouping>:
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f003 0307 	and.w	r3, r3, #7
 8000452:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <__NVIC_SetPriorityGrouping+0x44>)
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800045a:	68ba      	ldr	r2, [r7, #8]
 800045c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000460:	4013      	ands	r3, r2
 8000462:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800046c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000476:	4a04      	ldr	r2, [pc, #16]	; (8000488 <__NVIC_SetPriorityGrouping+0x44>)
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	60d3      	str	r3, [r2, #12]
}
 800047c:	bf00      	nop
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr
 8000488:	e000ed00 	.word	0xe000ed00

0800048c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <LL_RCC_HSI_Enable+0x1c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <LL_RCC_HSI_Enable+0x1c>)
 8000496:	f043 0301 	orr.w	r3, r3, #1
 800049a:	6013      	str	r3, [r2, #0]
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000

080004ac <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <LL_RCC_HSI_IsReady+0x20>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f003 0302 	and.w	r3, r3, #2
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	bf0c      	ite	eq
 80004bc:	2301      	moveq	r3, #1
 80004be:	2300      	movne	r3, #0
 80004c0:	b2db      	uxtb	r3, r3
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000

080004d0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	4904      	ldr	r1, [pc, #16]	; (80004f8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80004e6:	4313      	orrs	r3, r2
 80004e8:	600b      	str	r3, [r1, #0]
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <LL_RCC_SetSysClkSource+0x24>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	f023 0203 	bic.w	r2, r3, #3
 800050c:	4904      	ldr	r1, [pc, #16]	; (8000520 <LL_RCC_SetSysClkSource+0x24>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4313      	orrs	r3, r2
 8000512:	604b      	str	r3, [r1, #4]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	40021000 	.word	0x40021000

08000524 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <LL_RCC_GetSysClkSource+0x18>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	f003 030c 	and.w	r3, r3, #12
}
 8000530:	4618      	mov	r0, r3
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <LL_RCC_SetAHBPrescaler+0x24>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000550:	4904      	ldr	r1, [pc, #16]	; (8000564 <LL_RCC_SetAHBPrescaler+0x24>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4313      	orrs	r3, r2
 8000556:	604b      	str	r3, [r1, #4]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40021000 	.word	0x40021000

08000568 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000578:	4904      	ldr	r1, [pc, #16]	; (800058c <LL_RCC_SetAPB1Prescaler+0x24>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4313      	orrs	r3, r2
 800057e:	604b      	str	r3, [r1, #4]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	40021000 	.word	0x40021000

08000590 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80005a0:	4904      	ldr	r1, [pc, #16]	; (80005b4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	604b      	str	r3, [r1, #4]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	40021000 	.word	0x40021000

080005b8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005c2:	69da      	ldr	r2, [r3, #28]
 80005c4:	4907      	ldr	r1, [pc, #28]	; (80005e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005ce:	69da      	ldr	r2, [r3, #28]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4013      	ands	r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005d6:	68fb      	ldr	r3, [r7, #12]
}
 80005d8:	bf00      	nop
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000

080005e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005f2:	699a      	ldr	r2, [r3, #24]
 80005f4:	4907      	ldr	r1, [pc, #28]	; (8000614 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005fe:	699a      	ldr	r2, [r3, #24]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4013      	ands	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000606:	68fb      	ldr	r3, [r7, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000

08000618 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <LL_FLASH_SetLatency+0x24>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f023 0207 	bic.w	r2, r3, #7
 8000628:	4904      	ldr	r1, [pc, #16]	; (800063c <LL_FLASH_SetLatency+0x24>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4313      	orrs	r3, r2
 800062e:	600b      	str	r3, [r1, #0]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40022000 	.word	0x40022000

08000640 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <LL_FLASH_GetLatency+0x18>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f003 0307 	and.w	r3, r3, #7
}
 800064c:	4618      	mov	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40022000 	.word	0x40022000

0800065c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f043 0201 	orr.w	r2, r3, #1
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	601a      	str	r2, [r3, #0]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6a1a      	ldr	r2, [r3, #32]
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	431a      	orrs	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	621a      	str	r2, [r3, #32]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <LL_TIM_EnableIT_CC2>:
  * @rmtoll DIER         CC2IE         LL_TIM_EnableIT_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	f043 0204 	orr.w	r2, r3, #4
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	60da      	str	r2, [r3, #12]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff ff8f 	bl	80005e8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80006ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80006ce:	f7ff ff73 	bl	80005b8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d2:	2003      	movs	r0, #3
 80006d4:	f7ff feb6 	bl	8000444 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f820 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f7ff feaa 	bl	8000434 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e0:	f7ff fe68 	bl	80003b4 <MX_DMA_Init>
  MX_TIM2_Init();
 80006e4:	f000 fd5e 	bl	80011a4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80006e8:	f001 f9c0 	bl	8001a6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  USART2_RegisterCallback(proccesDmaData);
 80006ec:	480a      	ldr	r0, [pc, #40]	; (8000718 <main+0x58>)
 80006ee:	f001 f9ab 	bl	8001a48 <USART2_RegisterCallback>
  LL_TIM_EnableIT_CC2(TIM2);
 80006f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80006f6:	f7ff ffd2 	bl	800069e <LL_TIM_EnableIT_CC2>
  LL_TIM_EnableCounter(TIM2);
 80006fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80006fe:	f7ff ffad 	bl	800065c <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000702:	2101      	movs	r1, #1
 8000704:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000708:	f7ff ffb8 	bl	800067c <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM2);
 800070c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000710:	f7ff ffa4 	bl	800065c <LL_TIM_EnableCounter>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000714:	e7fe      	b.n	8000714 <main+0x54>
 8000716:	bf00      	nop
 8000718:	08000781 	.word	0x08000781

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff ff79 	bl	8000618 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000726:	bf00      	nop
 8000728:	f7ff ff8a 	bl	8000640 <LL_FLASH_GetLatency>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1fa      	bne.n	8000728 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000732:	f7ff feab 	bl	800048c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000736:	bf00      	nop
 8000738:	f7ff feb8 	bl	80004ac <LL_RCC_HSI_IsReady>
 800073c:	4603      	mov	r3, r0
 800073e:	2b01      	cmp	r3, #1
 8000740:	d1fa      	bne.n	8000738 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000742:	2010      	movs	r0, #16
 8000744:	f7ff fec4 	bl	80004d0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000748:	2000      	movs	r0, #0
 800074a:	f7ff fef9 	bl	8000540 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800074e:	2000      	movs	r0, #0
 8000750:	f7ff ff0a 	bl	8000568 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000754:	2000      	movs	r0, #0
 8000756:	f7ff ff1b 	bl	8000590 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff fece 	bl	80004fc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000760:	bf00      	nop
 8000762:	f7ff fedf 	bl	8000524 <LL_RCC_GetSysClkSource>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1fa      	bne.n	8000762 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <SystemClock_Config+0x60>)
 800076e:	f002 fb1d 	bl	8002dac <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000772:	4802      	ldr	r0, [pc, #8]	; (800077c <SystemClock_Config+0x60>)
 8000774:	f002 fb4e 	bl	8002e14 <LL_SetSystemCoreClock>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	007a1200 	.word	0x007a1200

08000780 <proccesDmaData>:

/* USER CODE BEGIN 4 */
void proccesDmaData(uint8_t* sign,uint16_t len){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	807b      	strh	r3, [r7, #2]
	checkMode(sign,len);
 800078c:	887b      	ldrh	r3, [r7, #2]
 800078e:	4619      	mov	r1, r3
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f895 	bl	80008c0 <checkMode>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <sendData>:

void sendData(uint8_t* data,uint16_t len){
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	460b      	mov	r3, r1
 80007a8:	807b      	strh	r3, [r7, #2]
	USART2_PutBuffer(data, len);
 80007aa:	887b      	ldrh	r3, [r7, #2]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4619      	mov	r1, r3
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f001 fa4d 	bl	8001c50 <USART2_PutBuffer>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <pwmToLed>:

void pwmToLed(uint8_t* sign,uint16_t len){
 80007c0:	b5b0      	push	{r4, r5, r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	807b      	strh	r3, [r7, #2]
 80007cc:	466b      	mov	r3, sp
 80007ce:	461d      	mov	r5, r3
	uint8_t *tx_data;
	char str[len];
 80007d0:	887c      	ldrh	r4, [r7, #2]
 80007d2:	4623      	mov	r3, r4
 80007d4:	3b01      	subs	r3, #1
 80007d6:	623b      	str	r3, [r7, #32]
 80007d8:	b2a0      	uxth	r0, r4
 80007da:	f04f 0100 	mov.w	r1, #0
 80007de:	f04f 0200 	mov.w	r2, #0
 80007e2:	f04f 0300 	mov.w	r3, #0
 80007e6:	00cb      	lsls	r3, r1, #3
 80007e8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80007ec:	00c2      	lsls	r2, r0, #3
 80007ee:	b2a0      	uxth	r0, r4
 80007f0:	f04f 0100 	mov.w	r1, #0
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	00cb      	lsls	r3, r1, #3
 80007fe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000802:	00c2      	lsls	r2, r0, #3
 8000804:	4623      	mov	r3, r4
 8000806:	3307      	adds	r3, #7
 8000808:	08db      	lsrs	r3, r3, #3
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	ebad 0d03 	sub.w	sp, sp, r3
 8000810:	466b      	mov	r3, sp
 8000812:	3300      	adds	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
	for(int j=0;j<len;j++){
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
 800081a:	e00b      	b.n	8000834 <pwmToLed+0x74>
		str[j] = *(sign+j);
 800081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	7819      	ldrb	r1, [r3, #0]
 8000824:	69fa      	ldr	r2, [r7, #28]
 8000826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000828:	4413      	add	r3, r2
 800082a:	460a      	mov	r2, r1
 800082c:	701a      	strb	r2, [r3, #0]
	for(int j=0;j<len;j++){
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	3301      	adds	r3, #1
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
 8000834:	887b      	ldrh	r3, [r7, #2]
 8000836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000838:	429a      	cmp	r2, r3
 800083a:	dbef      	blt.n	800081c <pwmToLed+0x5c>
	}
	char breakset[] = "0123456789";
 800083c:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <pwmToLed+0xf0>)
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	ca07      	ldmia	r2, {r0, r1, r2}
 8000844:	c303      	stmia	r3!, {r0, r1}
 8000846:	801a      	strh	r2, [r3, #0]
 8000848:	3302      	adds	r3, #2
 800084a:	0c12      	lsrs	r2, r2, #16
 800084c:	701a      	strb	r2, [r3, #0]
	if(strstr(str,"$PWM")){
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	4918      	ldr	r1, [pc, #96]	; (80008b4 <pwmToLed+0xf4>)
 8000852:	4618      	mov	r0, r3
 8000854:	f002 ff14 	bl	8003680 <strstr>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d023      	beq.n	80008a6 <pwmToLed+0xe6>
		wantedDutyCycle = atoi(strpbrk(str, breakset));
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	f107 0208 	add.w	r2, r7, #8
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f002 fef0 	bl	800364c <strpbrk>
 800086c:	4603      	mov	r3, r0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 fb04 	bl	8002e7c <atoi>
 8000874:	4603      	mov	r3, r0
 8000876:	b2da      	uxtb	r2, r3
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <pwmToLed+0xf8>)
 800087a:	701a      	strb	r2, [r3, #0]
		int len_data = asprintf(&tx_data, "The brightness is set to: : %d %\n\r",wantedDutyCycle);
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <pwmToLed+0xf8>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	490d      	ldr	r1, [pc, #52]	; (80008bc <pwmToLed+0xfc>)
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fad3 	bl	8002e34 <asiprintf>
 800088e:	61b8      	str	r0, [r7, #24]
		sendData(tx_data,len_data);
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	b292      	uxth	r2, r2
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff80 	bl	800079e <sendData>
		free(tx_data);
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 fb19 	bl	8002ed8 <free>
 80008a6:	46ad      	mov	sp, r5
	}
}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bdb0      	pop	{r4, r5, r7, pc}
 80008b0:	080038d8 	.word	0x080038d8
 80008b4:	080038ac 	.word	0x080038ac
 80008b8:	20000088 	.word	0x20000088
 80008bc:	080038b4 	.word	0x080038b4

080008c0 <checkMode>:

void checkMode(uint8_t* sign,uint16_t len){
 80008c0:	b5b0      	push	{r4, r5, r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	807b      	strh	r3, [r7, #2]
 80008cc:	466b      	mov	r3, sp
 80008ce:	461d      	mov	r5, r3
	uint8_t *tx_data;
	char str[len];
 80008d0:	887c      	ldrh	r4, [r7, #2]
 80008d2:	4623      	mov	r3, r4
 80008d4:	3b01      	subs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
 80008d8:	b2a0      	uxth	r0, r4
 80008da:	f04f 0100 	mov.w	r1, #0
 80008de:	f04f 0200 	mov.w	r2, #0
 80008e2:	f04f 0300 	mov.w	r3, #0
 80008e6:	00cb      	lsls	r3, r1, #3
 80008e8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80008ec:	00c2      	lsls	r2, r0, #3
 80008ee:	b2a0      	uxth	r0, r4
 80008f0:	f04f 0100 	mov.w	r1, #0
 80008f4:	f04f 0200 	mov.w	r2, #0
 80008f8:	f04f 0300 	mov.w	r3, #0
 80008fc:	00cb      	lsls	r3, r1, #3
 80008fe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000902:	00c2      	lsls	r2, r0, #3
 8000904:	4623      	mov	r3, r4
 8000906:	3307      	adds	r3, #7
 8000908:	08db      	lsrs	r3, r3, #3
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	ebad 0d03 	sub.w	sp, sp, r3
 8000910:	466b      	mov	r3, sp
 8000912:	3300      	adds	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
	for(int j=0;j<len;j++){
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
 800091a:	e00b      	b.n	8000934 <checkMode+0x74>
		str[j] = *(sign+j);
 800091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	7819      	ldrb	r1, [r3, #0]
 8000924:	69fa      	ldr	r2, [r7, #28]
 8000926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000928:	4413      	add	r3, r2
 800092a:	460a      	mov	r2, r1
 800092c:	701a      	strb	r2, [r3, #0]
	for(int j=0;j<len;j++){
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	3301      	adds	r3, #1
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
 8000934:	887b      	ldrh	r3, [r7, #2]
 8000936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000938:	429a      	cmp	r2, r3
 800093a:	dbef      	blt.n	800091c <checkMode+0x5c>
	}
	if(strstr(str,"$auto$")){
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	4933      	ldr	r1, [pc, #204]	; (8000a0c <checkMode+0x14c>)
 8000940:	4618      	mov	r0, r3
 8000942:	f002 fe9d 	bl	8003680 <strstr>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d003      	beq.n	8000954 <checkMode+0x94>
		mode = 1;
 800094c:	4b30      	ldr	r3, [pc, #192]	; (8000a10 <checkMode+0x150>)
 800094e:	2201      	movs	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	e00a      	b.n	800096a <checkMode+0xaa>
	}
	else if(strstr(str,"$manual$")){
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	492f      	ldr	r1, [pc, #188]	; (8000a14 <checkMode+0x154>)
 8000958:	4618      	mov	r0, r3
 800095a:	f002 fe91 	bl	8003680 <strstr>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d002      	beq.n	800096a <checkMode+0xaa>
		mode = 2;
 8000964:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <checkMode+0x150>)
 8000966:	2202      	movs	r2, #2
 8000968:	701a      	strb	r2, [r3, #0]
	}
	if (mode == 1){
 800096a:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <checkMode+0x150>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d111      	bne.n	8000996 <checkMode+0xd6>
			int len_data = asprintf(&tx_data, "Mode is set to:  automatic\n\r");
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4928      	ldr	r1, [pc, #160]	; (8000a18 <checkMode+0x158>)
 8000978:	4618      	mov	r0, r3
 800097a:	f002 fa5b 	bl	8002e34 <asiprintf>
 800097e:	61b8      	str	r0, [r7, #24]
			sendData(tx_data,len_data);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	b292      	uxth	r2, r2
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff08 	bl	800079e <sendData>
			free(tx_data);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4618      	mov	r0, r3
 8000992:	f002 faa1 	bl	8002ed8 <free>
		}
		if (mode == 2){
 8000996:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <checkMode+0x150>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b02      	cmp	r3, #2
 800099c:	d119      	bne.n	80009d2 <checkMode+0x112>
			pwmToLed(sign,len);
 800099e:	887b      	ldrh	r3, [r7, #2]
 80009a0:	4619      	mov	r1, r3
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff ff0c 	bl	80007c0 <pwmToLed>
			LL_mDelay(50);
 80009a8:	2032      	movs	r0, #50	; 0x32
 80009aa:	f002 fa0d 	bl	8002dc8 <LL_mDelay>
			int len_data = asprintf(&tx_data, "Mode is set to:  manual\n\r");
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	491a      	ldr	r1, [pc, #104]	; (8000a1c <checkMode+0x15c>)
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 fa3d 	bl	8002e34 <asiprintf>
 80009ba:	6178      	str	r0, [r7, #20]
			sendData(tx_data,len_data);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	b292      	uxth	r2, r2
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff feea 	bl	800079e <sendData>
			free(tx_data);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 fa83 	bl	8002ed8 <free>
		}

		if (mode == 0){
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <checkMode+0x150>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d111      	bne.n	80009fe <checkMode+0x13e>
			int len_data = asprintf(&tx_data, "Mode is set to:  none\n\r");
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4910      	ldr	r1, [pc, #64]	; (8000a20 <checkMode+0x160>)
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 fa27 	bl	8002e34 <asiprintf>
 80009e6:	6138      	str	r0, [r7, #16]
			sendData(tx_data,len_data);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	b292      	uxth	r2, r2
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fed4 	bl	800079e <sendData>
			free(tx_data);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fa6d 	bl	8002ed8 <free>
		}
	return;
 80009fe:	bf00      	nop
 8000a00:	46ad      	mov	sp, r5
 8000a02:	bf00      	nop
}
 8000a04:	3728      	adds	r7, #40	; 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bdb0      	pop	{r4, r5, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	080038e4 	.word	0x080038e4
 8000a10:	20000000 	.word	0x20000000
 8000a14:	080038ec 	.word	0x080038ec
 8000a18:	080038f8 	.word	0x080038f8
 8000a1c:	08003918 	.word	0x08003918
 8000a20:	08003934 	.word	0x08003934

08000a24 <changeLedPWM>:

void changeLedPWM(){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	if(mode == 1){
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <changeLedPWM+0x9c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d123      	bne.n	8000a78 <changeLedPWM+0x54>
		if(fadeMode == 0){
 8000a30:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <changeLedPWM+0xa0>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d10d      	bne.n	8000a54 <changeLedPWM+0x30>
				dutyCycle -= 1;
 8000a38:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <changeLedPWM+0xa4>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <changeLedPWM+0xa4>)
 8000a42:	701a      	strb	r2, [r3, #0]
				if(dutyCycle <= 0){
 8000a44:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <changeLedPWM+0xa4>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d132      	bne.n	8000ab2 <changeLedPWM+0x8e>
					fadeMode = 1;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <changeLedPWM+0xa0>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
 8000a52:	e02e      	b.n	8000ab2 <changeLedPWM+0x8e>
				}
			}
			else if(fadeMode == 1){
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <changeLedPWM+0xa0>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d12a      	bne.n	8000ab2 <changeLedPWM+0x8e>
				dutyCycle += 1;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <changeLedPWM+0xa4>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	3301      	adds	r3, #1
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <changeLedPWM+0xa4>)
 8000a66:	701a      	strb	r2, [r3, #0]
				if (dutyCycle >= 100){
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <changeLedPWM+0xa4>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b63      	cmp	r3, #99	; 0x63
 8000a6e:	d920      	bls.n	8000ab2 <changeLedPWM+0x8e>
					fadeMode = 0;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <changeLedPWM+0xa0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	e01c      	b.n	8000ab2 <changeLedPWM+0x8e>
				}
			}
	}
	else if(mode == 2){
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <changeLedPWM+0x9c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d118      	bne.n	8000ab2 <changeLedPWM+0x8e>
		if(wantedDutyCycle < dutyCycle){
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <changeLedPWM+0xa8>)
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <changeLedPWM+0xa4>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d206      	bcs.n	8000a9a <changeLedPWM+0x76>
			dutyCycle -=1;
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <changeLedPWM+0xa4>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	3b01      	subs	r3, #1
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <changeLedPWM+0xa4>)
 8000a96:	701a      	strb	r2, [r3, #0]
 8000a98:	e00b      	b.n	8000ab2 <changeLedPWM+0x8e>
		}
		else if(wantedDutyCycle > dutyCycle){
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <changeLedPWM+0xa8>)
 8000a9c:	781a      	ldrb	r2, [r3, #0]
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <changeLedPWM+0xa4>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d905      	bls.n	8000ab2 <changeLedPWM+0x8e>
			dutyCycle +=1;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <changeLedPWM+0xa4>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <changeLedPWM+0xa4>)
 8000ab0:	701a      	strb	r2, [r3, #0]
		}
	}
	setDutyCycle(dutyCycle);
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <changeLedPWM+0xa4>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f80a 	bl	8000ad0 <setDutyCycle>
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000089 	.word	0x20000089
 8000ac8:	20000001 	.word	0x20000001
 8000acc:	20000088 	.word	0x20000088

08000ad0 <setDutyCycle>:

void setDutyCycle(uint8_t D){
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	TIM2->CCR1 = ((TIM2->ARR) * D) / 100;
 8000ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae0:	79fa      	ldrb	r2, [r7, #7]
 8000ae2:	fb02 f303 	mul.w	r3, r2, r3
 8000ae6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aea:	4905      	ldr	r1, [pc, #20]	; (8000b00 <setDutyCycle+0x30>)
 8000aec:	fba1 1303 	umull	r1, r3, r1, r3
 8000af0:	095b      	lsrs	r3, r3, #5
 8000af2:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	51eb851f 	.word	0x51eb851f

08000b04 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <LL_DMA_DisableChannel+0x3c>)
 8000b14:	5cd3      	ldrb	r3, [r2, r3]
 8000b16:	461a      	mov	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	3a01      	subs	r2, #1
 8000b22:	4907      	ldr	r1, [pc, #28]	; (8000b40 <LL_DMA_DisableChannel+0x3c>)
 8000b24:	5c8a      	ldrb	r2, [r1, r2]
 8000b26:	4611      	mov	r1, r2
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	440a      	add	r2, r1
 8000b2c:	f023 0301 	bic.w	r3, r3, #1
 8000b30:	6013      	str	r3, [r2, #0]
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	0800394c 	.word	0x0800394c

08000b44 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000b58:	bf0c      	ite	eq
 8000b5a:	2301      	moveq	r3, #1
 8000b5c:	2300      	movne	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b80:	bf0c      	ite	eq
 8000b82:	2301      	moveq	r3, #1
 8000b84:	2300      	movne	r3, #0
 8000b86:	b2db      	uxtb	r3, r3
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ba8:	bf0c      	ite	eq
 8000baa:	2301      	moveq	r3, #1
 8000bac:	2300      	movne	r3, #0
 8000bae:	b2db      	uxtb	r3, r3
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000bca:	605a      	str	r2, [r3, #4]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000be6:	605a      	str	r2, [r3, #4]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c02:	605a      	str	r2, [r3, #4]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <LL_TIM_ClearFlag_CC2>:
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f06f 0204 	mvn.w	r2, #4
 8000c1e:	611a      	str	r2, [r3, #16]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <LL_TIM_IsActiveFlag_CC2>:
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	d101      	bne.n	8000c44 <LL_TIM_IsActiveFlag_CC2+0x18>
 8000c40:	2301      	movs	r3, #1
 8000c42:	e000      	b.n	8000c46 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	2b10      	cmp	r3, #16
 8000c64:	d101      	bne.n	8000c6a <LL_USART_IsActiveFlag_IDLE+0x18>
 8000c66:	2301      	movs	r3, #1
 8000c68:	e000      	b.n	8000c6c <LL_USART_IsActiveFlag_IDLE+0x1a>
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69db      	ldr	r3, [r3, #28]
 8000c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c88:	2b40      	cmp	r3, #64	; 0x40
 8000c8a:	d101      	bne.n	8000c90 <LL_USART_IsActiveFlag_TC+0x18>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e000      	b.n	8000c92 <LL_USART_IsActiveFlag_TC+0x1a>
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2210      	movs	r2, #16
 8000caa:	621a      	str	r2, [r3, #32]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <DMA1_Channel6_IRQHandler+0x38>)
 8000d16:	f7ff ff15 	bl	8000b44 <LL_DMA_IsActiveFlag_TC6>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d105      	bne.n	8000d2c <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8000d20:	f000 ffb6 	bl	8001c90 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8000d24:	4808      	ldr	r0, [pc, #32]	; (8000d48 <DMA1_Channel6_IRQHandler+0x38>)
 8000d26:	f7ff ff49 	bl	8000bbc <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000d2a:	e00a      	b.n	8000d42 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8000d2c:	4806      	ldr	r0, [pc, #24]	; (8000d48 <DMA1_Channel6_IRQHandler+0x38>)
 8000d2e:	f7ff ff31 	bl	8000b94 <LL_DMA_IsActiveFlag_HT6>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d104      	bne.n	8000d42 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8000d38:	f000 ffaa 	bl	8001c90 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <DMA1_Channel6_IRQHandler+0x38>)
 8000d3e:	f7ff ff59 	bl	8000bf4 <LL_DMA_ClearFlag_HT6>
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40020000 	.word	0x40020000

08000d4c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8000d50:	480a      	ldr	r0, [pc, #40]	; (8000d7c <DMA1_Channel7_IRQHandler+0x30>)
 8000d52:	f7ff ff0b 	bl	8000b6c <LL_DMA_IsActiveFlag_TC7>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d10d      	bne.n	8000d78 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8000d5c:	4807      	ldr	r0, [pc, #28]	; (8000d7c <DMA1_Channel7_IRQHandler+0x30>)
 8000d5e:	f7ff ff3b 	bl	8000bd8 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8000d62:	bf00      	nop
 8000d64:	4806      	ldr	r0, [pc, #24]	; (8000d80 <DMA1_Channel7_IRQHandler+0x34>)
 8000d66:	f7ff ff87 	bl	8000c78 <LL_USART_IsActiveFlag_TC>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0f9      	beq.n	8000d64 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8000d70:	2107      	movs	r1, #7
 8000d72:	4802      	ldr	r0, [pc, #8]	; (8000d7c <DMA1_Channel7_IRQHandler+0x30>)
 8000d74:	f7ff fec6 	bl	8000b04 <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40020000 	.word	0x40020000
 8000d80:	40004400 	.word	0x40004400

08000d84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */
	if(LL_TIM_IsActiveFlag_CC2(TIM2)){
 8000d88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d8c:	f7ff ff4e 	bl	8000c2c <LL_TIM_IsActiveFlag_CC2>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d005      	beq.n	8000da2 <TIM2_IRQHandler+0x1e>
		changeLedPWM();
 8000d96:	f7ff fe45 	bl	8000a24 <changeLedPWM>
		LL_TIM_ClearFlag_CC2(TIM2);
 8000d9a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d9e:	f7ff ff37 	bl	8000c10 <LL_TIM_ClearFlag_CC2>
	}
  /* USER CODE END TIM2_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <USART2_IRQHandler+0x20>)
 8000dae:	f7ff ff50 	bl	8000c52 <LL_USART_IsActiveFlag_IDLE>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d004      	beq.n	8000dc2 <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8000db8:	f000 ff6a 	bl	8001c90 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <USART2_IRQHandler+0x20>)
 8000dbe:	f7ff ff6e 	bl	8000c9e <LL_USART_ClearFlag_IDLE>
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40004400 	.word	0x40004400

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d207      	bcs.n	8000e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dfc:	f002 f842 	bl	8002e84 <__errno>
 8000e00:	4603      	mov	r3, r0
 8000e02:	220c      	movs	r2, #12
 8000e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e009      	b.n	8000e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <_sbrk+0x64>)
 8000e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20003000 	.word	0x20003000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	2000008c 	.word	0x2000008c
 8000e34:	200000f0 	.word	0x200000f0

08000e38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_GetPriorityGrouping>:
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_EnableIRQ>:
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	db0b      	blt.n	8000ea2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 021f 	and.w	r2, r3, #31
 8000e90:	4907      	ldr	r1, [pc, #28]	; (8000eb0 <__NVIC_EnableIRQ+0x38>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	2001      	movs	r0, #1
 8000e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_SetPriority>:
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	; (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	; (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	; 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <LL_AHB1_GRP1_EnableClock>:
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f7a:	695a      	ldr	r2, [r3, #20]
 8000f7c:	4907      	ldr	r1, [pc, #28]	; (8000f9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f86:	695a      	ldr	r2, [r3, #20]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <LL_APB1_GRP1_EnableClock>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000faa:	69da      	ldr	r2, [r3, #28]
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fb6:	69da      	ldr	r2, [r3, #28]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <LL_TIM_DisableARRPreload>:
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	601a      	str	r2, [r3, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_TIM_OC_DisableFast>:
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d028      	beq.n	8001052 <LL_TIM_OC_DisableFast+0x62>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	2b04      	cmp	r3, #4
 8001004:	d023      	beq.n	800104e <LL_TIM_OC_DisableFast+0x5e>
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	2b10      	cmp	r3, #16
 800100a:	d01e      	beq.n	800104a <LL_TIM_OC_DisableFast+0x5a>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2b40      	cmp	r3, #64	; 0x40
 8001010:	d019      	beq.n	8001046 <LL_TIM_OC_DisableFast+0x56>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001018:	d013      	beq.n	8001042 <LL_TIM_OC_DisableFast+0x52>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001020:	d00d      	beq.n	800103e <LL_TIM_OC_DisableFast+0x4e>
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001028:	d007      	beq.n	800103a <LL_TIM_OC_DisableFast+0x4a>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001030:	d101      	bne.n	8001036 <LL_TIM_OC_DisableFast+0x46>
 8001032:	2307      	movs	r3, #7
 8001034:	e00e      	b.n	8001054 <LL_TIM_OC_DisableFast+0x64>
 8001036:	2308      	movs	r3, #8
 8001038:	e00c      	b.n	8001054 <LL_TIM_OC_DisableFast+0x64>
 800103a:	2306      	movs	r3, #6
 800103c:	e00a      	b.n	8001054 <LL_TIM_OC_DisableFast+0x64>
 800103e:	2305      	movs	r3, #5
 8001040:	e008      	b.n	8001054 <LL_TIM_OC_DisableFast+0x64>
 8001042:	2304      	movs	r3, #4
 8001044:	e006      	b.n	8001054 <LL_TIM_OC_DisableFast+0x64>
 8001046:	2303      	movs	r3, #3
 8001048:	e004      	b.n	8001054 <LL_TIM_OC_DisableFast+0x64>
 800104a:	2302      	movs	r3, #2
 800104c:	e002      	b.n	8001054 <LL_TIM_OC_DisableFast+0x64>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <LL_TIM_OC_DisableFast+0x64>
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3318      	adds	r3, #24
 800105a:	4619      	mov	r1, r3
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	4a0b      	ldr	r2, [pc, #44]	; (800108c <LL_TIM_OC_DisableFast+0x9c>)
 8001060:	5cd3      	ldrb	r3, [r2, r3]
 8001062:	440b      	add	r3, r1
 8001064:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	4908      	ldr	r1, [pc, #32]	; (8001090 <LL_TIM_OC_DisableFast+0xa0>)
 800106e:	5ccb      	ldrb	r3, [r1, r3]
 8001070:	4619      	mov	r1, r3
 8001072:	2304      	movs	r3, #4
 8001074:	408b      	lsls	r3, r1
 8001076:	43db      	mvns	r3, r3
 8001078:	401a      	ands	r2, r3
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	601a      	str	r2, [r3, #0]
}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	0800396c 	.word	0x0800396c
 8001090:	08003978 	.word	0x08003978

08001094 <LL_TIM_OC_EnablePreload>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d028      	beq.n	80010f6 <LL_TIM_OC_EnablePreload+0x62>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d023      	beq.n	80010f2 <LL_TIM_OC_EnablePreload+0x5e>
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	2b10      	cmp	r3, #16
 80010ae:	d01e      	beq.n	80010ee <LL_TIM_OC_EnablePreload+0x5a>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2b40      	cmp	r3, #64	; 0x40
 80010b4:	d019      	beq.n	80010ea <LL_TIM_OC_EnablePreload+0x56>
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010bc:	d013      	beq.n	80010e6 <LL_TIM_OC_EnablePreload+0x52>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c4:	d00d      	beq.n	80010e2 <LL_TIM_OC_EnablePreload+0x4e>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010cc:	d007      	beq.n	80010de <LL_TIM_OC_EnablePreload+0x4a>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d4:	d101      	bne.n	80010da <LL_TIM_OC_EnablePreload+0x46>
 80010d6:	2307      	movs	r3, #7
 80010d8:	e00e      	b.n	80010f8 <LL_TIM_OC_EnablePreload+0x64>
 80010da:	2308      	movs	r3, #8
 80010dc:	e00c      	b.n	80010f8 <LL_TIM_OC_EnablePreload+0x64>
 80010de:	2306      	movs	r3, #6
 80010e0:	e00a      	b.n	80010f8 <LL_TIM_OC_EnablePreload+0x64>
 80010e2:	2305      	movs	r3, #5
 80010e4:	e008      	b.n	80010f8 <LL_TIM_OC_EnablePreload+0x64>
 80010e6:	2304      	movs	r3, #4
 80010e8:	e006      	b.n	80010f8 <LL_TIM_OC_EnablePreload+0x64>
 80010ea:	2303      	movs	r3, #3
 80010ec:	e004      	b.n	80010f8 <LL_TIM_OC_EnablePreload+0x64>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e002      	b.n	80010f8 <LL_TIM_OC_EnablePreload+0x64>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <LL_TIM_OC_EnablePreload+0x64>
 80010f6:	2300      	movs	r3, #0
 80010f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3318      	adds	r3, #24
 80010fe:	4619      	mov	r1, r3
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <LL_TIM_OC_EnablePreload+0x98>)
 8001104:	5cd3      	ldrb	r3, [r2, r3]
 8001106:	440b      	add	r3, r1
 8001108:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <LL_TIM_OC_EnablePreload+0x9c>)
 8001112:	5ccb      	ldrb	r3, [r1, r3]
 8001114:	4619      	mov	r1, r3
 8001116:	2308      	movs	r3, #8
 8001118:	408b      	lsls	r3, r1
 800111a:	431a      	orrs	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	0800396c 	.word	0x0800396c
 8001130:	08003978 	.word	0x08003978

08001134 <LL_TIM_SetClockSource>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001146:	f023 0307 	bic.w	r3, r3, #7
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	609a      	str	r2, [r3, #8]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <LL_TIM_SetTriggerOutput>:
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	605a      	str	r2, [r3, #4]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_TIM_DisableMasterSlaveMode>:
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	609a      	str	r2, [r3, #8]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b094      	sub	sp, #80	; 0x50
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80011aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	2220      	movs	r2, #32
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fe90 	bl	8002ee8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]
 80011d6:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80011d8:	2001      	movs	r0, #1
 80011da:	f7ff fee1 	bl	8000fa0 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011de:	f7ff fe3d 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2200      	movs	r2, #0
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fe8d 	bl	8000f08 <NVIC_EncodePriority>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4619      	mov	r1, r3
 80011f2:	201c      	movs	r0, #28
 80011f4:	f7ff fe5e 	bl	8000eb4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80011f8:	201c      	movs	r0, #28
 80011fa:	f7ff fe3d 	bl	8000e78 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 80011fe:	f240 331f 	movw	r3, #799	; 0x31f
 8001202:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001204:	2300      	movs	r3, #0
 8001206:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 8001208:	2363      	movs	r3, #99	; 0x63
 800120a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001210:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001214:	4619      	mov	r1, r3
 8001216:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800121a:	f001 f967 	bl	80024ec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800121e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001222:	f7ff fed5 	bl	8000fd0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001226:	2100      	movs	r1, #0
 8001228:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800122c:	f7ff ff82 	bl	8001134 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001230:	2101      	movs	r1, #1
 8001232:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001236:	f7ff ff2d 	bl	8001094 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800123a:	2360      	movs	r3, #96	; 0x60
 800123c:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 100;
 8001246:	2364      	movs	r3, #100	; 0x64
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800124a:	2300      	movs	r3, #0
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	461a      	mov	r2, r3
 8001254:	2101      	movs	r1, #1
 8001256:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800125a:	f001 f9b9 	bl	80025d0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 800125e:	2101      	movs	r1, #1
 8001260:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001264:	f7ff fec4 	bl	8000ff0 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	461a      	mov	r2, r3
 8001276:	2110      	movs	r1, #16
 8001278:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800127c:	f001 f9a8 	bl	80025d0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001280:	2110      	movs	r1, #16
 8001282:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001286:	f7ff feb3 	bl	8000ff0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800128a:	2100      	movs	r1, #0
 800128c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001290:	f7ff ff65 	bl	800115e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001294:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001298:	f7ff ff74 	bl	8001184 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800129c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012a0:	f7ff fe66 	bl	8000f70 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80012a4:	2320      	movs	r3, #32
 80012a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012a8:	2302      	movs	r3, #2
 80012aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c4:	f000 fe6a 	bl	8001f9c <LL_GPIO_Init>

}
 80012c8:	bf00      	nop
 80012ca:	3750      	adds	r7, #80	; 0x50
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <__NVIC_GetPriorityGrouping>:
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4907      	ldr	r1, [pc, #28]	; (8001324 <__NVIC_EnableIRQ+0x38>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <LL_DMA_EnableChannel>:
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <LL_DMA_EnableChannel+0x3c>)
 80013f4:	5cd3      	ldrb	r3, [r2, r3]
 80013f6:	461a      	mov	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	3a01      	subs	r2, #1
 8001402:	4907      	ldr	r1, [pc, #28]	; (8001420 <LL_DMA_EnableChannel+0x3c>)
 8001404:	5c8a      	ldrb	r2, [r1, r2]
 8001406:	4611      	mov	r1, r2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	440a      	add	r2, r1
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6013      	str	r3, [r2, #0]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	08003984 	.word	0x08003984

08001424 <LL_DMA_SetDataTransferDirection>:
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	3b01      	subs	r3, #1
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <LL_DMA_SetDataTransferDirection+0x48>)
 8001436:	5cd3      	ldrb	r3, [r2, r3]
 8001438:	461a      	mov	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4413      	add	r3, r2
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001444:	f023 0310 	bic.w	r3, r3, #16
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	3a01      	subs	r2, #1
 800144c:	4907      	ldr	r1, [pc, #28]	; (800146c <LL_DMA_SetDataTransferDirection+0x48>)
 800144e:	5c8a      	ldrb	r2, [r1, r2]
 8001450:	4611      	mov	r1, r2
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	440a      	add	r2, r1
 8001456:	4611      	mov	r1, r2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	08003984 	.word	0x08003984

08001470 <LL_DMA_GetDataTransferDirection>:
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	3b01      	subs	r3, #1
 800147e:	4a07      	ldr	r2, [pc, #28]	; (800149c <LL_DMA_GetDataTransferDirection+0x2c>)
 8001480:	5cd3      	ldrb	r3, [r2, r3]
 8001482:	461a      	mov	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	f244 0310 	movw	r3, #16400	; 0x4010
 800148e:	4013      	ands	r3, r2
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	08003984 	.word	0x08003984

080014a0 <LL_DMA_SetMode>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <LL_DMA_SetMode+0x44>)
 80014b2:	5cd3      	ldrb	r3, [r2, r3]
 80014b4:	461a      	mov	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4413      	add	r3, r2
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f023 0220 	bic.w	r2, r3, #32
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	4907      	ldr	r1, [pc, #28]	; (80014e4 <LL_DMA_SetMode+0x44>)
 80014c6:	5ccb      	ldrb	r3, [r1, r3]
 80014c8:	4619      	mov	r1, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	440b      	add	r3, r1
 80014ce:	4619      	mov	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	08003984 	.word	0x08003984

080014e8 <LL_DMA_SetPeriphIncMode>:
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	4a0c      	ldr	r2, [pc, #48]	; (800152c <LL_DMA_SetPeriphIncMode+0x44>)
 80014fa:	5cd3      	ldrb	r3, [r2, r3]
 80014fc:	461a      	mov	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	3b01      	subs	r3, #1
 800150c:	4907      	ldr	r1, [pc, #28]	; (800152c <LL_DMA_SetPeriphIncMode+0x44>)
 800150e:	5ccb      	ldrb	r3, [r1, r3]
 8001510:	4619      	mov	r1, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	440b      	add	r3, r1
 8001516:	4619      	mov	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]
}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	08003984 	.word	0x08003984

08001530 <LL_DMA_SetMemoryIncMode>:
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	3b01      	subs	r3, #1
 8001540:	4a0c      	ldr	r2, [pc, #48]	; (8001574 <LL_DMA_SetMemoryIncMode+0x44>)
 8001542:	5cd3      	ldrb	r3, [r2, r3]
 8001544:	461a      	mov	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4413      	add	r3, r2
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	3b01      	subs	r3, #1
 8001554:	4907      	ldr	r1, [pc, #28]	; (8001574 <LL_DMA_SetMemoryIncMode+0x44>)
 8001556:	5ccb      	ldrb	r3, [r1, r3]
 8001558:	4619      	mov	r1, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	440b      	add	r3, r1
 800155e:	4619      	mov	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	08003984 	.word	0x08003984

08001578 <LL_DMA_SetPeriphSize>:
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	3b01      	subs	r3, #1
 8001588:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <LL_DMA_SetPeriphSize+0x44>)
 800158a:	5cd3      	ldrb	r3, [r2, r3]
 800158c:	461a      	mov	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4413      	add	r3, r2
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	3b01      	subs	r3, #1
 800159c:	4907      	ldr	r1, [pc, #28]	; (80015bc <LL_DMA_SetPeriphSize+0x44>)
 800159e:	5ccb      	ldrb	r3, [r1, r3]
 80015a0:	4619      	mov	r1, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	440b      	add	r3, r1
 80015a6:	4619      	mov	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]
}
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	08003984 	.word	0x08003984

080015c0 <LL_DMA_SetMemorySize>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <LL_DMA_SetMemorySize+0x44>)
 80015d2:	5cd3      	ldrb	r3, [r2, r3]
 80015d4:	461a      	mov	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4413      	add	r3, r2
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	4907      	ldr	r1, [pc, #28]	; (8001604 <LL_DMA_SetMemorySize+0x44>)
 80015e6:	5ccb      	ldrb	r3, [r1, r3]
 80015e8:	4619      	mov	r1, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	440b      	add	r3, r1
 80015ee:	4619      	mov	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	08003984 	.word	0x08003984

08001608 <LL_DMA_SetChannelPriorityLevel>:
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	3b01      	subs	r3, #1
 8001618:	4a0c      	ldr	r2, [pc, #48]	; (800164c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800161a:	5cd3      	ldrb	r3, [r2, r3]
 800161c:	461a      	mov	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4413      	add	r3, r2
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	3b01      	subs	r3, #1
 800162c:	4907      	ldr	r1, [pc, #28]	; (800164c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800162e:	5ccb      	ldrb	r3, [r1, r3]
 8001630:	4619      	mov	r1, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	440b      	add	r3, r1
 8001636:	4619      	mov	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4313      	orrs	r3, r2
 800163c:	600b      	str	r3, [r1, #0]
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	08003984 	.word	0x08003984

08001650 <LL_DMA_SetDataLength>:
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	3b01      	subs	r3, #1
 8001660:	4a0c      	ldr	r2, [pc, #48]	; (8001694 <LL_DMA_SetDataLength+0x44>)
 8001662:	5cd3      	ldrb	r3, [r2, r3]
 8001664:	461a      	mov	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4413      	add	r3, r2
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	0c1b      	lsrs	r3, r3, #16
 800166e:	041b      	lsls	r3, r3, #16
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	3a01      	subs	r2, #1
 8001674:	4907      	ldr	r1, [pc, #28]	; (8001694 <LL_DMA_SetDataLength+0x44>)
 8001676:	5c8a      	ldrb	r2, [r1, r2]
 8001678:	4611      	mov	r1, r2
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	440a      	add	r2, r1
 800167e:	4611      	mov	r1, r2
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
}
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	08003984 	.word	0x08003984

08001698 <LL_DMA_GetDataLength>:
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <LL_DMA_GetDataLength+0x28>)
 80016a8:	5cd3      	ldrb	r3, [r2, r3]
 80016aa:	461a      	mov	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4413      	add	r3, r2
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	b29b      	uxth	r3, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	08003984 	.word	0x08003984

080016c4 <LL_DMA_ConfigAddresses>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b10      	cmp	r3, #16
 80016d6:	d114      	bne.n	8001702 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	3b01      	subs	r3, #1
 80016dc:	4a16      	ldr	r2, [pc, #88]	; (8001738 <LL_DMA_ConfigAddresses+0x74>)
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	461a      	mov	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4413      	add	r3, r2
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	4a11      	ldr	r2, [pc, #68]	; (8001738 <LL_DMA_ConfigAddresses+0x74>)
 80016f2:	5cd3      	ldrb	r3, [r2, r3]
 80016f4:	461a      	mov	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4413      	add	r3, r2
 80016fa:	461a      	mov	r2, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	6093      	str	r3, [r2, #8]
}
 8001700:	e013      	b.n	800172a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	3b01      	subs	r3, #1
 8001706:	4a0c      	ldr	r2, [pc, #48]	; (8001738 <LL_DMA_ConfigAddresses+0x74>)
 8001708:	5cd3      	ldrb	r3, [r2, r3]
 800170a:	461a      	mov	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4413      	add	r3, r2
 8001710:	461a      	mov	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3b01      	subs	r3, #1
 800171a:	4a07      	ldr	r2, [pc, #28]	; (8001738 <LL_DMA_ConfigAddresses+0x74>)
 800171c:	5cd3      	ldrb	r3, [r2, r3]
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	461a      	mov	r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	60d3      	str	r3, [r2, #12]
}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	08003984 	.word	0x08003984

0800173c <LL_DMA_SetMemoryAddress>:
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	3b01      	subs	r3, #1
 800174c:	4a06      	ldr	r2, [pc, #24]	; (8001768 <LL_DMA_SetMemoryAddress+0x2c>)
 800174e:	5cd3      	ldrb	r3, [r2, r3]
 8001750:	461a      	mov	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4413      	add	r3, r2
 8001756:	461a      	mov	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	60d3      	str	r3, [r2, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	08003984 	.word	0x08003984

0800176c <LL_DMA_SetPeriphAddress>:
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	3b01      	subs	r3, #1
 800177c:	4a06      	ldr	r2, [pc, #24]	; (8001798 <LL_DMA_SetPeriphAddress+0x2c>)
 800177e:	5cd3      	ldrb	r3, [r2, r3]
 8001780:	461a      	mov	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4413      	add	r3, r2
 8001786:	461a      	mov	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6093      	str	r3, [r2, #8]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	08003984 	.word	0x08003984

0800179c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <LL_DMA_EnableIT_TC+0x3c>)
 80017ac:	5cd3      	ldrb	r3, [r2, r3]
 80017ae:	461a      	mov	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4413      	add	r3, r2
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	3a01      	subs	r2, #1
 80017ba:	4907      	ldr	r1, [pc, #28]	; (80017d8 <LL_DMA_EnableIT_TC+0x3c>)
 80017bc:	5c8a      	ldrb	r2, [r1, r2]
 80017be:	4611      	mov	r1, r2
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	440a      	add	r2, r1
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6013      	str	r3, [r2, #0]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	08003984 	.word	0x08003984

080017dc <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <LL_DMA_EnableIT_HT+0x3c>)
 80017ec:	5cd3      	ldrb	r3, [r2, r3]
 80017ee:	461a      	mov	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	3a01      	subs	r2, #1
 80017fa:	4907      	ldr	r1, [pc, #28]	; (8001818 <LL_DMA_EnableIT_HT+0x3c>)
 80017fc:	5c8a      	ldrb	r2, [r1, r2]
 80017fe:	4611      	mov	r1, r2
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	440a      	add	r2, r1
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6013      	str	r3, [r2, #0]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	08003984 	.word	0x08003984

0800181c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	3b01      	subs	r3, #1
 800182a:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <LL_DMA_EnableIT_TE+0x3c>)
 800182c:	5cd3      	ldrb	r3, [r2, r3]
 800182e:	461a      	mov	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4413      	add	r3, r2
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	3a01      	subs	r2, #1
 800183a:	4907      	ldr	r1, [pc, #28]	; (8001858 <LL_DMA_EnableIT_TE+0x3c>)
 800183c:	5c8a      	ldrb	r2, [r1, r2]
 800183e:	4611      	mov	r1, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	440a      	add	r2, r1
 8001844:	f043 0308 	orr.w	r3, r3, #8
 8001848:	6013      	str	r3, [r2, #0]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	08003984 	.word	0x08003984

0800185c <LL_AHB1_GRP1_EnableClock>:
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4313      	orrs	r3, r2
 800186e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4013      	ands	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	40021000 	.word	0x40021000

0800188c <LL_APB1_GRP1_EnableClock>:
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001896:	69da      	ldr	r2, [r3, #28]
 8001898:	4907      	ldr	r1, [pc, #28]	; (80018b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4313      	orrs	r3, r2
 800189e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018a2:	69da      	ldr	r2, [r3, #28]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4013      	ands	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	40021000 	.word	0x40021000

080018bc <LL_USART_Enable>:
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f043 0201 	orr.w	r2, r3, #1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	601a      	str	r2, [r3, #0]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_USART_ConfigAsyncMode>:
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	609a      	str	r2, [r3, #8]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	e853 3f00 	ldrex	r3, [r3]
 800191a:	60bb      	str	r3, [r7, #8]
   return(result);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	f043 0310 	orr.w	r3, r3, #16
 8001922:	61fb      	str	r3, [r7, #28]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	61ba      	str	r2, [r7, #24]
 800192a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800192c:	6979      	ldr	r1, [r7, #20]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	e841 2300 	strex	r3, r2, [r1]
 8001934:	613b      	str	r3, [r7, #16]
   return(result);
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1e9      	bne.n	8001910 <LL_USART_EnableIT_IDLE+0x8>
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 800194a:	b480      	push	{r7}
 800194c:	b089      	sub	sp, #36	; 0x24
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3308      	adds	r3, #8
 8001956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	e853 3f00 	ldrex	r3, [r3]
 800195e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001966:	61fb      	str	r3, [r7, #28]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3308      	adds	r3, #8
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	61ba      	str	r2, [r7, #24]
 8001970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001972:	6979      	ldr	r1, [r7, #20]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	e841 2300 	strex	r3, r2, [r1]
 800197a:	613b      	str	r3, [r7, #16]
   return(result);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1e7      	bne.n	8001952 <LL_USART_DisableIT_CTS+0x8>
}
 8001982:	bf00      	nop
 8001984:	bf00      	nop
 8001986:	3724      	adds	r7, #36	; 0x24
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3308      	adds	r3, #8
 800199c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	e853 3f00 	ldrex	r3, [r3]
 80019a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3308      	adds	r3, #8
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	61ba      	str	r2, [r7, #24]
 80019b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019b8:	6979      	ldr	r1, [r7, #20]
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	e841 2300 	strex	r3, r2, [r1]
 80019c0:	613b      	str	r3, [r7, #16]
   return(result);
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1e7      	bne.n	8001998 <LL_USART_EnableDMAReq_RX+0x8>
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3724      	adds	r7, #36	; 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b089      	sub	sp, #36	; 0x24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3308      	adds	r3, #8
 80019e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	e853 3f00 	ldrex	r3, [r3]
 80019ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3308      	adds	r3, #8
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	61ba      	str	r2, [r7, #24]
 80019fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019fe:	6979      	ldr	r1, [r7, #20]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	e841 2300 	strex	r3, r2, [r1]
 8001a06:	613b      	str	r3, [r7, #16]
   return(result);
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1e7      	bne.n	80019de <LL_USART_EnableDMAReq_TX+0x8>
}
 8001a0e:	bf00      	nop
 8001a10:	bf00      	nop
 8001a12:	3724      	adds	r7, #36	; 0x24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d103      	bne.n	8001a34 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3328      	adds	r3, #40	; 0x28
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	e002      	b.n	8001a3a <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3324      	adds	r3, #36	; 0x24
 8001a38:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <USART2_RegisterCallback>:
uint8_t bufferUSART2dma[DMA_USART2_BUFFER_SIZE];

static void (* USART2_ProcessData)(const uint8_t* data, uint16_t len) = 0;

void USART2_RegisterCallback(void *callback)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a03      	ldr	r2, [pc, #12]	; (8001a68 <USART2_RegisterCallback+0x20>)
 8001a5a:	6013      	str	r3, [r2, #0]
	}
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	20000090 	.word	0x20000090

08001a6c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a6c:	b5b0      	push	{r4, r5, r7, lr}
 8001a6e:	b090      	sub	sp, #64	; 0x40
 8001a70:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]
 8001a82:	615a      	str	r2, [r3, #20]
 8001a84:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
 8001a94:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001a96:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a9a:	f7ff fef7 	bl	800188c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001a9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001aa2:	f7ff fedb 	bl	800185c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8001aa6:	f248 0304 	movw	r3, #32772	; 0x8004
 8001aaa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001aac:	2302      	movs	r3, #2
 8001aae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001abc:	2307      	movs	r3, #7
 8001abe:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac8:	f000 fa68 	bl	8001f9c <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2106      	movs	r1, #6
 8001ad0:	485c      	ldr	r0, [pc, #368]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001ad2:	f7ff fca7 	bl	8001424 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8001ad6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ada:	2106      	movs	r1, #6
 8001adc:	4859      	ldr	r0, [pc, #356]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001ade:	f7ff fd93 	bl	8001608 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	2106      	movs	r1, #6
 8001ae6:	4857      	ldr	r0, [pc, #348]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001ae8:	f7ff fcda 	bl	80014a0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2106      	movs	r1, #6
 8001af0:	4854      	ldr	r0, [pc, #336]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001af2:	f7ff fcf9 	bl	80014e8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	2106      	movs	r1, #6
 8001afa:	4852      	ldr	r0, [pc, #328]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001afc:	f7ff fd18 	bl	8001530 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2106      	movs	r1, #6
 8001b04:	484f      	ldr	r0, [pc, #316]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001b06:	f7ff fd37 	bl	8001578 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2106      	movs	r1, #6
 8001b0e:	484d      	ldr	r0, [pc, #308]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001b10:	f7ff fd56 	bl	80015c0 <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001b14:	2210      	movs	r2, #16
 8001b16:	2107      	movs	r1, #7
 8001b18:	484a      	ldr	r0, [pc, #296]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001b1a:	f7ff fc83 	bl	8001424 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8001b1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b22:	2107      	movs	r1, #7
 8001b24:	4847      	ldr	r0, [pc, #284]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001b26:	f7ff fd6f 	bl	8001608 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2107      	movs	r1, #7
 8001b2e:	4845      	ldr	r0, [pc, #276]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001b30:	f7ff fcb6 	bl	80014a0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2107      	movs	r1, #7
 8001b38:	4842      	ldr	r0, [pc, #264]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001b3a:	f7ff fcd5 	bl	80014e8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001b3e:	2280      	movs	r2, #128	; 0x80
 8001b40:	2107      	movs	r1, #7
 8001b42:	4840      	ldr	r0, [pc, #256]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001b44:	f7ff fcf4 	bl	8001530 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2107      	movs	r1, #7
 8001b4c:	483d      	ldr	r0, [pc, #244]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001b4e:	f7ff fd13 	bl	8001578 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2107      	movs	r1, #7
 8001b56:	483b      	ldr	r0, [pc, #236]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001b58:	f7ff fd32 	bl	80015c0 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b5c:	f7ff fbb8 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fc08 	bl	800137c <NVIC_EncodePriority>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4619      	mov	r1, r3
 8001b70:	2026      	movs	r0, #38	; 0x26
 8001b72:	f7ff fbd9 	bl	8001328 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001b76:	2026      	movs	r0, #38	; 0x26
 8001b78:	f7ff fbb8 	bl	80012ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	4832      	ldr	r0, [pc, #200]	; (8001c48 <MX_USART2_UART_Init+0x1dc>)
 8001b80:	f7ff ff4c 	bl	8001a1c <LL_USART_DMA_GetRegAddr>
 8001b84:	4604      	mov	r4, r0
 8001b86:	4d31      	ldr	r5, [pc, #196]	; (8001c4c <MX_USART2_UART_Init+0x1e0>)
 8001b88:	2106      	movs	r1, #6
 8001b8a:	482e      	ldr	r0, [pc, #184]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001b8c:	f7ff fc70 	bl	8001470 <LL_DMA_GetDataTransferDirection>
 8001b90:	4603      	mov	r3, r0
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	462b      	mov	r3, r5
 8001b96:	4622      	mov	r2, r4
 8001b98:	2106      	movs	r1, #6
 8001b9a:	482a      	ldr	r0, [pc, #168]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001b9c:	f7ff fd92 	bl	80016c4 <LL_DMA_ConfigAddresses>
					LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
					(uint32_t)bufferUSART2dma,
					LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8001ba0:	2240      	movs	r2, #64	; 0x40
 8001ba2:	2106      	movs	r1, #6
 8001ba4:	4827      	ldr	r0, [pc, #156]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001ba6:	f7ff fd53 	bl	8001650 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001baa:	2106      	movs	r1, #6
 8001bac:	4825      	ldr	r0, [pc, #148]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001bae:	f7ff fc19 	bl	80013e4 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8001bb2:	4825      	ldr	r0, [pc, #148]	; (8001c48 <MX_USART2_UART_Init+0x1dc>)
 8001bb4:	f7ff feec 	bl	8001990 <LL_USART_EnableDMAReq_RX>
  
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8001bb8:	2106      	movs	r1, #6
 8001bba:	4822      	ldr	r0, [pc, #136]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001bbc:	f7ff fdee 	bl	800179c <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8001bc0:	2106      	movs	r1, #6
 8001bc2:	4820      	ldr	r0, [pc, #128]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001bc4:	f7ff fe0a 	bl	80017dc <LL_DMA_EnableIT_HT>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8001bc8:	2100      	movs	r1, #0
 8001bca:	481f      	ldr	r0, [pc, #124]	; (8001c48 <MX_USART2_UART_Init+0x1dc>)
 8001bcc:	f7ff ff26 	bl	8001a1c <LL_USART_DMA_GetRegAddr>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2107      	movs	r1, #7
 8001bd6:	481b      	ldr	r0, [pc, #108]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001bd8:	f7ff fdc8 	bl	800176c <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8001bdc:	481a      	ldr	r0, [pc, #104]	; (8001c48 <MX_USART2_UART_Init+0x1dc>)
 8001bde:	f7ff fefa 	bl	80019d6 <LL_USART_EnableDMAReq_TX>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8001be2:	2107      	movs	r1, #7
 8001be4:	4817      	ldr	r0, [pc, #92]	; (8001c44 <MX_USART2_UART_Init+0x1d8>)
 8001be6:	f7ff fe19 	bl	800181c <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8001bea:	2100      	movs	r1, #0
 8001bec:	2026      	movs	r0, #38	; 0x26
 8001bee:	f7ff fb9b 	bl	8001328 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001bf2:	2026      	movs	r0, #38	; 0x26
 8001bf4:	f7ff fb7a 	bl	80012ec <__NVIC_EnableIRQ>

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001bf8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001bfc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001c0a:	230c      	movs	r3, #12
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001c12:	2300      	movs	r3, #0
 8001c14:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480a      	ldr	r0, [pc, #40]	; (8001c48 <MX_USART2_UART_Init+0x1dc>)
 8001c1e:	f001 f83f 	bl	8002ca0 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8001c22:	4809      	ldr	r0, [pc, #36]	; (8001c48 <MX_USART2_UART_Init+0x1dc>)
 8001c24:	f7ff fe91 	bl	800194a <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8001c28:	4807      	ldr	r0, [pc, #28]	; (8001c48 <MX_USART2_UART_Init+0x1dc>)
 8001c2a:	f7ff fe57 	bl	80018dc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001c2e:	4806      	ldr	r0, [pc, #24]	; (8001c48 <MX_USART2_UART_Init+0x1dc>)
 8001c30:	f7ff fe44 	bl	80018bc <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  LL_USART_EnableIT_IDLE(USART2);
 8001c34:	4804      	ldr	r0, [pc, #16]	; (8001c48 <MX_USART2_UART_Init+0x1dc>)
 8001c36:	f7ff fe67 	bl	8001908 <LL_USART_EnableIT_IDLE>
  /* USER CODE END USART2_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	3738      	adds	r7, #56	; 0x38
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bdb0      	pop	{r4, r5, r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40004400 	.word	0x40004400
 8001c4c:	200000a0 	.word	0x200000a0

08001c50 <USART2_PutBuffer>:

/* USER CODE BEGIN 1 */
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	2107      	movs	r1, #7
 8001c62:	480a      	ldr	r0, [pc, #40]	; (8001c8c <USART2_PutBuffer+0x3c>)
 8001c64:	f7ff fd6a 	bl	800173c <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2107      	movs	r1, #7
 8001c6e:	4807      	ldr	r0, [pc, #28]	; (8001c8c <USART2_PutBuffer+0x3c>)
 8001c70:	f7ff fcee 	bl	8001650 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8001c74:	2107      	movs	r1, #7
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <USART2_PutBuffer+0x3c>)
 8001c78:	f7ff fd90 	bl	800179c <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001c7c:	2107      	movs	r1, #7
 8001c7e:	4803      	ldr	r0, [pc, #12]	; (8001c8c <USART2_PutBuffer+0x3c>)
 8001c80:	f7ff fbb0 	bl	80013e4 <LL_DMA_EnableChannel>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40020000 	.word	0x40020000

08001c90 <USART2_CheckDmaReception>:


void USART2_CheckDmaReception(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
	if(USART2_ProcessData == 0) return;
 8001c96:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <USART2_CheckDmaReception+0xa0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d043      	beq.n	8001d26 <USART2_CheckDmaReception+0x96>

	static uint16_t old_pos = 0;

	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8001c9e:	2106      	movs	r1, #6
 8001ca0:	4824      	ldr	r0, [pc, #144]	; (8001d34 <USART2_CheckDmaReception+0xa4>)
 8001ca2:	f7ff fcf9 	bl	8001698 <LL_DMA_GetDataLength>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001cae:	80fb      	strh	r3, [r7, #6]

	if (pos != old_pos)
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <USART2_CheckDmaReception+0xa8>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	88fa      	ldrh	r2, [r7, #6]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d02a      	beq.n	8001d10 <USART2_CheckDmaReception+0x80>
	{
		if (pos > old_pos)
 8001cba:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <USART2_CheckDmaReception+0xa8>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	88fa      	ldrh	r2, [r7, #6]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d90e      	bls.n	8001ce2 <USART2_CheckDmaReception+0x52>
		{
			USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <USART2_CheckDmaReception+0xa0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <USART2_CheckDmaReception+0xa8>)
 8001cca:	8812      	ldrh	r2, [r2, #0]
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4a1b      	ldr	r2, [pc, #108]	; (8001d3c <USART2_CheckDmaReception+0xac>)
 8001cd0:	1888      	adds	r0, r1, r2
 8001cd2:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <USART2_CheckDmaReception+0xa8>)
 8001cd4:	8812      	ldrh	r2, [r2, #0]
 8001cd6:	88f9      	ldrh	r1, [r7, #6]
 8001cd8:	1a8a      	subs	r2, r1, r2
 8001cda:	b292      	uxth	r2, r2
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4798      	blx	r3
 8001ce0:	e016      	b.n	8001d10 <USART2_CheckDmaReception+0x80>
		}
		else
		{
			USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <USART2_CheckDmaReception+0xa0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a14      	ldr	r2, [pc, #80]	; (8001d38 <USART2_CheckDmaReception+0xa8>)
 8001ce8:	8812      	ldrh	r2, [r2, #0]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <USART2_CheckDmaReception+0xac>)
 8001cee:	1888      	adds	r0, r1, r2
 8001cf0:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <USART2_CheckDmaReception+0xa8>)
 8001cf2:	8812      	ldrh	r2, [r2, #0]
 8001cf4:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 8001cf8:	b292      	uxth	r2, r2
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4798      	blx	r3

			if (pos > 0)
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <USART2_CheckDmaReception+0x80>
			{
				USART2_ProcessData(&bufferUSART2dma[0], pos);
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <USART2_CheckDmaReception+0xa0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	88fa      	ldrh	r2, [r7, #6]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	480b      	ldr	r0, [pc, #44]	; (8001d3c <USART2_CheckDmaReception+0xac>)
 8001d0e:	4798      	blx	r3
			}
		}
	}

	old_pos = pos;
 8001d10:	4a09      	ldr	r2, [pc, #36]	; (8001d38 <USART2_CheckDmaReception+0xa8>)
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	8013      	strh	r3, [r2, #0]

	if (old_pos == DMA_USART2_BUFFER_SIZE)
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <USART2_CheckDmaReception+0xa8>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	2b40      	cmp	r3, #64	; 0x40
 8001d1c:	d104      	bne.n	8001d28 <USART2_CheckDmaReception+0x98>
	{
		old_pos = 0;
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <USART2_CheckDmaReception+0xa8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	801a      	strh	r2, [r3, #0]
 8001d24:	e000      	b.n	8001d28 <USART2_CheckDmaReception+0x98>
	if(USART2_ProcessData == 0) return;
 8001d26:	bf00      	nop
	}
}
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000090 	.word	0x20000090
 8001d34:	40020000 	.word	0x40020000
 8001d38:	20000094 	.word	0x20000094
 8001d3c:	200000a0 	.word	0x200000a0

08001d40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d78 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d44:	480d      	ldr	r0, [pc, #52]	; (8001d7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d46:	490e      	ldr	r1, [pc, #56]	; (8001d80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d48:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <LoopForever+0xe>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d5c:	4c0b      	ldr	r4, [pc, #44]	; (8001d8c <LoopForever+0x16>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d6a:	f7ff f865 	bl	8000e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f001 f88f 	bl	8002e90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d72:	f7fe fca5 	bl	80006c0 <main>

08001d76 <LoopForever>:

LoopForever:
    b LoopForever
 8001d76:	e7fe      	b.n	8001d76 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d78:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d80:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001d84:	08003ac8 	.word	0x08003ac8
  ldr r2, =_sbss
 8001d88:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001d8c:	200000f0 	.word	0x200000f0

08001d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d90:	e7fe      	b.n	8001d90 <ADC1_2_IRQHandler>

08001d92 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b089      	sub	sp, #36	; 0x24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	613b      	str	r3, [r7, #16]
  return result;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	2103      	movs	r1, #3
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	61bb      	str	r3, [r7, #24]
  return result;
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	431a      	orrs	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	601a      	str	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	3724      	adds	r7, #36	; 0x24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	401a      	ands	r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	605a      	str	r2, [r3, #4]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	613b      	str	r3, [r7, #16]
  return result;
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2103      	movs	r1, #3
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	401a      	ands	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	61bb      	str	r3, [r7, #24]
  return result;
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001e72:	bf00      	nop
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b089      	sub	sp, #36	; 0x24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	613b      	str	r3, [r7, #16]
  return result;
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	2103      	movs	r1, #3
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	401a      	ands	r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	61bb      	str	r3, [r7, #24]
  return result;
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	60da      	str	r2, [r3, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3724      	adds	r7, #36	; 0x24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a1a      	ldr	r2, [r3, #32]
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	613b      	str	r3, [r7, #16]
  return result;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	210f      	movs	r1, #15
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	61bb      	str	r3, [r7, #24]
  return result;
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001f2e:	bf00      	nop
 8001f30:	3724      	adds	r7, #36	; 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b089      	sub	sp, #36	; 0x24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	613b      	str	r3, [r7, #16]
  return result;
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	210f      	movs	r1, #15
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	61bb      	str	r3, [r7, #24]
  return result;
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001f90:	bf00      	nop
 8001f92:	3724      	adds	r7, #36	; 0x24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	613b      	str	r3, [r7, #16]
  return result;
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001fbe:	e051      	b.n	8002064 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d043      	beq.n	800205e <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d003      	beq.n	8001fe6 <LL_GPIO_Init+0x4a>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d10e      	bne.n	8002004 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	461a      	mov	r2, r3
 8001fec:	69b9      	ldr	r1, [r7, #24]
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ff16 	bl	8001e20 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6819      	ldr	r1, [r3, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff fef6 	bl	8001df0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	461a      	mov	r2, r3
 800200a:	69b9      	ldr	r1, [r7, #24]
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ff36 	bl	8001e7e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d11a      	bne.n	8002050 <LL_GPIO_Init+0xb4>
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	60bb      	str	r3, [r7, #8]
  return result;
 8002026:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b07      	cmp	r3, #7
 8002030:	d807      	bhi.n	8002042 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	461a      	mov	r2, r3
 8002038:	69b9      	ldr	r1, [r7, #24]
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ff4e 	bl	8001edc <LL_GPIO_SetAFPin_0_7>
 8002040:	e006      	b.n	8002050 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	461a      	mov	r2, r3
 8002048:	69b9      	ldr	r1, [r7, #24]
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ff75 	bl	8001f3a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	461a      	mov	r2, r3
 8002056:	69b9      	ldr	r1, [r7, #24]
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff fe9a 	bl	8001d92 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3301      	adds	r3, #1
 8002062:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1a6      	bne.n	8001fc0 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3720      	adds	r7, #32
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <LL_RCC_HSI_IsReady>:
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <LL_RCC_HSI_IsReady+0x20>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b02      	cmp	r3, #2
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40021000 	.word	0x40021000

080020a0 <LL_RCC_LSE_IsReady>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <LL_RCC_LSE_IsReady+0x20>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	bf0c      	ite	eq
 80020b0:	2301      	moveq	r3, #1
 80020b2:	2300      	movne	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40021000 	.word	0x40021000

080020c4 <LL_RCC_GetSysClkSource>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <LL_RCC_GetSysClkSource+0x18>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000

080020e0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <LL_RCC_GetAHBPrescaler+0x18>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000

080020fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000

08002118 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800211c:	4b04      	ldr	r3, [pc, #16]	; (8002130 <LL_RCC_GetAPB2Prescaler+0x18>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000

08002134 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 800213c:	4b07      	ldr	r3, [pc, #28]	; (800215c <LL_RCC_GetUSARTClockSource+0x28>)
 800213e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002140:	2103      	movs	r1, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	401a      	ands	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	4313      	orrs	r3, r2
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	40021000 	.word	0x40021000

08002160 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <LL_RCC_PLL_GetMainSource+0x18>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000

0800217c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000

08002198 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <LL_RCC_PLL_GetPrediv+0x18>)
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	f003 030f 	and.w	r3, r3, #15
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000

080021b4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80021bc:	f000 f864 	bl	8002288 <RCC_GetSystemClockFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f882 	bl	80022d4 <RCC_GetHCLKClockFreq>
 80021d0:	4602      	mov	r2, r0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f890 	bl	8002300 <RCC_GetPCLK1ClockFreq>
 80021e0:	4602      	mov	r2, r0
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 f89c 	bl	8002328 <RCC_GetPCLK2ClockFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60da      	str	r2, [r3, #12]
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d12d      	bne.n	800226e <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ff8e 	bl	8002134 <LL_RCC_GetUSARTClockSource>
 8002218:	4603      	mov	r3, r0
 800221a:	2b03      	cmp	r3, #3
 800221c:	d00a      	beq.n	8002234 <LL_RCC_GetUSARTClockFreq+0x34>
 800221e:	2b03      	cmp	r3, #3
 8002220:	d819      	bhi.n	8002256 <LL_RCC_GetUSARTClockFreq+0x56>
 8002222:	2b01      	cmp	r3, #1
 8002224:	d002      	beq.n	800222c <LL_RCC_GetUSARTClockFreq+0x2c>
 8002226:	2b02      	cmp	r3, #2
 8002228:	d00c      	beq.n	8002244 <LL_RCC_GetUSARTClockFreq+0x44>
 800222a:	e014      	b.n	8002256 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800222c:	f000 f82c 	bl	8002288 <RCC_GetSystemClockFreq>
 8002230:	60f8      	str	r0, [r7, #12]
        break;
 8002232:	e021      	b.n	8002278 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002234:	f7ff ff22 	bl	800207c <LL_RCC_HSI_IsReady>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d019      	beq.n	8002272 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 800223e:	4b11      	ldr	r3, [pc, #68]	; (8002284 <LL_RCC_GetUSARTClockFreq+0x84>)
 8002240:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002242:	e016      	b.n	8002272 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002244:	f7ff ff2c 	bl	80020a0 <LL_RCC_LSE_IsReady>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d013      	beq.n	8002276 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 800224e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002252:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002254:	e00f      	b.n	8002276 <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002256:	f000 f817 	bl	8002288 <RCC_GetSystemClockFreq>
 800225a:	4603      	mov	r3, r0
 800225c:	4618      	mov	r0, r3
 800225e:	f000 f839 	bl	80022d4 <RCC_GetHCLKClockFreq>
 8002262:	4603      	mov	r3, r0
 8002264:	4618      	mov	r0, r3
 8002266:	f000 f84b 	bl	8002300 <RCC_GetPCLK1ClockFreq>
 800226a:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 800226c:	e004      	b.n	8002278 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 800226e:	bf00      	nop
 8002270:	e002      	b.n	8002278 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002272:	bf00      	nop
 8002274:	e000      	b.n	8002278 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002276:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002278:	68fb      	ldr	r3, [r7, #12]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	007a1200 	.word	0x007a1200

08002288 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002292:	f7ff ff17 	bl	80020c4 <LL_RCC_GetSysClkSource>
 8002296:	4603      	mov	r3, r0
 8002298:	2b08      	cmp	r3, #8
 800229a:	d00c      	beq.n	80022b6 <RCC_GetSystemClockFreq+0x2e>
 800229c:	2b08      	cmp	r3, #8
 800229e:	d80e      	bhi.n	80022be <RCC_GetSystemClockFreq+0x36>
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <RCC_GetSystemClockFreq+0x22>
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d003      	beq.n	80022b0 <RCC_GetSystemClockFreq+0x28>
 80022a8:	e009      	b.n	80022be <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <RCC_GetSystemClockFreq+0x48>)
 80022ac:	607b      	str	r3, [r7, #4]
      break;
 80022ae:	e009      	b.n	80022c4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80022b0:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <RCC_GetSystemClockFreq+0x48>)
 80022b2:	607b      	str	r3, [r7, #4]
      break;
 80022b4:	e006      	b.n	80022c4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80022b6:	f000 f84b 	bl	8002350 <RCC_PLL_GetFreqDomain_SYS>
 80022ba:	6078      	str	r0, [r7, #4]
      break;
 80022bc:	e002      	b.n	80022c4 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80022be:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <RCC_GetSystemClockFreq+0x48>)
 80022c0:	607b      	str	r3, [r7, #4]
      break;
 80022c2:	bf00      	nop
  }

  return frequency;
 80022c4:	687b      	ldr	r3, [r7, #4]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	007a1200 	.word	0x007a1200

080022d4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80022dc:	f7ff ff00 	bl	80020e0 <LL_RCC_GetAHBPrescaler>
 80022e0:	4603      	mov	r3, r0
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	4a04      	ldr	r2, [pc, #16]	; (80022fc <RCC_GetHCLKClockFreq+0x28>)
 80022ea:	5cd3      	ldrb	r3, [r2, r3]
 80022ec:	461a      	mov	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	40d3      	lsrs	r3, r2
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	08003954 	.word	0x08003954

08002300 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002308:	f7ff fef8 	bl	80020fc <LL_RCC_GetAPB1Prescaler>
 800230c:	4603      	mov	r3, r0
 800230e:	0a1b      	lsrs	r3, r3, #8
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <RCC_GetPCLK1ClockFreq+0x24>)
 8002312:	5cd3      	ldrb	r3, [r2, r3]
 8002314:	461a      	mov	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	40d3      	lsrs	r3, r2
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	08003964 	.word	0x08003964

08002328 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002330:	f7ff fef2 	bl	8002118 <LL_RCC_GetAPB2Prescaler>
 8002334:	4603      	mov	r3, r0
 8002336:	0adb      	lsrs	r3, r3, #11
 8002338:	4a04      	ldr	r2, [pc, #16]	; (800234c <RCC_GetPCLK2ClockFreq+0x24>)
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	461a      	mov	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	40d3      	lsrs	r3, r2
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	08003964 	.word	0x08003964

08002350 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800235e:	f7ff feff 	bl	8002160 <LL_RCC_PLL_GetMainSource>
 8002362:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d004      	beq.n	8002374 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002370:	d003      	beq.n	800237a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002372:	e005      	b.n	8002380 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002376:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002378:	e005      	b.n	8002386 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800237a:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800237c:	60fb      	str	r3, [r7, #12]
      break;
 800237e:	e002      	b.n	8002386 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002382:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002384:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002386:	f7ff ff07 	bl	8002198 <LL_RCC_PLL_GetPrediv>
 800238a:	4603      	mov	r3, r0
 800238c:	3301      	adds	r3, #1
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	fbb2 f4f3 	udiv	r4, r2, r3
 8002394:	f7ff fef2 	bl	800217c <LL_RCC_PLL_GetMultiplicator>
 8002398:	4603      	mov	r3, r0
 800239a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800239e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023a2:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	fa92 f2a2 	rbit	r2, r2
 80023aa:	603a      	str	r2, [r7, #0]
  return result;
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	fab2 f282 	clz	r2, r2
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	40d3      	lsrs	r3, r2
 80023b6:	3302      	adds	r3, #2
 80023b8:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd90      	pop	{r4, r7, pc}
 80023c4:	003d0900 	.word	0x003d0900
 80023c8:	007a1200 	.word	0x007a1200

080023cc <LL_TIM_SetPrescaler>:
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_TIM_SetAutoReload>:
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_TIM_SetRepetitionCounter>:
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_TIM_OC_SetCompareCH1>:
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_TIM_OC_SetCompareCH2>:
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_TIM_OC_SetCompareCH3>:
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <LL_TIM_OC_SetCompareCH4>:
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_TIM_OC_SetCompareCH5>:
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_TIM_OC_SetCompareCH6>:
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	f043 0201 	orr.w	r2, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	615a      	str	r2, [r3, #20]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a2f      	ldr	r2, [pc, #188]	; (80025bc <LL_TIM_Init+0xd0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d007      	beq.n	8002514 <LL_TIM_Init+0x28>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250a:	d003      	beq.n	8002514 <LL_TIM_Init+0x28>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a2c      	ldr	r2, [pc, #176]	; (80025c0 <LL_TIM_Init+0xd4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d106      	bne.n	8002522 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a25      	ldr	r2, [pc, #148]	; (80025bc <LL_TIM_Init+0xd0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d013      	beq.n	8002552 <LL_TIM_Init+0x66>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002530:	d00f      	beq.n	8002552 <LL_TIM_Init+0x66>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <LL_TIM_Init+0xd4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00b      	beq.n	8002552 <LL_TIM_Init+0x66>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a21      	ldr	r2, [pc, #132]	; (80025c4 <LL_TIM_Init+0xd8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <LL_TIM_Init+0x66>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <LL_TIM_Init+0xdc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d003      	beq.n	8002552 <LL_TIM_Init+0x66>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <LL_TIM_Init+0xe0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d106      	bne.n	8002560 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4619      	mov	r1, r3
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ff3b 	bl	80023e8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	4619      	mov	r1, r3
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ff27 	bl	80023cc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <LL_TIM_Init+0xd0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00b      	beq.n	800259e <LL_TIM_Init+0xb2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <LL_TIM_Init+0xd8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d007      	beq.n	800259e <LL_TIM_Init+0xb2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <LL_TIM_Init+0xdc>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d003      	beq.n	800259e <LL_TIM_Init+0xb2>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <LL_TIM_Init+0xe0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d105      	bne.n	80025aa <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	4619      	mov	r1, r3
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff2d 	bl	8002404 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ff8e 	bl	80024cc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40012c00 	.word	0x40012c00
 80025c0:	40000400 	.word	0x40000400
 80025c4:	40014000 	.word	0x40014000
 80025c8:	40014400 	.word	0x40014400
 80025cc:	40014800 	.word	0x40014800

080025d0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025e6:	d045      	beq.n	8002674 <LL_TIM_OC_Init+0xa4>
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025ee:	d848      	bhi.n	8002682 <LL_TIM_OC_Init+0xb2>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f6:	d036      	beq.n	8002666 <LL_TIM_OC_Init+0x96>
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fe:	d840      	bhi.n	8002682 <LL_TIM_OC_Init+0xb2>
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002606:	d027      	beq.n	8002658 <LL_TIM_OC_Init+0x88>
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260e:	d838      	bhi.n	8002682 <LL_TIM_OC_Init+0xb2>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002616:	d018      	beq.n	800264a <LL_TIM_OC_Init+0x7a>
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800261e:	d830      	bhi.n	8002682 <LL_TIM_OC_Init+0xb2>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d003      	beq.n	800262e <LL_TIM_OC_Init+0x5e>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b10      	cmp	r3, #16
 800262a:	d007      	beq.n	800263c <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 800262c:	e029      	b.n	8002682 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f82d 	bl	8002690 <OC1Config>
 8002636:	4603      	mov	r3, r0
 8002638:	75fb      	strb	r3, [r7, #23]
      break;
 800263a:	e023      	b.n	8002684 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f8a0 	bl	8002784 <OC2Config>
 8002644:	4603      	mov	r3, r0
 8002646:	75fb      	strb	r3, [r7, #23]
      break;
 8002648:	e01c      	b.n	8002684 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f917 	bl	8002880 <OC3Config>
 8002652:	4603      	mov	r3, r0
 8002654:	75fb      	strb	r3, [r7, #23]
      break;
 8002656:	e015      	b.n	8002684 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 f98e 	bl	800297c <OC4Config>
 8002660:	4603      	mov	r3, r0
 8002662:	75fb      	strb	r3, [r7, #23]
      break;
 8002664:	e00e      	b.n	8002684 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f9ed 	bl	8002a48 <OC5Config>
 800266e:	4603      	mov	r3, r0
 8002670:	75fb      	strb	r3, [r7, #23]
      break;
 8002672:	e007      	b.n	8002684 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fa44 	bl	8002b04 <OC6Config>
 800267c:	4603      	mov	r3, r0
 800267e:	75fb      	strb	r3, [r7, #23]
      break;
 8002680:	e000      	b.n	8002684 <LL_TIM_OC_Init+0xb4>
      break;
 8002682:	bf00      	nop
  }

  return result;
 8002684:	7dfb      	ldrb	r3, [r7, #23]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	f023 0201 	bic.w	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f023 0303 	bic.w	r3, r3, #3
 80026be:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f023 0202 	bic.w	r2, r3, #2
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f023 0201 	bic.w	r2, r3, #1
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a20      	ldr	r2, [pc, #128]	; (8002774 <OC1Config+0xe4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00b      	beq.n	800270e <OC1Config+0x7e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a1f      	ldr	r2, [pc, #124]	; (8002778 <OC1Config+0xe8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d007      	beq.n	800270e <OC1Config+0x7e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a1e      	ldr	r2, [pc, #120]	; (800277c <OC1Config+0xec>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d003      	beq.n	800270e <OC1Config+0x7e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <OC1Config+0xf0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d11e      	bne.n	800274c <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f023 0208 	bic.w	r2, r3, #8
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4313      	orrs	r3, r2
 800271c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f023 0204 	bic.w	r2, r3, #4
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4313      	orrs	r3, r2
 800272c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4619      	mov	r1, r3
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff fe5e 	bl	8002420 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40012c00 	.word	0x40012c00
 8002778:	40014000 	.word	0x40014000
 800277c:	40014400 	.word	0x40014400
 8002780:	40014800 	.word	0x40014800

08002784 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f023 0210 	bic.w	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	0212      	lsls	r2, r2, #8
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f023 0220 	bic.w	r2, r3, #32
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	4313      	orrs	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f023 0210 	bic.w	r2, r3, #16
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a21      	ldr	r2, [pc, #132]	; (8002870 <OC2Config+0xec>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00b      	beq.n	8002808 <OC2Config+0x84>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a20      	ldr	r2, [pc, #128]	; (8002874 <OC2Config+0xf0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d007      	beq.n	8002808 <OC2Config+0x84>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <OC2Config+0xf4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d003      	beq.n	8002808 <OC2Config+0x84>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a1e      	ldr	r2, [pc, #120]	; (800287c <OC2Config+0xf8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d11f      	bne.n	8002848 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	019b      	lsls	r3, r3, #6
 8002814:	4313      	orrs	r3, r2
 8002816:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	019b      	lsls	r3, r3, #6
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4619      	mov	r1, r3
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff fdee 	bl	800243c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40012c00 	.word	0x40012c00
 8002874:	40014000 	.word	0x40014000
 8002878:	40014400 	.word	0x40014400
 800287c:	40014800 	.word	0x40014800

08002880 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 0303 	bic.w	r3, r3, #3
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a21      	ldr	r2, [pc, #132]	; (800296c <OC3Config+0xec>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00b      	beq.n	8002902 <OC3Config+0x82>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a20      	ldr	r2, [pc, #128]	; (8002970 <OC3Config+0xf0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d007      	beq.n	8002902 <OC3Config+0x82>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a1f      	ldr	r2, [pc, #124]	; (8002974 <OC3Config+0xf4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d003      	beq.n	8002902 <OC3Config+0x82>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a1e      	ldr	r2, [pc, #120]	; (8002978 <OC3Config+0xf8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d11f      	bne.n	8002942 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	029b      	lsls	r3, r3, #10
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	029b      	lsls	r3, r3, #10
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	015b      	lsls	r3, r3, #5
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	4619      	mov	r1, r3
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff fd7f 	bl	8002458 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40012c00 	.word	0x40012c00
 8002970:	40014000 	.word	0x40014000
 8002974:	40014400 	.word	0x40014400
 8002978:	40014800 	.word	0x40014800

0800297c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	0212      	lsls	r2, r2, #8
 80029bc:	4313      	orrs	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	031b      	lsls	r3, r3, #12
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	031b      	lsls	r3, r3, #12
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <OC4Config+0xbc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00b      	beq.n	8002a00 <OC4Config+0x84>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <OC4Config+0xc0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d007      	beq.n	8002a00 <OC4Config+0x84>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a13      	ldr	r2, [pc, #76]	; (8002a40 <OC4Config+0xc4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d003      	beq.n	8002a00 <OC4Config+0x84>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <OC4Config+0xc8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d107      	bne.n	8002a10 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	019b      	lsls	r3, r3, #6
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4619      	mov	r1, r3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff fd26 	bl	8002474 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40012c00 	.word	0x40012c00
 8002a3c:	40014000 	.word	0x40014000
 8002a40:	40014400 	.word	0x40014400
 8002a44:	40014800 	.word	0x40014800

08002a48 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	041b      	lsls	r3, r3, #16
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	041b      	lsls	r3, r3, #16
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a15      	ldr	r2, [pc, #84]	; (8002af4 <OC5Config+0xac>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00b      	beq.n	8002abc <OC5Config+0x74>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <OC5Config+0xb0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d007      	beq.n	8002abc <OC5Config+0x74>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a13      	ldr	r2, [pc, #76]	; (8002afc <OC5Config+0xb4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d003      	beq.n	8002abc <OC5Config+0x74>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <OC5Config+0xb8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d109      	bne.n	8002ad0 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	4619      	mov	r1, r3
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fcd7 	bl	8002490 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40012c00 	.word	0x40012c00
 8002af8:	40014000 	.word	0x40014000
 8002afc:	40014400 	.word	0x40014400
 8002b00:	40014800 	.word	0x40014800

08002b04 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	0212      	lsls	r2, r2, #8
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	051b      	lsls	r3, r3, #20
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	051b      	lsls	r3, r3, #20
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <OC6Config+0xac>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00b      	beq.n	8002b7a <OC6Config+0x76>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <OC6Config+0xb0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <OC6Config+0x76>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <OC6Config+0xb4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d003      	beq.n	8002b7a <OC6Config+0x76>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a11      	ldr	r2, [pc, #68]	; (8002bbc <OC6Config+0xb8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d109      	bne.n	8002b8e <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	029b      	lsls	r3, r3, #10
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff fc88 	bl	80024b0 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40014000 	.word	0x40014000
 8002bb8:	40014400 	.word	0x40014400
 8002bbc:	40014800 	.word	0x40014800

08002bc0 <LL_USART_IsEnabled>:
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <LL_USART_IsEnabled+0x18>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <LL_USART_IsEnabled+0x1a>
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_USART_SetStopBitsLength>:
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	605a      	str	r2, [r3, #4]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_USART_SetHWFlowCtrl>:
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	609a      	str	r2, [r3, #8]
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_USART_SetBaudRate>:
{
 8002c32:	b480      	push	{r7}
 8002c34:	b087      	sub	sp, #28
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c46:	d11a      	bne.n	8002c7e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	005a      	lsls	r2, r3, #1
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	441a      	add	r2, r3
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	60da      	str	r2, [r3, #12]
}
 8002c7c:	e00a      	b.n	8002c94 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	085a      	lsrs	r2, r3, #1
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	441a      	add	r2, r3
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	60da      	str	r2, [r3, #12]
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff ff84 	bl	8002bc0 <LL_USART_IsEnabled>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d14e      	bne.n	8002d5c <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <LL_USART_Init+0xc8>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	6851      	ldr	r1, [r2, #4]
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	68d2      	ldr	r2, [r2, #12]
 8002cce:	4311      	orrs	r1, r2
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	6912      	ldr	r2, [r2, #16]
 8002cd4:	4311      	orrs	r1, r2
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	6992      	ldr	r2, [r2, #24]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ff7c 	bl	8002be6 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ff89 	bl	8002c0c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a1b      	ldr	r2, [pc, #108]	; (8002d6c <LL_USART_Init+0xcc>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d104      	bne.n	8002d0c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7ff fa7c 	bl	8002200 <LL_RCC_GetUSARTClockFreq>
 8002d08:	61b8      	str	r0, [r7, #24]
 8002d0a:	e016      	b.n	8002d3a <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a18      	ldr	r2, [pc, #96]	; (8002d70 <LL_USART_Init+0xd0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d107      	bne.n	8002d24 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002d14:	f107 0308 	add.w	r3, r7, #8
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fa4b 	bl	80021b4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	e00a      	b.n	8002d3a <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a13      	ldr	r2, [pc, #76]	; (8002d74 <LL_USART_Init+0xd4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d106      	bne.n	8002d3a <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002d2c:	f107 0308 	add.w	r3, r7, #8
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fa3f 	bl	80021b4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00d      	beq.n	8002d5c <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d009      	beq.n	8002d5c <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	699a      	ldr	r2, [r3, #24]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69b9      	ldr	r1, [r7, #24]
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ff6b 	bl	8002c32 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002d5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3720      	adds	r7, #32
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	efff69f3 	.word	0xefff69f3
 8002d6c:	40013800 	.word	0x40013800
 8002d70:	40004400 	.word	0x40004400
 8002d74:	40004800 	.word	0x40004800

08002d78 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8a:	4a07      	ldr	r2, [pc, #28]	; (8002da8 <LL_InitTick+0x30>)
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <LL_InitTick+0x30>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d96:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <LL_InitTick+0x30>)
 8002d98:	2205      	movs	r2, #5
 8002d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000e010 	.word	0xe000e010

08002dac <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002db4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff ffdd 	bl	8002d78 <LL_InitTick>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <LL_mDelay+0x48>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002dd6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dde:	d00c      	beq.n	8002dfa <LL_mDelay+0x32>
  {
    Delay++;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3301      	adds	r3, #1
 8002de4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002de6:	e008      	b.n	8002dfa <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002de8:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <LL_mDelay+0x48>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <LL_mDelay+0x32>
    {
      Delay--;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f3      	bne.n	8002de8 <LL_mDelay+0x20>
    }
  }
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000e010 	.word	0xe000e010

08002e14 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002e1c:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <LL_SetSystemCoreClock+0x1c>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6013      	str	r3, [r2, #0]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000004 	.word	0x20000004

08002e34 <asiprintf>:
 8002e34:	b40e      	push	{r1, r2, r3}
 8002e36:	b530      	push	{r4, r5, lr}
 8002e38:	b09c      	sub	sp, #112	; 0x70
 8002e3a:	ab1f      	add	r3, sp, #124	; 0x7c
 8002e3c:	4605      	mov	r5, r0
 8002e3e:	490d      	ldr	r1, [pc, #52]	; (8002e74 <asiprintf+0x40>)
 8002e40:	480d      	ldr	r0, [pc, #52]	; (8002e78 <asiprintf+0x44>)
 8002e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e46:	6800      	ldr	r0, [r0, #0]
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	2400      	movs	r4, #0
 8002e4c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8002e50:	a902      	add	r1, sp, #8
 8002e52:	9402      	str	r4, [sp, #8]
 8002e54:	9404      	str	r4, [sp, #16]
 8002e56:	9407      	str	r4, [sp, #28]
 8002e58:	f000 f954 	bl	8003104 <_svfiprintf_r>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	bfa1      	itttt	ge
 8002e60:	9b02      	ldrge	r3, [sp, #8]
 8002e62:	701c      	strbge	r4, [r3, #0]
 8002e64:	9b06      	ldrge	r3, [sp, #24]
 8002e66:	602b      	strge	r3, [r5, #0]
 8002e68:	b01c      	add	sp, #112	; 0x70
 8002e6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e6e:	b003      	add	sp, #12
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	ffff0288 	.word	0xffff0288
 8002e78:	20000008 	.word	0x20000008

08002e7c <atoi>:
 8002e7c:	220a      	movs	r2, #10
 8002e7e:	2100      	movs	r1, #0
 8002e80:	f000 bc9a 	b.w	80037b8 <strtol>

08002e84 <__errno>:
 8002e84:	4b01      	ldr	r3, [pc, #4]	; (8002e8c <__errno+0x8>)
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000008 	.word	0x20000008

08002e90 <__libc_init_array>:
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	4d0d      	ldr	r5, [pc, #52]	; (8002ec8 <__libc_init_array+0x38>)
 8002e94:	4c0d      	ldr	r4, [pc, #52]	; (8002ecc <__libc_init_array+0x3c>)
 8002e96:	1b64      	subs	r4, r4, r5
 8002e98:	10a4      	asrs	r4, r4, #2
 8002e9a:	2600      	movs	r6, #0
 8002e9c:	42a6      	cmp	r6, r4
 8002e9e:	d109      	bne.n	8002eb4 <__libc_init_array+0x24>
 8002ea0:	4d0b      	ldr	r5, [pc, #44]	; (8002ed0 <__libc_init_array+0x40>)
 8002ea2:	4c0c      	ldr	r4, [pc, #48]	; (8002ed4 <__libc_init_array+0x44>)
 8002ea4:	f000 fcf6 	bl	8003894 <_init>
 8002ea8:	1b64      	subs	r4, r4, r5
 8002eaa:	10a4      	asrs	r4, r4, #2
 8002eac:	2600      	movs	r6, #0
 8002eae:	42a6      	cmp	r6, r4
 8002eb0:	d105      	bne.n	8002ebe <__libc_init_array+0x2e>
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb8:	4798      	blx	r3
 8002eba:	3601      	adds	r6, #1
 8002ebc:	e7ee      	b.n	8002e9c <__libc_init_array+0xc>
 8002ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec2:	4798      	blx	r3
 8002ec4:	3601      	adds	r6, #1
 8002ec6:	e7f2      	b.n	8002eae <__libc_init_array+0x1e>
 8002ec8:	08003ac0 	.word	0x08003ac0
 8002ecc:	08003ac0 	.word	0x08003ac0
 8002ed0:	08003ac0 	.word	0x08003ac0
 8002ed4:	08003ac4 	.word	0x08003ac4

08002ed8 <free>:
 8002ed8:	4b02      	ldr	r3, [pc, #8]	; (8002ee4 <free+0xc>)
 8002eda:	4601      	mov	r1, r0
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	f000 b80b 	b.w	8002ef8 <_free_r>
 8002ee2:	bf00      	nop
 8002ee4:	20000008 	.word	0x20000008

08002ee8 <memset>:
 8002ee8:	4402      	add	r2, r0
 8002eea:	4603      	mov	r3, r0
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d100      	bne.n	8002ef2 <memset+0xa>
 8002ef0:	4770      	bx	lr
 8002ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ef6:	e7f9      	b.n	8002eec <memset+0x4>

08002ef8 <_free_r>:
 8002ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002efa:	2900      	cmp	r1, #0
 8002efc:	d048      	beq.n	8002f90 <_free_r+0x98>
 8002efe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f02:	9001      	str	r0, [sp, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f1a1 0404 	sub.w	r4, r1, #4
 8002f0a:	bfb8      	it	lt
 8002f0c:	18e4      	addlt	r4, r4, r3
 8002f0e:	f000 fc85 	bl	800381c <__malloc_lock>
 8002f12:	4a20      	ldr	r2, [pc, #128]	; (8002f94 <_free_r+0x9c>)
 8002f14:	9801      	ldr	r0, [sp, #4]
 8002f16:	6813      	ldr	r3, [r2, #0]
 8002f18:	4615      	mov	r5, r2
 8002f1a:	b933      	cbnz	r3, 8002f2a <_free_r+0x32>
 8002f1c:	6063      	str	r3, [r4, #4]
 8002f1e:	6014      	str	r4, [r2, #0]
 8002f20:	b003      	add	sp, #12
 8002f22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f26:	f000 bc7f 	b.w	8003828 <__malloc_unlock>
 8002f2a:	42a3      	cmp	r3, r4
 8002f2c:	d90b      	bls.n	8002f46 <_free_r+0x4e>
 8002f2e:	6821      	ldr	r1, [r4, #0]
 8002f30:	1862      	adds	r2, r4, r1
 8002f32:	4293      	cmp	r3, r2
 8002f34:	bf04      	itt	eq
 8002f36:	681a      	ldreq	r2, [r3, #0]
 8002f38:	685b      	ldreq	r3, [r3, #4]
 8002f3a:	6063      	str	r3, [r4, #4]
 8002f3c:	bf04      	itt	eq
 8002f3e:	1852      	addeq	r2, r2, r1
 8002f40:	6022      	streq	r2, [r4, #0]
 8002f42:	602c      	str	r4, [r5, #0]
 8002f44:	e7ec      	b.n	8002f20 <_free_r+0x28>
 8002f46:	461a      	mov	r2, r3
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	b10b      	cbz	r3, 8002f50 <_free_r+0x58>
 8002f4c:	42a3      	cmp	r3, r4
 8002f4e:	d9fa      	bls.n	8002f46 <_free_r+0x4e>
 8002f50:	6811      	ldr	r1, [r2, #0]
 8002f52:	1855      	adds	r5, r2, r1
 8002f54:	42a5      	cmp	r5, r4
 8002f56:	d10b      	bne.n	8002f70 <_free_r+0x78>
 8002f58:	6824      	ldr	r4, [r4, #0]
 8002f5a:	4421      	add	r1, r4
 8002f5c:	1854      	adds	r4, r2, r1
 8002f5e:	42a3      	cmp	r3, r4
 8002f60:	6011      	str	r1, [r2, #0]
 8002f62:	d1dd      	bne.n	8002f20 <_free_r+0x28>
 8002f64:	681c      	ldr	r4, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	6053      	str	r3, [r2, #4]
 8002f6a:	4421      	add	r1, r4
 8002f6c:	6011      	str	r1, [r2, #0]
 8002f6e:	e7d7      	b.n	8002f20 <_free_r+0x28>
 8002f70:	d902      	bls.n	8002f78 <_free_r+0x80>
 8002f72:	230c      	movs	r3, #12
 8002f74:	6003      	str	r3, [r0, #0]
 8002f76:	e7d3      	b.n	8002f20 <_free_r+0x28>
 8002f78:	6825      	ldr	r5, [r4, #0]
 8002f7a:	1961      	adds	r1, r4, r5
 8002f7c:	428b      	cmp	r3, r1
 8002f7e:	bf04      	itt	eq
 8002f80:	6819      	ldreq	r1, [r3, #0]
 8002f82:	685b      	ldreq	r3, [r3, #4]
 8002f84:	6063      	str	r3, [r4, #4]
 8002f86:	bf04      	itt	eq
 8002f88:	1949      	addeq	r1, r1, r5
 8002f8a:	6021      	streq	r1, [r4, #0]
 8002f8c:	6054      	str	r4, [r2, #4]
 8002f8e:	e7c7      	b.n	8002f20 <_free_r+0x28>
 8002f90:	b003      	add	sp, #12
 8002f92:	bd30      	pop	{r4, r5, pc}
 8002f94:	20000098 	.word	0x20000098

08002f98 <_malloc_r>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	1ccd      	adds	r5, r1, #3
 8002f9c:	f025 0503 	bic.w	r5, r5, #3
 8002fa0:	3508      	adds	r5, #8
 8002fa2:	2d0c      	cmp	r5, #12
 8002fa4:	bf38      	it	cc
 8002fa6:	250c      	movcc	r5, #12
 8002fa8:	2d00      	cmp	r5, #0
 8002faa:	4606      	mov	r6, r0
 8002fac:	db01      	blt.n	8002fb2 <_malloc_r+0x1a>
 8002fae:	42a9      	cmp	r1, r5
 8002fb0:	d903      	bls.n	8002fba <_malloc_r+0x22>
 8002fb2:	230c      	movs	r3, #12
 8002fb4:	6033      	str	r3, [r6, #0]
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fba:	f000 fc2f 	bl	800381c <__malloc_lock>
 8002fbe:	4921      	ldr	r1, [pc, #132]	; (8003044 <_malloc_r+0xac>)
 8002fc0:	680a      	ldr	r2, [r1, #0]
 8002fc2:	4614      	mov	r4, r2
 8002fc4:	b99c      	cbnz	r4, 8002fee <_malloc_r+0x56>
 8002fc6:	4f20      	ldr	r7, [pc, #128]	; (8003048 <_malloc_r+0xb0>)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	b923      	cbnz	r3, 8002fd6 <_malloc_r+0x3e>
 8002fcc:	4621      	mov	r1, r4
 8002fce:	4630      	mov	r0, r6
 8002fd0:	f000 fb2c 	bl	800362c <_sbrk_r>
 8002fd4:	6038      	str	r0, [r7, #0]
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	4630      	mov	r0, r6
 8002fda:	f000 fb27 	bl	800362c <_sbrk_r>
 8002fde:	1c43      	adds	r3, r0, #1
 8002fe0:	d123      	bne.n	800302a <_malloc_r+0x92>
 8002fe2:	230c      	movs	r3, #12
 8002fe4:	6033      	str	r3, [r6, #0]
 8002fe6:	4630      	mov	r0, r6
 8002fe8:	f000 fc1e 	bl	8003828 <__malloc_unlock>
 8002fec:	e7e3      	b.n	8002fb6 <_malloc_r+0x1e>
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	1b5b      	subs	r3, r3, r5
 8002ff2:	d417      	bmi.n	8003024 <_malloc_r+0x8c>
 8002ff4:	2b0b      	cmp	r3, #11
 8002ff6:	d903      	bls.n	8003000 <_malloc_r+0x68>
 8002ff8:	6023      	str	r3, [r4, #0]
 8002ffa:	441c      	add	r4, r3
 8002ffc:	6025      	str	r5, [r4, #0]
 8002ffe:	e004      	b.n	800300a <_malloc_r+0x72>
 8003000:	6863      	ldr	r3, [r4, #4]
 8003002:	42a2      	cmp	r2, r4
 8003004:	bf0c      	ite	eq
 8003006:	600b      	streq	r3, [r1, #0]
 8003008:	6053      	strne	r3, [r2, #4]
 800300a:	4630      	mov	r0, r6
 800300c:	f000 fc0c 	bl	8003828 <__malloc_unlock>
 8003010:	f104 000b 	add.w	r0, r4, #11
 8003014:	1d23      	adds	r3, r4, #4
 8003016:	f020 0007 	bic.w	r0, r0, #7
 800301a:	1ac2      	subs	r2, r0, r3
 800301c:	d0cc      	beq.n	8002fb8 <_malloc_r+0x20>
 800301e:	1a1b      	subs	r3, r3, r0
 8003020:	50a3      	str	r3, [r4, r2]
 8003022:	e7c9      	b.n	8002fb8 <_malloc_r+0x20>
 8003024:	4622      	mov	r2, r4
 8003026:	6864      	ldr	r4, [r4, #4]
 8003028:	e7cc      	b.n	8002fc4 <_malloc_r+0x2c>
 800302a:	1cc4      	adds	r4, r0, #3
 800302c:	f024 0403 	bic.w	r4, r4, #3
 8003030:	42a0      	cmp	r0, r4
 8003032:	d0e3      	beq.n	8002ffc <_malloc_r+0x64>
 8003034:	1a21      	subs	r1, r4, r0
 8003036:	4630      	mov	r0, r6
 8003038:	f000 faf8 	bl	800362c <_sbrk_r>
 800303c:	3001      	adds	r0, #1
 800303e:	d1dd      	bne.n	8002ffc <_malloc_r+0x64>
 8003040:	e7cf      	b.n	8002fe2 <_malloc_r+0x4a>
 8003042:	bf00      	nop
 8003044:	20000098 	.word	0x20000098
 8003048:	2000009c 	.word	0x2000009c

0800304c <__ssputs_r>:
 800304c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003050:	688e      	ldr	r6, [r1, #8]
 8003052:	429e      	cmp	r6, r3
 8003054:	4682      	mov	sl, r0
 8003056:	460c      	mov	r4, r1
 8003058:	4690      	mov	r8, r2
 800305a:	461f      	mov	r7, r3
 800305c:	d838      	bhi.n	80030d0 <__ssputs_r+0x84>
 800305e:	898a      	ldrh	r2, [r1, #12]
 8003060:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003064:	d032      	beq.n	80030cc <__ssputs_r+0x80>
 8003066:	6825      	ldr	r5, [r4, #0]
 8003068:	6909      	ldr	r1, [r1, #16]
 800306a:	eba5 0901 	sub.w	r9, r5, r1
 800306e:	6965      	ldr	r5, [r4, #20]
 8003070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003074:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003078:	3301      	adds	r3, #1
 800307a:	444b      	add	r3, r9
 800307c:	106d      	asrs	r5, r5, #1
 800307e:	429d      	cmp	r5, r3
 8003080:	bf38      	it	cc
 8003082:	461d      	movcc	r5, r3
 8003084:	0553      	lsls	r3, r2, #21
 8003086:	d531      	bpl.n	80030ec <__ssputs_r+0xa0>
 8003088:	4629      	mov	r1, r5
 800308a:	f7ff ff85 	bl	8002f98 <_malloc_r>
 800308e:	4606      	mov	r6, r0
 8003090:	b950      	cbnz	r0, 80030a8 <__ssputs_r+0x5c>
 8003092:	230c      	movs	r3, #12
 8003094:	f8ca 3000 	str.w	r3, [sl]
 8003098:	89a3      	ldrh	r3, [r4, #12]
 800309a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800309e:	81a3      	strh	r3, [r4, #12]
 80030a0:	f04f 30ff 	mov.w	r0, #4294967295
 80030a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a8:	6921      	ldr	r1, [r4, #16]
 80030aa:	464a      	mov	r2, r9
 80030ac:	f000 fb8e 	bl	80037cc <memcpy>
 80030b0:	89a3      	ldrh	r3, [r4, #12]
 80030b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ba:	81a3      	strh	r3, [r4, #12]
 80030bc:	6126      	str	r6, [r4, #16]
 80030be:	6165      	str	r5, [r4, #20]
 80030c0:	444e      	add	r6, r9
 80030c2:	eba5 0509 	sub.w	r5, r5, r9
 80030c6:	6026      	str	r6, [r4, #0]
 80030c8:	60a5      	str	r5, [r4, #8]
 80030ca:	463e      	mov	r6, r7
 80030cc:	42be      	cmp	r6, r7
 80030ce:	d900      	bls.n	80030d2 <__ssputs_r+0x86>
 80030d0:	463e      	mov	r6, r7
 80030d2:	4632      	mov	r2, r6
 80030d4:	6820      	ldr	r0, [r4, #0]
 80030d6:	4641      	mov	r1, r8
 80030d8:	f000 fb86 	bl	80037e8 <memmove>
 80030dc:	68a3      	ldr	r3, [r4, #8]
 80030de:	6822      	ldr	r2, [r4, #0]
 80030e0:	1b9b      	subs	r3, r3, r6
 80030e2:	4432      	add	r2, r6
 80030e4:	60a3      	str	r3, [r4, #8]
 80030e6:	6022      	str	r2, [r4, #0]
 80030e8:	2000      	movs	r0, #0
 80030ea:	e7db      	b.n	80030a4 <__ssputs_r+0x58>
 80030ec:	462a      	mov	r2, r5
 80030ee:	f000 fba1 	bl	8003834 <_realloc_r>
 80030f2:	4606      	mov	r6, r0
 80030f4:	2800      	cmp	r0, #0
 80030f6:	d1e1      	bne.n	80030bc <__ssputs_r+0x70>
 80030f8:	6921      	ldr	r1, [r4, #16]
 80030fa:	4650      	mov	r0, sl
 80030fc:	f7ff fefc 	bl	8002ef8 <_free_r>
 8003100:	e7c7      	b.n	8003092 <__ssputs_r+0x46>
	...

08003104 <_svfiprintf_r>:
 8003104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003108:	4698      	mov	r8, r3
 800310a:	898b      	ldrh	r3, [r1, #12]
 800310c:	061b      	lsls	r3, r3, #24
 800310e:	b09d      	sub	sp, #116	; 0x74
 8003110:	4607      	mov	r7, r0
 8003112:	460d      	mov	r5, r1
 8003114:	4614      	mov	r4, r2
 8003116:	d50e      	bpl.n	8003136 <_svfiprintf_r+0x32>
 8003118:	690b      	ldr	r3, [r1, #16]
 800311a:	b963      	cbnz	r3, 8003136 <_svfiprintf_r+0x32>
 800311c:	2140      	movs	r1, #64	; 0x40
 800311e:	f7ff ff3b 	bl	8002f98 <_malloc_r>
 8003122:	6028      	str	r0, [r5, #0]
 8003124:	6128      	str	r0, [r5, #16]
 8003126:	b920      	cbnz	r0, 8003132 <_svfiprintf_r+0x2e>
 8003128:	230c      	movs	r3, #12
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	f04f 30ff 	mov.w	r0, #4294967295
 8003130:	e0d1      	b.n	80032d6 <_svfiprintf_r+0x1d2>
 8003132:	2340      	movs	r3, #64	; 0x40
 8003134:	616b      	str	r3, [r5, #20]
 8003136:	2300      	movs	r3, #0
 8003138:	9309      	str	r3, [sp, #36]	; 0x24
 800313a:	2320      	movs	r3, #32
 800313c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003140:	f8cd 800c 	str.w	r8, [sp, #12]
 8003144:	2330      	movs	r3, #48	; 0x30
 8003146:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80032f0 <_svfiprintf_r+0x1ec>
 800314a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800314e:	f04f 0901 	mov.w	r9, #1
 8003152:	4623      	mov	r3, r4
 8003154:	469a      	mov	sl, r3
 8003156:	f813 2b01 	ldrb.w	r2, [r3], #1
 800315a:	b10a      	cbz	r2, 8003160 <_svfiprintf_r+0x5c>
 800315c:	2a25      	cmp	r2, #37	; 0x25
 800315e:	d1f9      	bne.n	8003154 <_svfiprintf_r+0x50>
 8003160:	ebba 0b04 	subs.w	fp, sl, r4
 8003164:	d00b      	beq.n	800317e <_svfiprintf_r+0x7a>
 8003166:	465b      	mov	r3, fp
 8003168:	4622      	mov	r2, r4
 800316a:	4629      	mov	r1, r5
 800316c:	4638      	mov	r0, r7
 800316e:	f7ff ff6d 	bl	800304c <__ssputs_r>
 8003172:	3001      	adds	r0, #1
 8003174:	f000 80aa 	beq.w	80032cc <_svfiprintf_r+0x1c8>
 8003178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800317a:	445a      	add	r2, fp
 800317c:	9209      	str	r2, [sp, #36]	; 0x24
 800317e:	f89a 3000 	ldrb.w	r3, [sl]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 80a2 	beq.w	80032cc <_svfiprintf_r+0x1c8>
 8003188:	2300      	movs	r3, #0
 800318a:	f04f 32ff 	mov.w	r2, #4294967295
 800318e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003192:	f10a 0a01 	add.w	sl, sl, #1
 8003196:	9304      	str	r3, [sp, #16]
 8003198:	9307      	str	r3, [sp, #28]
 800319a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800319e:	931a      	str	r3, [sp, #104]	; 0x68
 80031a0:	4654      	mov	r4, sl
 80031a2:	2205      	movs	r2, #5
 80031a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031a8:	4851      	ldr	r0, [pc, #324]	; (80032f0 <_svfiprintf_r+0x1ec>)
 80031aa:	f7fd f811 	bl	80001d0 <memchr>
 80031ae:	9a04      	ldr	r2, [sp, #16]
 80031b0:	b9d8      	cbnz	r0, 80031ea <_svfiprintf_r+0xe6>
 80031b2:	06d0      	lsls	r0, r2, #27
 80031b4:	bf44      	itt	mi
 80031b6:	2320      	movmi	r3, #32
 80031b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031bc:	0711      	lsls	r1, r2, #28
 80031be:	bf44      	itt	mi
 80031c0:	232b      	movmi	r3, #43	; 0x2b
 80031c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031c6:	f89a 3000 	ldrb.w	r3, [sl]
 80031ca:	2b2a      	cmp	r3, #42	; 0x2a
 80031cc:	d015      	beq.n	80031fa <_svfiprintf_r+0xf6>
 80031ce:	9a07      	ldr	r2, [sp, #28]
 80031d0:	4654      	mov	r4, sl
 80031d2:	2000      	movs	r0, #0
 80031d4:	f04f 0c0a 	mov.w	ip, #10
 80031d8:	4621      	mov	r1, r4
 80031da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031de:	3b30      	subs	r3, #48	; 0x30
 80031e0:	2b09      	cmp	r3, #9
 80031e2:	d94e      	bls.n	8003282 <_svfiprintf_r+0x17e>
 80031e4:	b1b0      	cbz	r0, 8003214 <_svfiprintf_r+0x110>
 80031e6:	9207      	str	r2, [sp, #28]
 80031e8:	e014      	b.n	8003214 <_svfiprintf_r+0x110>
 80031ea:	eba0 0308 	sub.w	r3, r0, r8
 80031ee:	fa09 f303 	lsl.w	r3, r9, r3
 80031f2:	4313      	orrs	r3, r2
 80031f4:	9304      	str	r3, [sp, #16]
 80031f6:	46a2      	mov	sl, r4
 80031f8:	e7d2      	b.n	80031a0 <_svfiprintf_r+0x9c>
 80031fa:	9b03      	ldr	r3, [sp, #12]
 80031fc:	1d19      	adds	r1, r3, #4
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	9103      	str	r1, [sp, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	bfbb      	ittet	lt
 8003206:	425b      	neglt	r3, r3
 8003208:	f042 0202 	orrlt.w	r2, r2, #2
 800320c:	9307      	strge	r3, [sp, #28]
 800320e:	9307      	strlt	r3, [sp, #28]
 8003210:	bfb8      	it	lt
 8003212:	9204      	strlt	r2, [sp, #16]
 8003214:	7823      	ldrb	r3, [r4, #0]
 8003216:	2b2e      	cmp	r3, #46	; 0x2e
 8003218:	d10c      	bne.n	8003234 <_svfiprintf_r+0x130>
 800321a:	7863      	ldrb	r3, [r4, #1]
 800321c:	2b2a      	cmp	r3, #42	; 0x2a
 800321e:	d135      	bne.n	800328c <_svfiprintf_r+0x188>
 8003220:	9b03      	ldr	r3, [sp, #12]
 8003222:	1d1a      	adds	r2, r3, #4
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	9203      	str	r2, [sp, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	bfb8      	it	lt
 800322c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003230:	3402      	adds	r4, #2
 8003232:	9305      	str	r3, [sp, #20]
 8003234:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003300 <_svfiprintf_r+0x1fc>
 8003238:	7821      	ldrb	r1, [r4, #0]
 800323a:	2203      	movs	r2, #3
 800323c:	4650      	mov	r0, sl
 800323e:	f7fc ffc7 	bl	80001d0 <memchr>
 8003242:	b140      	cbz	r0, 8003256 <_svfiprintf_r+0x152>
 8003244:	2340      	movs	r3, #64	; 0x40
 8003246:	eba0 000a 	sub.w	r0, r0, sl
 800324a:	fa03 f000 	lsl.w	r0, r3, r0
 800324e:	9b04      	ldr	r3, [sp, #16]
 8003250:	4303      	orrs	r3, r0
 8003252:	3401      	adds	r4, #1
 8003254:	9304      	str	r3, [sp, #16]
 8003256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800325a:	4826      	ldr	r0, [pc, #152]	; (80032f4 <_svfiprintf_r+0x1f0>)
 800325c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003260:	2206      	movs	r2, #6
 8003262:	f7fc ffb5 	bl	80001d0 <memchr>
 8003266:	2800      	cmp	r0, #0
 8003268:	d038      	beq.n	80032dc <_svfiprintf_r+0x1d8>
 800326a:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <_svfiprintf_r+0x1f4>)
 800326c:	bb1b      	cbnz	r3, 80032b6 <_svfiprintf_r+0x1b2>
 800326e:	9b03      	ldr	r3, [sp, #12]
 8003270:	3307      	adds	r3, #7
 8003272:	f023 0307 	bic.w	r3, r3, #7
 8003276:	3308      	adds	r3, #8
 8003278:	9303      	str	r3, [sp, #12]
 800327a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800327c:	4433      	add	r3, r6
 800327e:	9309      	str	r3, [sp, #36]	; 0x24
 8003280:	e767      	b.n	8003152 <_svfiprintf_r+0x4e>
 8003282:	fb0c 3202 	mla	r2, ip, r2, r3
 8003286:	460c      	mov	r4, r1
 8003288:	2001      	movs	r0, #1
 800328a:	e7a5      	b.n	80031d8 <_svfiprintf_r+0xd4>
 800328c:	2300      	movs	r3, #0
 800328e:	3401      	adds	r4, #1
 8003290:	9305      	str	r3, [sp, #20]
 8003292:	4619      	mov	r1, r3
 8003294:	f04f 0c0a 	mov.w	ip, #10
 8003298:	4620      	mov	r0, r4
 800329a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800329e:	3a30      	subs	r2, #48	; 0x30
 80032a0:	2a09      	cmp	r2, #9
 80032a2:	d903      	bls.n	80032ac <_svfiprintf_r+0x1a8>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0c5      	beq.n	8003234 <_svfiprintf_r+0x130>
 80032a8:	9105      	str	r1, [sp, #20]
 80032aa:	e7c3      	b.n	8003234 <_svfiprintf_r+0x130>
 80032ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80032b0:	4604      	mov	r4, r0
 80032b2:	2301      	movs	r3, #1
 80032b4:	e7f0      	b.n	8003298 <_svfiprintf_r+0x194>
 80032b6:	ab03      	add	r3, sp, #12
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	462a      	mov	r2, r5
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <_svfiprintf_r+0x1f8>)
 80032be:	a904      	add	r1, sp, #16
 80032c0:	4638      	mov	r0, r7
 80032c2:	f3af 8000 	nop.w
 80032c6:	1c42      	adds	r2, r0, #1
 80032c8:	4606      	mov	r6, r0
 80032ca:	d1d6      	bne.n	800327a <_svfiprintf_r+0x176>
 80032cc:	89ab      	ldrh	r3, [r5, #12]
 80032ce:	065b      	lsls	r3, r3, #25
 80032d0:	f53f af2c 	bmi.w	800312c <_svfiprintf_r+0x28>
 80032d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032d6:	b01d      	add	sp, #116	; 0x74
 80032d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032dc:	ab03      	add	r3, sp, #12
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	462a      	mov	r2, r5
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <_svfiprintf_r+0x1f8>)
 80032e4:	a904      	add	r1, sp, #16
 80032e6:	4638      	mov	r0, r7
 80032e8:	f000 f87a 	bl	80033e0 <_printf_i>
 80032ec:	e7eb      	b.n	80032c6 <_svfiprintf_r+0x1c2>
 80032ee:	bf00      	nop
 80032f0:	0800398b 	.word	0x0800398b
 80032f4:	08003995 	.word	0x08003995
 80032f8:	00000000 	.word	0x00000000
 80032fc:	0800304d 	.word	0x0800304d
 8003300:	08003991 	.word	0x08003991

08003304 <_printf_common>:
 8003304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003308:	4616      	mov	r6, r2
 800330a:	4699      	mov	r9, r3
 800330c:	688a      	ldr	r2, [r1, #8]
 800330e:	690b      	ldr	r3, [r1, #16]
 8003310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003314:	4293      	cmp	r3, r2
 8003316:	bfb8      	it	lt
 8003318:	4613      	movlt	r3, r2
 800331a:	6033      	str	r3, [r6, #0]
 800331c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003320:	4607      	mov	r7, r0
 8003322:	460c      	mov	r4, r1
 8003324:	b10a      	cbz	r2, 800332a <_printf_common+0x26>
 8003326:	3301      	adds	r3, #1
 8003328:	6033      	str	r3, [r6, #0]
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	0699      	lsls	r1, r3, #26
 800332e:	bf42      	ittt	mi
 8003330:	6833      	ldrmi	r3, [r6, #0]
 8003332:	3302      	addmi	r3, #2
 8003334:	6033      	strmi	r3, [r6, #0]
 8003336:	6825      	ldr	r5, [r4, #0]
 8003338:	f015 0506 	ands.w	r5, r5, #6
 800333c:	d106      	bne.n	800334c <_printf_common+0x48>
 800333e:	f104 0a19 	add.w	sl, r4, #25
 8003342:	68e3      	ldr	r3, [r4, #12]
 8003344:	6832      	ldr	r2, [r6, #0]
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	42ab      	cmp	r3, r5
 800334a:	dc26      	bgt.n	800339a <_printf_common+0x96>
 800334c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003350:	1e13      	subs	r3, r2, #0
 8003352:	6822      	ldr	r2, [r4, #0]
 8003354:	bf18      	it	ne
 8003356:	2301      	movne	r3, #1
 8003358:	0692      	lsls	r2, r2, #26
 800335a:	d42b      	bmi.n	80033b4 <_printf_common+0xb0>
 800335c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003360:	4649      	mov	r1, r9
 8003362:	4638      	mov	r0, r7
 8003364:	47c0      	blx	r8
 8003366:	3001      	adds	r0, #1
 8003368:	d01e      	beq.n	80033a8 <_printf_common+0xa4>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	68e5      	ldr	r5, [r4, #12]
 800336e:	6832      	ldr	r2, [r6, #0]
 8003370:	f003 0306 	and.w	r3, r3, #6
 8003374:	2b04      	cmp	r3, #4
 8003376:	bf08      	it	eq
 8003378:	1aad      	subeq	r5, r5, r2
 800337a:	68a3      	ldr	r3, [r4, #8]
 800337c:	6922      	ldr	r2, [r4, #16]
 800337e:	bf0c      	ite	eq
 8003380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003384:	2500      	movne	r5, #0
 8003386:	4293      	cmp	r3, r2
 8003388:	bfc4      	itt	gt
 800338a:	1a9b      	subgt	r3, r3, r2
 800338c:	18ed      	addgt	r5, r5, r3
 800338e:	2600      	movs	r6, #0
 8003390:	341a      	adds	r4, #26
 8003392:	42b5      	cmp	r5, r6
 8003394:	d11a      	bne.n	80033cc <_printf_common+0xc8>
 8003396:	2000      	movs	r0, #0
 8003398:	e008      	b.n	80033ac <_printf_common+0xa8>
 800339a:	2301      	movs	r3, #1
 800339c:	4652      	mov	r2, sl
 800339e:	4649      	mov	r1, r9
 80033a0:	4638      	mov	r0, r7
 80033a2:	47c0      	blx	r8
 80033a4:	3001      	adds	r0, #1
 80033a6:	d103      	bne.n	80033b0 <_printf_common+0xac>
 80033a8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033b0:	3501      	adds	r5, #1
 80033b2:	e7c6      	b.n	8003342 <_printf_common+0x3e>
 80033b4:	18e1      	adds	r1, r4, r3
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	2030      	movs	r0, #48	; 0x30
 80033ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033be:	4422      	add	r2, r4
 80033c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033c8:	3302      	adds	r3, #2
 80033ca:	e7c7      	b.n	800335c <_printf_common+0x58>
 80033cc:	2301      	movs	r3, #1
 80033ce:	4622      	mov	r2, r4
 80033d0:	4649      	mov	r1, r9
 80033d2:	4638      	mov	r0, r7
 80033d4:	47c0      	blx	r8
 80033d6:	3001      	adds	r0, #1
 80033d8:	d0e6      	beq.n	80033a8 <_printf_common+0xa4>
 80033da:	3601      	adds	r6, #1
 80033dc:	e7d9      	b.n	8003392 <_printf_common+0x8e>
	...

080033e0 <_printf_i>:
 80033e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033e4:	460c      	mov	r4, r1
 80033e6:	4691      	mov	r9, r2
 80033e8:	7e27      	ldrb	r7, [r4, #24]
 80033ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80033ec:	2f78      	cmp	r7, #120	; 0x78
 80033ee:	4680      	mov	r8, r0
 80033f0:	469a      	mov	sl, r3
 80033f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033f6:	d807      	bhi.n	8003408 <_printf_i+0x28>
 80033f8:	2f62      	cmp	r7, #98	; 0x62
 80033fa:	d80a      	bhi.n	8003412 <_printf_i+0x32>
 80033fc:	2f00      	cmp	r7, #0
 80033fe:	f000 80d8 	beq.w	80035b2 <_printf_i+0x1d2>
 8003402:	2f58      	cmp	r7, #88	; 0x58
 8003404:	f000 80a3 	beq.w	800354e <_printf_i+0x16e>
 8003408:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800340c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003410:	e03a      	b.n	8003488 <_printf_i+0xa8>
 8003412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003416:	2b15      	cmp	r3, #21
 8003418:	d8f6      	bhi.n	8003408 <_printf_i+0x28>
 800341a:	a001      	add	r0, pc, #4	; (adr r0, 8003420 <_printf_i+0x40>)
 800341c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003420:	08003479 	.word	0x08003479
 8003424:	0800348d 	.word	0x0800348d
 8003428:	08003409 	.word	0x08003409
 800342c:	08003409 	.word	0x08003409
 8003430:	08003409 	.word	0x08003409
 8003434:	08003409 	.word	0x08003409
 8003438:	0800348d 	.word	0x0800348d
 800343c:	08003409 	.word	0x08003409
 8003440:	08003409 	.word	0x08003409
 8003444:	08003409 	.word	0x08003409
 8003448:	08003409 	.word	0x08003409
 800344c:	08003599 	.word	0x08003599
 8003450:	080034bd 	.word	0x080034bd
 8003454:	0800357b 	.word	0x0800357b
 8003458:	08003409 	.word	0x08003409
 800345c:	08003409 	.word	0x08003409
 8003460:	080035bb 	.word	0x080035bb
 8003464:	08003409 	.word	0x08003409
 8003468:	080034bd 	.word	0x080034bd
 800346c:	08003409 	.word	0x08003409
 8003470:	08003409 	.word	0x08003409
 8003474:	08003583 	.word	0x08003583
 8003478:	680b      	ldr	r3, [r1, #0]
 800347a:	1d1a      	adds	r2, r3, #4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	600a      	str	r2, [r1, #0]
 8003480:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003488:	2301      	movs	r3, #1
 800348a:	e0a3      	b.n	80035d4 <_printf_i+0x1f4>
 800348c:	6825      	ldr	r5, [r4, #0]
 800348e:	6808      	ldr	r0, [r1, #0]
 8003490:	062e      	lsls	r6, r5, #24
 8003492:	f100 0304 	add.w	r3, r0, #4
 8003496:	d50a      	bpl.n	80034ae <_printf_i+0xce>
 8003498:	6805      	ldr	r5, [r0, #0]
 800349a:	600b      	str	r3, [r1, #0]
 800349c:	2d00      	cmp	r5, #0
 800349e:	da03      	bge.n	80034a8 <_printf_i+0xc8>
 80034a0:	232d      	movs	r3, #45	; 0x2d
 80034a2:	426d      	negs	r5, r5
 80034a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034a8:	485e      	ldr	r0, [pc, #376]	; (8003624 <_printf_i+0x244>)
 80034aa:	230a      	movs	r3, #10
 80034ac:	e019      	b.n	80034e2 <_printf_i+0x102>
 80034ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80034b2:	6805      	ldr	r5, [r0, #0]
 80034b4:	600b      	str	r3, [r1, #0]
 80034b6:	bf18      	it	ne
 80034b8:	b22d      	sxthne	r5, r5
 80034ba:	e7ef      	b.n	800349c <_printf_i+0xbc>
 80034bc:	680b      	ldr	r3, [r1, #0]
 80034be:	6825      	ldr	r5, [r4, #0]
 80034c0:	1d18      	adds	r0, r3, #4
 80034c2:	6008      	str	r0, [r1, #0]
 80034c4:	0628      	lsls	r0, r5, #24
 80034c6:	d501      	bpl.n	80034cc <_printf_i+0xec>
 80034c8:	681d      	ldr	r5, [r3, #0]
 80034ca:	e002      	b.n	80034d2 <_printf_i+0xf2>
 80034cc:	0669      	lsls	r1, r5, #25
 80034ce:	d5fb      	bpl.n	80034c8 <_printf_i+0xe8>
 80034d0:	881d      	ldrh	r5, [r3, #0]
 80034d2:	4854      	ldr	r0, [pc, #336]	; (8003624 <_printf_i+0x244>)
 80034d4:	2f6f      	cmp	r7, #111	; 0x6f
 80034d6:	bf0c      	ite	eq
 80034d8:	2308      	moveq	r3, #8
 80034da:	230a      	movne	r3, #10
 80034dc:	2100      	movs	r1, #0
 80034de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034e2:	6866      	ldr	r6, [r4, #4]
 80034e4:	60a6      	str	r6, [r4, #8]
 80034e6:	2e00      	cmp	r6, #0
 80034e8:	bfa2      	ittt	ge
 80034ea:	6821      	ldrge	r1, [r4, #0]
 80034ec:	f021 0104 	bicge.w	r1, r1, #4
 80034f0:	6021      	strge	r1, [r4, #0]
 80034f2:	b90d      	cbnz	r5, 80034f8 <_printf_i+0x118>
 80034f4:	2e00      	cmp	r6, #0
 80034f6:	d04d      	beq.n	8003594 <_printf_i+0x1b4>
 80034f8:	4616      	mov	r6, r2
 80034fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80034fe:	fb03 5711 	mls	r7, r3, r1, r5
 8003502:	5dc7      	ldrb	r7, [r0, r7]
 8003504:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003508:	462f      	mov	r7, r5
 800350a:	42bb      	cmp	r3, r7
 800350c:	460d      	mov	r5, r1
 800350e:	d9f4      	bls.n	80034fa <_printf_i+0x11a>
 8003510:	2b08      	cmp	r3, #8
 8003512:	d10b      	bne.n	800352c <_printf_i+0x14c>
 8003514:	6823      	ldr	r3, [r4, #0]
 8003516:	07df      	lsls	r7, r3, #31
 8003518:	d508      	bpl.n	800352c <_printf_i+0x14c>
 800351a:	6923      	ldr	r3, [r4, #16]
 800351c:	6861      	ldr	r1, [r4, #4]
 800351e:	4299      	cmp	r1, r3
 8003520:	bfde      	ittt	le
 8003522:	2330      	movle	r3, #48	; 0x30
 8003524:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003528:	f106 36ff 	addle.w	r6, r6, #4294967295
 800352c:	1b92      	subs	r2, r2, r6
 800352e:	6122      	str	r2, [r4, #16]
 8003530:	f8cd a000 	str.w	sl, [sp]
 8003534:	464b      	mov	r3, r9
 8003536:	aa03      	add	r2, sp, #12
 8003538:	4621      	mov	r1, r4
 800353a:	4640      	mov	r0, r8
 800353c:	f7ff fee2 	bl	8003304 <_printf_common>
 8003540:	3001      	adds	r0, #1
 8003542:	d14c      	bne.n	80035de <_printf_i+0x1fe>
 8003544:	f04f 30ff 	mov.w	r0, #4294967295
 8003548:	b004      	add	sp, #16
 800354a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800354e:	4835      	ldr	r0, [pc, #212]	; (8003624 <_printf_i+0x244>)
 8003550:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	680e      	ldr	r6, [r1, #0]
 8003558:	061f      	lsls	r7, r3, #24
 800355a:	f856 5b04 	ldr.w	r5, [r6], #4
 800355e:	600e      	str	r6, [r1, #0]
 8003560:	d514      	bpl.n	800358c <_printf_i+0x1ac>
 8003562:	07d9      	lsls	r1, r3, #31
 8003564:	bf44      	itt	mi
 8003566:	f043 0320 	orrmi.w	r3, r3, #32
 800356a:	6023      	strmi	r3, [r4, #0]
 800356c:	b91d      	cbnz	r5, 8003576 <_printf_i+0x196>
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	f023 0320 	bic.w	r3, r3, #32
 8003574:	6023      	str	r3, [r4, #0]
 8003576:	2310      	movs	r3, #16
 8003578:	e7b0      	b.n	80034dc <_printf_i+0xfc>
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	f043 0320 	orr.w	r3, r3, #32
 8003580:	6023      	str	r3, [r4, #0]
 8003582:	2378      	movs	r3, #120	; 0x78
 8003584:	4828      	ldr	r0, [pc, #160]	; (8003628 <_printf_i+0x248>)
 8003586:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800358a:	e7e3      	b.n	8003554 <_printf_i+0x174>
 800358c:	065e      	lsls	r6, r3, #25
 800358e:	bf48      	it	mi
 8003590:	b2ad      	uxthmi	r5, r5
 8003592:	e7e6      	b.n	8003562 <_printf_i+0x182>
 8003594:	4616      	mov	r6, r2
 8003596:	e7bb      	b.n	8003510 <_printf_i+0x130>
 8003598:	680b      	ldr	r3, [r1, #0]
 800359a:	6826      	ldr	r6, [r4, #0]
 800359c:	6960      	ldr	r0, [r4, #20]
 800359e:	1d1d      	adds	r5, r3, #4
 80035a0:	600d      	str	r5, [r1, #0]
 80035a2:	0635      	lsls	r5, r6, #24
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	d501      	bpl.n	80035ac <_printf_i+0x1cc>
 80035a8:	6018      	str	r0, [r3, #0]
 80035aa:	e002      	b.n	80035b2 <_printf_i+0x1d2>
 80035ac:	0671      	lsls	r1, r6, #25
 80035ae:	d5fb      	bpl.n	80035a8 <_printf_i+0x1c8>
 80035b0:	8018      	strh	r0, [r3, #0]
 80035b2:	2300      	movs	r3, #0
 80035b4:	6123      	str	r3, [r4, #16]
 80035b6:	4616      	mov	r6, r2
 80035b8:	e7ba      	b.n	8003530 <_printf_i+0x150>
 80035ba:	680b      	ldr	r3, [r1, #0]
 80035bc:	1d1a      	adds	r2, r3, #4
 80035be:	600a      	str	r2, [r1, #0]
 80035c0:	681e      	ldr	r6, [r3, #0]
 80035c2:	6862      	ldr	r2, [r4, #4]
 80035c4:	2100      	movs	r1, #0
 80035c6:	4630      	mov	r0, r6
 80035c8:	f7fc fe02 	bl	80001d0 <memchr>
 80035cc:	b108      	cbz	r0, 80035d2 <_printf_i+0x1f2>
 80035ce:	1b80      	subs	r0, r0, r6
 80035d0:	6060      	str	r0, [r4, #4]
 80035d2:	6863      	ldr	r3, [r4, #4]
 80035d4:	6123      	str	r3, [r4, #16]
 80035d6:	2300      	movs	r3, #0
 80035d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035dc:	e7a8      	b.n	8003530 <_printf_i+0x150>
 80035de:	6923      	ldr	r3, [r4, #16]
 80035e0:	4632      	mov	r2, r6
 80035e2:	4649      	mov	r1, r9
 80035e4:	4640      	mov	r0, r8
 80035e6:	47d0      	blx	sl
 80035e8:	3001      	adds	r0, #1
 80035ea:	d0ab      	beq.n	8003544 <_printf_i+0x164>
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	079b      	lsls	r3, r3, #30
 80035f0:	d413      	bmi.n	800361a <_printf_i+0x23a>
 80035f2:	68e0      	ldr	r0, [r4, #12]
 80035f4:	9b03      	ldr	r3, [sp, #12]
 80035f6:	4298      	cmp	r0, r3
 80035f8:	bfb8      	it	lt
 80035fa:	4618      	movlt	r0, r3
 80035fc:	e7a4      	b.n	8003548 <_printf_i+0x168>
 80035fe:	2301      	movs	r3, #1
 8003600:	4632      	mov	r2, r6
 8003602:	4649      	mov	r1, r9
 8003604:	4640      	mov	r0, r8
 8003606:	47d0      	blx	sl
 8003608:	3001      	adds	r0, #1
 800360a:	d09b      	beq.n	8003544 <_printf_i+0x164>
 800360c:	3501      	adds	r5, #1
 800360e:	68e3      	ldr	r3, [r4, #12]
 8003610:	9903      	ldr	r1, [sp, #12]
 8003612:	1a5b      	subs	r3, r3, r1
 8003614:	42ab      	cmp	r3, r5
 8003616:	dcf2      	bgt.n	80035fe <_printf_i+0x21e>
 8003618:	e7eb      	b.n	80035f2 <_printf_i+0x212>
 800361a:	2500      	movs	r5, #0
 800361c:	f104 0619 	add.w	r6, r4, #25
 8003620:	e7f5      	b.n	800360e <_printf_i+0x22e>
 8003622:	bf00      	nop
 8003624:	0800399c 	.word	0x0800399c
 8003628:	080039ad 	.word	0x080039ad

0800362c <_sbrk_r>:
 800362c:	b538      	push	{r3, r4, r5, lr}
 800362e:	4d06      	ldr	r5, [pc, #24]	; (8003648 <_sbrk_r+0x1c>)
 8003630:	2300      	movs	r3, #0
 8003632:	4604      	mov	r4, r0
 8003634:	4608      	mov	r0, r1
 8003636:	602b      	str	r3, [r5, #0]
 8003638:	f7fd fbc8 	bl	8000dcc <_sbrk>
 800363c:	1c43      	adds	r3, r0, #1
 800363e:	d102      	bne.n	8003646 <_sbrk_r+0x1a>
 8003640:	682b      	ldr	r3, [r5, #0]
 8003642:	b103      	cbz	r3, 8003646 <_sbrk_r+0x1a>
 8003644:	6023      	str	r3, [r4, #0]
 8003646:	bd38      	pop	{r3, r4, r5, pc}
 8003648:	200000e0 	.word	0x200000e0

0800364c <strpbrk>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	7803      	ldrb	r3, [r0, #0]
 8003650:	b1a3      	cbz	r3, 800367c <strpbrk+0x30>
 8003652:	4603      	mov	r3, r0
 8003654:	460c      	mov	r4, r1
 8003656:	4618      	mov	r0, r3
 8003658:	f813 5b01 	ldrb.w	r5, [r3], #1
 800365c:	b14d      	cbz	r5, 8003672 <strpbrk+0x26>
 800365e:	460a      	mov	r2, r1
 8003660:	e001      	b.n	8003666 <strpbrk+0x1a>
 8003662:	42ae      	cmp	r6, r5
 8003664:	d009      	beq.n	800367a <strpbrk+0x2e>
 8003666:	4614      	mov	r4, r2
 8003668:	f812 6b01 	ldrb.w	r6, [r2], #1
 800366c:	2e00      	cmp	r6, #0
 800366e:	d1f8      	bne.n	8003662 <strpbrk+0x16>
 8003670:	e7f1      	b.n	8003656 <strpbrk+0xa>
 8003672:	7823      	ldrb	r3, [r4, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf08      	it	eq
 8003678:	2000      	moveq	r0, #0
 800367a:	bd70      	pop	{r4, r5, r6, pc}
 800367c:	4618      	mov	r0, r3
 800367e:	e7fc      	b.n	800367a <strpbrk+0x2e>

08003680 <strstr>:
 8003680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003682:	780c      	ldrb	r4, [r1, #0]
 8003684:	b164      	cbz	r4, 80036a0 <strstr+0x20>
 8003686:	4603      	mov	r3, r0
 8003688:	781a      	ldrb	r2, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	1c5e      	adds	r6, r3, #1
 800368e:	b90a      	cbnz	r2, 8003694 <strstr+0x14>
 8003690:	4610      	mov	r0, r2
 8003692:	e005      	b.n	80036a0 <strstr+0x20>
 8003694:	4294      	cmp	r4, r2
 8003696:	d108      	bne.n	80036aa <strstr+0x2a>
 8003698:	460d      	mov	r5, r1
 800369a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800369e:	b902      	cbnz	r2, 80036a2 <strstr+0x22>
 80036a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80036a6:	4297      	cmp	r7, r2
 80036a8:	d0f7      	beq.n	800369a <strstr+0x1a>
 80036aa:	4633      	mov	r3, r6
 80036ac:	e7ec      	b.n	8003688 <strstr+0x8>
	...

080036b0 <_strtol_l.isra.0>:
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036b6:	d001      	beq.n	80036bc <_strtol_l.isra.0+0xc>
 80036b8:	2b24      	cmp	r3, #36	; 0x24
 80036ba:	d906      	bls.n	80036ca <_strtol_l.isra.0+0x1a>
 80036bc:	f7ff fbe2 	bl	8002e84 <__errno>
 80036c0:	2316      	movs	r3, #22
 80036c2:	6003      	str	r3, [r0, #0]
 80036c4:	2000      	movs	r0, #0
 80036c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ca:	4f3a      	ldr	r7, [pc, #232]	; (80037b4 <_strtol_l.isra.0+0x104>)
 80036cc:	468e      	mov	lr, r1
 80036ce:	4676      	mov	r6, lr
 80036d0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80036d4:	5de5      	ldrb	r5, [r4, r7]
 80036d6:	f015 0508 	ands.w	r5, r5, #8
 80036da:	d1f8      	bne.n	80036ce <_strtol_l.isra.0+0x1e>
 80036dc:	2c2d      	cmp	r4, #45	; 0x2d
 80036de:	d134      	bne.n	800374a <_strtol_l.isra.0+0x9a>
 80036e0:	f89e 4000 	ldrb.w	r4, [lr]
 80036e4:	f04f 0801 	mov.w	r8, #1
 80036e8:	f106 0e02 	add.w	lr, r6, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d05c      	beq.n	80037aa <_strtol_l.isra.0+0xfa>
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d10c      	bne.n	800370e <_strtol_l.isra.0+0x5e>
 80036f4:	2c30      	cmp	r4, #48	; 0x30
 80036f6:	d10a      	bne.n	800370e <_strtol_l.isra.0+0x5e>
 80036f8:	f89e 4000 	ldrb.w	r4, [lr]
 80036fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003700:	2c58      	cmp	r4, #88	; 0x58
 8003702:	d14d      	bne.n	80037a0 <_strtol_l.isra.0+0xf0>
 8003704:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8003708:	2310      	movs	r3, #16
 800370a:	f10e 0e02 	add.w	lr, lr, #2
 800370e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8003712:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003716:	2600      	movs	r6, #0
 8003718:	fbbc f9f3 	udiv	r9, ip, r3
 800371c:	4635      	mov	r5, r6
 800371e:	fb03 ca19 	mls	sl, r3, r9, ip
 8003722:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003726:	2f09      	cmp	r7, #9
 8003728:	d818      	bhi.n	800375c <_strtol_l.isra.0+0xac>
 800372a:	463c      	mov	r4, r7
 800372c:	42a3      	cmp	r3, r4
 800372e:	dd24      	ble.n	800377a <_strtol_l.isra.0+0xca>
 8003730:	2e00      	cmp	r6, #0
 8003732:	db1f      	blt.n	8003774 <_strtol_l.isra.0+0xc4>
 8003734:	45a9      	cmp	r9, r5
 8003736:	d31d      	bcc.n	8003774 <_strtol_l.isra.0+0xc4>
 8003738:	d101      	bne.n	800373e <_strtol_l.isra.0+0x8e>
 800373a:	45a2      	cmp	sl, r4
 800373c:	db1a      	blt.n	8003774 <_strtol_l.isra.0+0xc4>
 800373e:	fb05 4503 	mla	r5, r5, r3, r4
 8003742:	2601      	movs	r6, #1
 8003744:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003748:	e7eb      	b.n	8003722 <_strtol_l.isra.0+0x72>
 800374a:	2c2b      	cmp	r4, #43	; 0x2b
 800374c:	bf08      	it	eq
 800374e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8003752:	46a8      	mov	r8, r5
 8003754:	bf08      	it	eq
 8003756:	f106 0e02 	addeq.w	lr, r6, #2
 800375a:	e7c7      	b.n	80036ec <_strtol_l.isra.0+0x3c>
 800375c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003760:	2f19      	cmp	r7, #25
 8003762:	d801      	bhi.n	8003768 <_strtol_l.isra.0+0xb8>
 8003764:	3c37      	subs	r4, #55	; 0x37
 8003766:	e7e1      	b.n	800372c <_strtol_l.isra.0+0x7c>
 8003768:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800376c:	2f19      	cmp	r7, #25
 800376e:	d804      	bhi.n	800377a <_strtol_l.isra.0+0xca>
 8003770:	3c57      	subs	r4, #87	; 0x57
 8003772:	e7db      	b.n	800372c <_strtol_l.isra.0+0x7c>
 8003774:	f04f 36ff 	mov.w	r6, #4294967295
 8003778:	e7e4      	b.n	8003744 <_strtol_l.isra.0+0x94>
 800377a:	2e00      	cmp	r6, #0
 800377c:	da05      	bge.n	800378a <_strtol_l.isra.0+0xda>
 800377e:	2322      	movs	r3, #34	; 0x22
 8003780:	6003      	str	r3, [r0, #0]
 8003782:	4665      	mov	r5, ip
 8003784:	b942      	cbnz	r2, 8003798 <_strtol_l.isra.0+0xe8>
 8003786:	4628      	mov	r0, r5
 8003788:	e79d      	b.n	80036c6 <_strtol_l.isra.0+0x16>
 800378a:	f1b8 0f00 	cmp.w	r8, #0
 800378e:	d000      	beq.n	8003792 <_strtol_l.isra.0+0xe2>
 8003790:	426d      	negs	r5, r5
 8003792:	2a00      	cmp	r2, #0
 8003794:	d0f7      	beq.n	8003786 <_strtol_l.isra.0+0xd6>
 8003796:	b10e      	cbz	r6, 800379c <_strtol_l.isra.0+0xec>
 8003798:	f10e 31ff 	add.w	r1, lr, #4294967295
 800379c:	6011      	str	r1, [r2, #0]
 800379e:	e7f2      	b.n	8003786 <_strtol_l.isra.0+0xd6>
 80037a0:	2430      	movs	r4, #48	; 0x30
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1b3      	bne.n	800370e <_strtol_l.isra.0+0x5e>
 80037a6:	2308      	movs	r3, #8
 80037a8:	e7b1      	b.n	800370e <_strtol_l.isra.0+0x5e>
 80037aa:	2c30      	cmp	r4, #48	; 0x30
 80037ac:	d0a4      	beq.n	80036f8 <_strtol_l.isra.0+0x48>
 80037ae:	230a      	movs	r3, #10
 80037b0:	e7ad      	b.n	800370e <_strtol_l.isra.0+0x5e>
 80037b2:	bf00      	nop
 80037b4:	080039bf 	.word	0x080039bf

080037b8 <strtol>:
 80037b8:	4613      	mov	r3, r2
 80037ba:	460a      	mov	r2, r1
 80037bc:	4601      	mov	r1, r0
 80037be:	4802      	ldr	r0, [pc, #8]	; (80037c8 <strtol+0x10>)
 80037c0:	6800      	ldr	r0, [r0, #0]
 80037c2:	f7ff bf75 	b.w	80036b0 <_strtol_l.isra.0>
 80037c6:	bf00      	nop
 80037c8:	20000008 	.word	0x20000008

080037cc <memcpy>:
 80037cc:	440a      	add	r2, r1
 80037ce:	4291      	cmp	r1, r2
 80037d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80037d4:	d100      	bne.n	80037d8 <memcpy+0xc>
 80037d6:	4770      	bx	lr
 80037d8:	b510      	push	{r4, lr}
 80037da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037e2:	4291      	cmp	r1, r2
 80037e4:	d1f9      	bne.n	80037da <memcpy+0xe>
 80037e6:	bd10      	pop	{r4, pc}

080037e8 <memmove>:
 80037e8:	4288      	cmp	r0, r1
 80037ea:	b510      	push	{r4, lr}
 80037ec:	eb01 0402 	add.w	r4, r1, r2
 80037f0:	d902      	bls.n	80037f8 <memmove+0x10>
 80037f2:	4284      	cmp	r4, r0
 80037f4:	4623      	mov	r3, r4
 80037f6:	d807      	bhi.n	8003808 <memmove+0x20>
 80037f8:	1e43      	subs	r3, r0, #1
 80037fa:	42a1      	cmp	r1, r4
 80037fc:	d008      	beq.n	8003810 <memmove+0x28>
 80037fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003806:	e7f8      	b.n	80037fa <memmove+0x12>
 8003808:	4402      	add	r2, r0
 800380a:	4601      	mov	r1, r0
 800380c:	428a      	cmp	r2, r1
 800380e:	d100      	bne.n	8003812 <memmove+0x2a>
 8003810:	bd10      	pop	{r4, pc}
 8003812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800381a:	e7f7      	b.n	800380c <memmove+0x24>

0800381c <__malloc_lock>:
 800381c:	4801      	ldr	r0, [pc, #4]	; (8003824 <__malloc_lock+0x8>)
 800381e:	f000 b82f 	b.w	8003880 <__retarget_lock_acquire_recursive>
 8003822:	bf00      	nop
 8003824:	200000e8 	.word	0x200000e8

08003828 <__malloc_unlock>:
 8003828:	4801      	ldr	r0, [pc, #4]	; (8003830 <__malloc_unlock+0x8>)
 800382a:	f000 b82a 	b.w	8003882 <__retarget_lock_release_recursive>
 800382e:	bf00      	nop
 8003830:	200000e8 	.word	0x200000e8

08003834 <_realloc_r>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	4607      	mov	r7, r0
 8003838:	4614      	mov	r4, r2
 800383a:	460e      	mov	r6, r1
 800383c:	b921      	cbnz	r1, 8003848 <_realloc_r+0x14>
 800383e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003842:	4611      	mov	r1, r2
 8003844:	f7ff bba8 	b.w	8002f98 <_malloc_r>
 8003848:	b922      	cbnz	r2, 8003854 <_realloc_r+0x20>
 800384a:	f7ff fb55 	bl	8002ef8 <_free_r>
 800384e:	4625      	mov	r5, r4
 8003850:	4628      	mov	r0, r5
 8003852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003854:	f000 f816 	bl	8003884 <_malloc_usable_size_r>
 8003858:	42a0      	cmp	r0, r4
 800385a:	d20f      	bcs.n	800387c <_realloc_r+0x48>
 800385c:	4621      	mov	r1, r4
 800385e:	4638      	mov	r0, r7
 8003860:	f7ff fb9a 	bl	8002f98 <_malloc_r>
 8003864:	4605      	mov	r5, r0
 8003866:	2800      	cmp	r0, #0
 8003868:	d0f2      	beq.n	8003850 <_realloc_r+0x1c>
 800386a:	4631      	mov	r1, r6
 800386c:	4622      	mov	r2, r4
 800386e:	f7ff ffad 	bl	80037cc <memcpy>
 8003872:	4631      	mov	r1, r6
 8003874:	4638      	mov	r0, r7
 8003876:	f7ff fb3f 	bl	8002ef8 <_free_r>
 800387a:	e7e9      	b.n	8003850 <_realloc_r+0x1c>
 800387c:	4635      	mov	r5, r6
 800387e:	e7e7      	b.n	8003850 <_realloc_r+0x1c>

08003880 <__retarget_lock_acquire_recursive>:
 8003880:	4770      	bx	lr

08003882 <__retarget_lock_release_recursive>:
 8003882:	4770      	bx	lr

08003884 <_malloc_usable_size_r>:
 8003884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003888:	1f18      	subs	r0, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	bfbc      	itt	lt
 800388e:	580b      	ldrlt	r3, [r1, r0]
 8003890:	18c0      	addlt	r0, r0, r3
 8003892:	4770      	bx	lr

08003894 <_init>:
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003896:	bf00      	nop
 8003898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389a:	bc08      	pop	{r3}
 800389c:	469e      	mov	lr, r3
 800389e:	4770      	bx	lr

080038a0 <_fini>:
 80038a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a2:	bf00      	nop
 80038a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a6:	bc08      	pop	{r3}
 80038a8:	469e      	mov	lr, r3
 80038aa:	4770      	bx	lr
