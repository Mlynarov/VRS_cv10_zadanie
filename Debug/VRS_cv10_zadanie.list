
VRS_cv10_zadanie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ddc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08003f6c  08003f6c  00013f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004180  08004180  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08004180  08004180  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004180  08004180  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004184  08004184  00014184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000080  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000083f3  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bbb  00000000  00000000  0002848f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  0002a050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000778  00000000  00000000  0002a8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000175fe  00000000  00000000  0002b018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000069df  00000000  00000000  00042616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007a314  00000000  00000000  00048ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c3309  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027a4  00000000  00000000  000c335c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f54 	.word	0x08003f54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08003f54 	.word	0x08003f54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <__NVIC_GetPriorityGrouping+0x18>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	f003 0307 	and.w	r3, r3, #7
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	db0b      	blt.n	8000aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	f003 021f 	and.w	r2, r3, #31
 8000a90:	4907      	ldr	r1, [pc, #28]	; (8000ab0 <__NVIC_EnableIRQ+0x38>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	095b      	lsrs	r3, r3, #5
 8000a98:	2001      	movs	r0, #1
 8000a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000e100 	.word	0xe000e100

08000ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	db0a      	blt.n	8000ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	490c      	ldr	r1, [pc, #48]	; (8000b00 <__NVIC_SetPriority+0x4c>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	0112      	lsls	r2, r2, #4
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000adc:	e00a      	b.n	8000af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4908      	ldr	r1, [pc, #32]	; (8000b04 <__NVIC_SetPriority+0x50>)
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	3b04      	subs	r3, #4
 8000aec:	0112      	lsls	r2, r2, #4
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	440b      	add	r3, r1
 8000af2:	761a      	strb	r2, [r3, #24]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000e100 	.word	0xe000e100
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b089      	sub	sp, #36	; 0x24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	f1c3 0307 	rsb	r3, r3, #7
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	bf28      	it	cs
 8000b26:	2304      	movcs	r3, #4
 8000b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	d902      	bls.n	8000b38 <NVIC_EncodePriority+0x30>
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3b03      	subs	r3, #3
 8000b36:	e000      	b.n	8000b3a <NVIC_EncodePriority+0x32>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43da      	mvns	r2, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b50:	f04f 31ff 	mov.w	r1, #4294967295
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5a:	43d9      	mvns	r1, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	4313      	orrs	r3, r2
         );
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3724      	adds	r7, #36	; 0x24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b7a:	695a      	ldr	r2, [r3, #20]
 8000b7c:	4907      	ldr	r1, [pc, #28]	; (8000b9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b86:	695a      	ldr	r2, [r3, #20]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f7ff ffe3 	bl	8000b70 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000baa:	f7ff ff57 	bl	8000a5c <__NVIC_GetPriorityGrouping>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ffa7 	bl	8000b08 <NVIC_EncodePriority>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	2010      	movs	r0, #16
 8000bc0:	f7ff ff78 	bl	8000ab4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000bc4:	2010      	movs	r0, #16
 8000bc6:	f7ff ff57 	bl	8000a78 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000bca:	f7ff ff47 	bl	8000a5c <__NVIC_GetPriorityGrouping>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff97 	bl	8000b08 <NVIC_EncodePriority>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4619      	mov	r1, r3
 8000bde:	2011      	movs	r0, #17
 8000be0:	f7ff ff68 	bl	8000ab4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000be4:	2011      	movs	r0, #17
 8000be6:	f7ff ff47 	bl	8000a78 <__NVIC_EnableIRQ>

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <LL_AHB1_GRP1_EnableClock>:
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bfa:	695a      	ldr	r2, [r3, #20]
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c06:	695a      	ldr	r2, [r3, #20]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	40021000 	.word	0x40021000

08000c20 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000c24:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c28:	f7ff ffe2 	bl	8000bf0 <LL_AHB1_GRP1_EnableClock>

}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <__NVIC_SetPriorityGrouping>:
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	3b01      	subs	r3, #1
 8000c86:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <LL_DMA_GetDataLength+0x28>)
 8000c88:	5cd3      	ldrb	r3, [r2, r3]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4413      	add	r3, r2
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	b29b      	uxth	r3, r3
                   DMA_CNDTR_NDT));
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	08004004 	.word	0x08004004

08000ca4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <LL_RCC_HSI_Enable+0x1c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <LL_RCC_HSI_Enable+0x1c>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <LL_RCC_HSI_IsReady+0x20>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	bf0c      	ite	eq
 8000cd4:	2301      	moveq	r3, #1
 8000cd6:	2300      	movne	r3, #0
 8000cd8:	b2db      	uxtb	r3, r3
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	4904      	ldr	r1, [pc, #16]	; (8000d10 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	600b      	str	r3, [r1, #0]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <LL_RCC_SetSysClkSource+0x24>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f023 0203 	bic.w	r2, r3, #3
 8000d24:	4904      	ldr	r1, [pc, #16]	; (8000d38 <LL_RCC_SetSysClkSource+0x24>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	604b      	str	r3, [r1, #4]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	40021000 	.word	0x40021000

08000d3c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <LL_RCC_GetSysClkSource+0x18>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 030c 	and.w	r3, r3, #12
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000

08000d58 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <LL_RCC_SetAHBPrescaler+0x24>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d68:	4904      	ldr	r1, [pc, #16]	; (8000d7c <LL_RCC_SetAHBPrescaler+0x24>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	604b      	str	r3, [r1, #4]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	40021000 	.word	0x40021000

08000d80 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d90:	4904      	ldr	r1, [pc, #16]	; (8000da4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	604b      	str	r3, [r1, #4]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	40021000 	.word	0x40021000

08000da8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <LL_RCC_SetAPB2Prescaler+0x24>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000db8:	4904      	ldr	r1, [pc, #16]	; (8000dcc <LL_RCC_SetAPB2Prescaler+0x24>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	604b      	str	r3, [r1, #4]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dda:	69da      	ldr	r2, [r3, #28]
 8000ddc:	4907      	ldr	r1, [pc, #28]	; (8000dfc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000de6:	69da      	ldr	r2, [r3, #28]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4013      	ands	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	40021000 	.word	0x40021000

08000e00 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e0a:	699a      	ldr	r2, [r3, #24]
 8000e0c:	4907      	ldr	r1, [pc, #28]	; (8000e2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e16:	699a      	ldr	r2, [r3, #24]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	40021000 	.word	0x40021000

08000e30 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <LL_FLASH_SetLatency+0x24>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f023 0207 	bic.w	r2, r3, #7
 8000e40:	4904      	ldr	r1, [pc, #16]	; (8000e54 <LL_FLASH_SetLatency+0x24>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	600b      	str	r3, [r1, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40022000 	.word	0x40022000

08000e58 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <LL_FLASH_GetLatency+0x18>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0307 	and.w	r3, r3, #7
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40022000 	.word	0x40022000

08000e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f7ff ffc1 	bl	8000e00 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000e7e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000e82:	f7ff ffa5 	bl	8000dd0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e86:	2003      	movs	r0, #3
 8000e88:	f7ff fed2 	bl	8000c30 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8c:	f000 f814 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e90:	f7ff fec6 	bl	8000c20 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e94:	f7ff fe84 	bl	8000ba0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000e98:	f000 fce6 	bl	8001868 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000e9c:	f001 f946 	bl	800212c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  USART2_RegisterCallback(proccesDmaData);
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <main+0x40>)
 8000ea2:	f001 f931 	bl	8002108 <USART2_RegisterCallback>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  calculateMemory();
 8000ea6:	f000 f981 	bl	80011ac <calculateMemory>
	  LL_mDelay(1000);
 8000eaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eae:	f002 faeb 	bl	8003488 <LL_mDelay>
	  calculateMemory();
 8000eb2:	e7f8      	b.n	8000ea6 <main+0x32>
 8000eb4:	08000f1d 	.word	0x08000f1d

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff ffb7 	bl	8000e30 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000ec2:	bf00      	nop
 8000ec4:	f7ff ffc8 	bl	8000e58 <LL_FLASH_GetLatency>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1fa      	bne.n	8000ec4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000ece:	f7ff fee9 	bl	8000ca4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000ed2:	bf00      	nop
 8000ed4:	f7ff fef6 	bl	8000cc4 <LL_RCC_HSI_IsReady>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d1fa      	bne.n	8000ed4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000ede:	2010      	movs	r0, #16
 8000ee0:	f7ff ff02 	bl	8000ce8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff ff37 	bl	8000d58 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff ff48 	bl	8000d80 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f7ff ff59 	bl	8000da8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff ff0c 	bl	8000d14 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000efc:	bf00      	nop
 8000efe:	f7ff ff1d 	bl	8000d3c <LL_RCC_GetSysClkSource>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1fa      	bne.n	8000efe <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <SystemClock_Config+0x60>)
 8000f0a:	f002 faaf 	bl	800346c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000f0e:	4802      	ldr	r0, [pc, #8]	; (8000f18 <SystemClock_Config+0x60>)
 8000f10:	f002 fae0 	bl	80034d4 <LL_SetSystemCoreClock>
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	007a1200 	.word	0x007a1200

08000f1c <proccesDmaData>:

/* USER CODE BEGIN 4 */
void proccesDmaData(uint8_t* sign,uint16_t len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
	uint8_t *tx_data;
	mode=checkMode(sign,len);
 8000f28:	887b      	ldrh	r3, [r7, #2]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f8cb 	bl	80010c8 <checkMode>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <proccesDmaData+0xb8>)
 8000f36:	6013      	str	r3, [r2, #0]


	if (mode == 1){
 8000f38:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <proccesDmaData+0xb8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d111      	bne.n	8000f64 <proccesDmaData+0x48>
		int len_data = asprintf(&tx_data, "Mode is set to:  automatic\n\r");
 8000f40:	f107 0308 	add.w	r3, r7, #8
 8000f44:	4924      	ldr	r1, [pc, #144]	; (8000fd8 <proccesDmaData+0xbc>)
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 fad4 	bl	80034f4 <asiprintf>
 8000f4c:	6178      	str	r0, [r7, #20]
		sendData(tx_data,len_data);
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	b292      	uxth	r2, r2
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f918 	bl	800118c <sendData>
		free(tx_data);
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 fb1a 	bl	8003598 <free>
	}
	if (mode == 2){
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <proccesDmaData+0xb8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d119      	bne.n	8000fa0 <proccesDmaData+0x84>
		pwmToLed(sign,len);
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f000 f837 	bl	8000fe4 <pwmToLed>
		LL_mDelay(50);
 8000f76:	2032      	movs	r0, #50	; 0x32
 8000f78:	f002 fa86 	bl	8003488 <LL_mDelay>
		int len_data = asprintf(&tx_data, "Mode is set to:  manual\n\r");
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	4916      	ldr	r1, [pc, #88]	; (8000fdc <proccesDmaData+0xc0>)
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 fab6 	bl	80034f4 <asiprintf>
 8000f88:	6138      	str	r0, [r7, #16]
		sendData(tx_data,len_data);
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f8fa 	bl	800118c <sendData>
		free(tx_data);
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 fafc 	bl	8003598 <free>
	}

	if (mode == 0){
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <proccesDmaData+0xb8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d111      	bne.n	8000fcc <proccesDmaData+0xb0>
		int len_data = asprintf(&tx_data, "Mode is set to:  none\n\r");
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <proccesDmaData+0xc4>)
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f002 faa0 	bl	80034f4 <asiprintf>
 8000fb4:	60f8      	str	r0, [r7, #12]
		sendData(tx_data,len_data);
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f8e4 	bl	800118c <sendData>
		free(tx_data);
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f002 fae6 	bl	8003598 <free>
	}
}
 8000fcc:	bf00      	nop
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	08003f6c 	.word	0x08003f6c
 8000fdc:	08003f8c 	.word	0x08003f8c
 8000fe0:	08003fa8 	.word	0x08003fa8

08000fe4 <pwmToLed>:

void pwmToLed(uint8_t* sign,uint16_t len){
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
 8000ff0:	466b      	mov	r3, sp
 8000ff2:	461d      	mov	r5, r3
	uint8_t *tx_data;
	int number=0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
	char str[len];
 8000ff8:	887c      	ldrh	r4, [r7, #2]
 8000ffa:	4623      	mov	r3, r4
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8001000:	b2a0      	uxth	r0, r4
 8001002:	f04f 0100 	mov.w	r1, #0
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	00cb      	lsls	r3, r1, #3
 8001010:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001014:	00c2      	lsls	r2, r0, #3
 8001016:	b2a0      	uxth	r0, r4
 8001018:	f04f 0100 	mov.w	r1, #0
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	00cb      	lsls	r3, r1, #3
 8001026:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800102a:	00c2      	lsls	r2, r0, #3
 800102c:	4623      	mov	r3, r4
 800102e:	3307      	adds	r3, #7
 8001030:	08db      	lsrs	r3, r3, #3
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	ebad 0d03 	sub.w	sp, sp, r3
 8001038:	466b      	mov	r3, sp
 800103a:	3300      	adds	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
	for(int j=0;j<len;j++){
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001042:	e00b      	b.n	800105c <pwmToLed+0x78>
		str[j] = *(sign+j);
 8001044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	7819      	ldrb	r1, [r3, #0]
 800104c:	6a3a      	ldr	r2, [r7, #32]
 800104e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001050:	4413      	add	r3, r2
 8001052:	460a      	mov	r2, r1
 8001054:	701a      	strb	r2, [r3, #0]
	for(int j=0;j<len;j++){
 8001056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001058:	3301      	adds	r3, #1
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001060:	429a      	cmp	r2, r3
 8001062:	dbef      	blt.n	8001044 <pwmToLed+0x60>
	}
	char breakset[] = "0123456789";
 8001064:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <pwmToLed+0xdc>)
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	ca07      	ldmia	r2, {r0, r1, r2}
 800106c:	c303      	stmia	r3!, {r0, r1}
 800106e:	801a      	strh	r2, [r3, #0]
 8001070:	3302      	adds	r3, #2
 8001072:	0c12      	lsrs	r2, r2, #16
 8001074:	701a      	strb	r2, [r3, #0]
	number = atoi(strpbrk(str, breakset));
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	f107 020c 	add.w	r2, r7, #12
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f002 fe44 	bl	8003d0c <strpbrk>
 8001084:	4603      	mov	r3, r0
 8001086:	4618      	mov	r0, r3
 8001088:	f002 fa58 	bl	800353c <atoi>
 800108c:	62b8      	str	r0, [r7, #40]	; 0x28
	int len_data = asprintf(&tx_data, "The brightness is set to: : %d %\n\r",number);
 800108e:	f107 0318 	add.w	r3, r7, #24
 8001092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001094:	490b      	ldr	r1, [pc, #44]	; (80010c4 <pwmToLed+0xe0>)
 8001096:	4618      	mov	r0, r3
 8001098:	f002 fa2c 	bl	80034f4 <asiprintf>
 800109c:	61f8      	str	r0, [r7, #28]
									sendData(tx_data,len_data);
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	b292      	uxth	r2, r2
 80010a4:	4611      	mov	r1, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f870 	bl	800118c <sendData>
									free(tx_data);
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f002 fa72 	bl	8003598 <free>
 80010b4:	46ad      	mov	sp, r5
}
 80010b6:	bf00      	nop
 80010b8:	3730      	adds	r7, #48	; 0x30
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bdb0      	pop	{r4, r5, r7, pc}
 80010be:	bf00      	nop
 80010c0:	08003fe4 	.word	0x08003fe4
 80010c4:	08003fc0 	.word	0x08003fc0

080010c8 <checkMode>:

int checkMode(uint8_t* sign,uint16_t len){
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
 80010d4:	466b      	mov	r3, sp
 80010d6:	461d      	mov	r5, r3
	char str[len];
 80010d8:	887c      	ldrh	r4, [r7, #2]
 80010da:	4623      	mov	r3, r4
 80010dc:	3b01      	subs	r3, #1
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	b2a0      	uxth	r0, r4
 80010e2:	f04f 0100 	mov.w	r1, #0
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	f04f 0300 	mov.w	r3, #0
 80010ee:	00cb      	lsls	r3, r1, #3
 80010f0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010f4:	00c2      	lsls	r2, r0, #3
 80010f6:	b2a0      	uxth	r0, r4
 80010f8:	f04f 0100 	mov.w	r1, #0
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	00cb      	lsls	r3, r1, #3
 8001106:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800110a:	00c2      	lsls	r2, r0, #3
 800110c:	4623      	mov	r3, r4
 800110e:	3307      	adds	r3, #7
 8001110:	08db      	lsrs	r3, r3, #3
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	ebad 0d03 	sub.w	sp, sp, r3
 8001118:	466b      	mov	r3, sp
 800111a:	3300      	adds	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
	for(int j=0;j<len;j++){
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	e00b      	b.n	800113c <checkMode+0x74>
		str[j] = *(sign+j);
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	7819      	ldrb	r1, [r3, #0]
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	4413      	add	r3, r2
 8001132:	460a      	mov	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
	for(int j=0;j<len;j++){
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3301      	adds	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	887b      	ldrh	r3, [r7, #2]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	dbef      	blt.n	8001124 <checkMode+0x5c>
	}
	if(strstr(str,"$auto$")){
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	490e      	ldr	r1, [pc, #56]	; (8001180 <checkMode+0xb8>)
 8001148:	4618      	mov	r0, r3
 800114a:	f002 fdf9 	bl	8003d40 <strstr>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <checkMode+0x94>
		mode = 1;
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <checkMode+0xbc>)
 8001156:	2201      	movs	r2, #1
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e00a      	b.n	8001172 <checkMode+0xaa>
	}
	else if(strstr(str,"$manual$")){
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	490a      	ldr	r1, [pc, #40]	; (8001188 <checkMode+0xc0>)
 8001160:	4618      	mov	r0, r3
 8001162:	f002 fded 	bl	8003d40 <strstr>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <checkMode+0xaa>
		mode = 2;
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <checkMode+0xbc>)
 800116e:	2202      	movs	r2, #2
 8001170:	601a      	str	r2, [r3, #0]
	}
	return mode;
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <checkMode+0xbc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	46ad      	mov	sp, r5
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bdb0      	pop	{r4, r5, r7, pc}
 8001180:	08003ff0 	.word	0x08003ff0
 8001184:	20000000 	.word	0x20000000
 8001188:	08003ff8 	.word	0x08003ff8

0800118c <sendData>:

void sendData(uint8_t* data,uint16_t len)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
	USART2_PutBuffer(data, len);
 8001198:	887b      	ldrh	r3, [r7, #2]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4619      	mov	r1, r3
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f001 f8b6 	bl	8002310 <USART2_PutBuffer>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <calculateMemory>:

void calculateMemory()
{
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
	uint16_t size;
	uint16_t occupied;
	uint8_t *tx_data;
	uint16_t len_data;
	int percent = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]


	size = DMA_USART2_BUFFER_SIZE;
 80011b6:	2340      	movs	r3, #64	; 0x40
 80011b8:	807b      	strh	r3, [r7, #2]
	occupied = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 80011ba:	2106      	movs	r1, #6
 80011bc:	4816      	ldr	r0, [pc, #88]	; (8001218 <calculateMemory+0x6c>)
 80011be:	f7ff fd5b 	bl	8000c78 <LL_DMA_GetDataLength>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80011ca:	803b      	strh	r3, [r7, #0]
	percent = 100.0/size*occupied;
 80011cc:	887b      	ldrh	r3, [r7, #2]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f9a0 	bl	8000514 <__aeabi_i2d>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	f04f 0000 	mov.w	r0, #0
 80011dc:	490f      	ldr	r1, [pc, #60]	; (800121c <calculateMemory+0x70>)
 80011de:	f7ff fb2d 	bl	800083c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4614      	mov	r4, r2
 80011e8:	461d      	mov	r5, r3
 80011ea:	883b      	ldrh	r3, [r7, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f991 	bl	8000514 <__aeabi_i2d>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4620      	mov	r0, r4
 80011f8:	4629      	mov	r1, r5
 80011fa:	f7ff f9f5 	bl	80005e8 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f7ff fc01 	bl	8000a0c <__aeabi_d2iz>
 800120a:	4603      	mov	r3, r0
 800120c:	607b      	str	r3, [r7, #4]
	//len_data = asprintf(&tx_data, "Buffer capacity: %3d bytes, occupied memory: %3d bytes, load [in ~%%]: %3d%%\n\r",size,occupied,percent);
	//sendData(tx_data,len_data);
	//free(tx_data);
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bdb0      	pop	{r4, r5, r7, pc}
 8001216:	bf00      	nop
 8001218:	40020000 	.word	0x40020000
 800121c:	40590000 	.word	0x40590000

08001220 <LL_DMA_DisableChannel>:
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	3b01      	subs	r3, #1
 800122e:	4a0b      	ldr	r2, [pc, #44]	; (800125c <LL_DMA_DisableChannel+0x3c>)
 8001230:	5cd3      	ldrb	r3, [r2, r3]
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	3a01      	subs	r2, #1
 800123e:	4907      	ldr	r1, [pc, #28]	; (800125c <LL_DMA_DisableChannel+0x3c>)
 8001240:	5c8a      	ldrb	r2, [r1, r2]
 8001242:	4611      	mov	r1, r2
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	440a      	add	r2, r1
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	6013      	str	r3, [r2, #0]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	0800400c 	.word	0x0800400c

08001260 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001270:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001274:	bf0c      	ite	eq
 8001276:	2301      	moveq	r3, #1
 8001278:	2300      	movne	r3, #0
 800127a:	b2db      	uxtb	r3, r3
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001298:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800129c:	bf0c      	ite	eq
 800129e:	2301      	moveq	r3, #1
 80012a0:	2300      	movne	r3, #0
 80012a2:	b2db      	uxtb	r3, r3
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012c4:	bf0c      	ite	eq
 80012c6:	2301      	moveq	r3, #1
 80012c8:	2300      	movne	r3, #0
 80012ca:	b2db      	uxtb	r3, r3
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80012e6:	605a      	str	r2, [r3, #4]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001302:	605a      	str	r2, [r3, #4]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800131e:	605a      	str	r2, [r3, #4]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	2b10      	cmp	r3, #16
 800133e:	d101      	bne.n	8001344 <LL_USART_IsActiveFlag_IDLE+0x18>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001362:	2b40      	cmp	r3, #64	; 0x40
 8001364:	d101      	bne.n	800136a <LL_USART_IsActiveFlag_TC+0x18>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <LL_USART_IsActiveFlag_TC+0x1a>
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2210      	movs	r2, #16
 8001384:	621a      	str	r2, [r3, #32]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <NMI_Handler+0x4>

08001398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <HardFault_Handler+0x4>

0800139e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <MemManage_Handler+0x4>

080013a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <BusFault_Handler+0x4>

080013aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <UsageFault_Handler+0x4>

080013b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <DMA1_Channel6_IRQHandler+0x38>)
 80013ee:	f7ff ff37 	bl	8001260 <LL_DMA_IsActiveFlag_TC6>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d105      	bne.n	8001404 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 80013f8:	f000 ffaa 	bl	8002350 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 80013fc:	4808      	ldr	r0, [pc, #32]	; (8001420 <DMA1_Channel6_IRQHandler+0x38>)
 80013fe:	f7ff ff6b 	bl	80012d8 <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001402:	e00a      	b.n	800141a <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8001404:	4806      	ldr	r0, [pc, #24]	; (8001420 <DMA1_Channel6_IRQHandler+0x38>)
 8001406:	f7ff ff53 	bl	80012b0 <LL_DMA_IsActiveFlag_HT6>
 800140a:	4603      	mov	r3, r0
 800140c:	2b01      	cmp	r3, #1
 800140e:	d104      	bne.n	800141a <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8001410:	f000 ff9e 	bl	8002350 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <DMA1_Channel6_IRQHandler+0x38>)
 8001416:	f7ff ff7b 	bl	8001310 <LL_DMA_ClearFlag_HT6>
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40020000 	.word	0x40020000

08001424 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001428:	480a      	ldr	r0, [pc, #40]	; (8001454 <DMA1_Channel7_IRQHandler+0x30>)
 800142a:	f7ff ff2d 	bl	8001288 <LL_DMA_IsActiveFlag_TC7>
 800142e:	4603      	mov	r3, r0
 8001430:	2b01      	cmp	r3, #1
 8001432:	d10d      	bne.n	8001450 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <DMA1_Channel7_IRQHandler+0x30>)
 8001436:	f7ff ff5d 	bl	80012f4 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 800143a:	bf00      	nop
 800143c:	4806      	ldr	r0, [pc, #24]	; (8001458 <DMA1_Channel7_IRQHandler+0x34>)
 800143e:	f7ff ff88 	bl	8001352 <LL_USART_IsActiveFlag_TC>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f9      	beq.n	800143c <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001448:	2107      	movs	r1, #7
 800144a:	4802      	ldr	r0, [pc, #8]	; (8001454 <DMA1_Channel7_IRQHandler+0x30>)
 800144c:	f7ff fee8 	bl	8001220 <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40020000 	.word	0x40020000
 8001458:	40004400 	.word	0x40004400

0800145c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001470:	4806      	ldr	r0, [pc, #24]	; (800148c <USART2_IRQHandler+0x20>)
 8001472:	f7ff ff5b 	bl	800132c <LL_USART_IsActiveFlag_IDLE>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d004      	beq.n	8001486 <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 800147c:	f000 ff68 	bl	8002350 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <USART2_IRQHandler+0x20>)
 8001482:	f7ff ff79 	bl	8001378 <LL_USART_ClearFlag_IDLE>
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40004400 	.word	0x40004400

08001490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001498:	4a14      	ldr	r2, [pc, #80]	; (80014ec <_sbrk+0x5c>)
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <_sbrk+0x60>)
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <_sbrk+0x64>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <_sbrk+0x68>)
 80014b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d207      	bcs.n	80014d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c0:	f002 f840 	bl	8003544 <__errno>
 80014c4:	4603      	mov	r3, r0
 80014c6:	220c      	movs	r2, #12
 80014c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	e009      	b.n	80014e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <_sbrk+0x64>)
 80014e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e2:	68fb      	ldr	r3, [r7, #12]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20003000 	.word	0x20003000
 80014f0:	00000400 	.word	0x00000400
 80014f4:	20000088 	.word	0x20000088
 80014f8:	200000f0 	.word	0x200000f0

080014fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <SystemInit+0x20>)
 8001502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <SystemInit+0x20>)
 8001508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800150c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4907      	ldr	r1, [pc, #28]	; (8001574 <__NVIC_EnableIRQ+0x38>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <LL_AHB1_GRP1_EnableClock>:
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800163e:	695a      	ldr	r2, [r3, #20]
 8001640:	4907      	ldr	r1, [pc, #28]	; (8001660 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4313      	orrs	r3, r2
 8001646:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800164a:	695a      	ldr	r2, [r3, #20]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4013      	ands	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40021000 	.word	0x40021000

08001664 <LL_APB1_GRP1_EnableClock>:
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <LL_APB1_GRP1_EnableClock+0x2c>)
 800166e:	69da      	ldr	r2, [r3, #28]
 8001670:	4907      	ldr	r1, [pc, #28]	; (8001690 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4313      	orrs	r3, r2
 8001676:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <LL_APB1_GRP1_EnableClock+0x2c>)
 800167a:	69da      	ldr	r2, [r3, #28]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4013      	ands	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40021000 	.word	0x40021000

08001694 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	601a      	str	r2, [r3, #0]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_TIM_OC_DisableFast>:
  * @note   OC5FE and OC6FE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d028      	beq.n	8001716 <LL_TIM_OC_DisableFast+0x62>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d023      	beq.n	8001712 <LL_TIM_OC_DisableFast+0x5e>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2b10      	cmp	r3, #16
 80016ce:	d01e      	beq.n	800170e <LL_TIM_OC_DisableFast+0x5a>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	2b40      	cmp	r3, #64	; 0x40
 80016d4:	d019      	beq.n	800170a <LL_TIM_OC_DisableFast+0x56>
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016dc:	d013      	beq.n	8001706 <LL_TIM_OC_DisableFast+0x52>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e4:	d00d      	beq.n	8001702 <LL_TIM_OC_DisableFast+0x4e>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016ec:	d007      	beq.n	80016fe <LL_TIM_OC_DisableFast+0x4a>
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f4:	d101      	bne.n	80016fa <LL_TIM_OC_DisableFast+0x46>
 80016f6:	2307      	movs	r3, #7
 80016f8:	e00e      	b.n	8001718 <LL_TIM_OC_DisableFast+0x64>
 80016fa:	2308      	movs	r3, #8
 80016fc:	e00c      	b.n	8001718 <LL_TIM_OC_DisableFast+0x64>
 80016fe:	2306      	movs	r3, #6
 8001700:	e00a      	b.n	8001718 <LL_TIM_OC_DisableFast+0x64>
 8001702:	2305      	movs	r3, #5
 8001704:	e008      	b.n	8001718 <LL_TIM_OC_DisableFast+0x64>
 8001706:	2304      	movs	r3, #4
 8001708:	e006      	b.n	8001718 <LL_TIM_OC_DisableFast+0x64>
 800170a:	2303      	movs	r3, #3
 800170c:	e004      	b.n	8001718 <LL_TIM_OC_DisableFast+0x64>
 800170e:	2302      	movs	r3, #2
 8001710:	e002      	b.n	8001718 <LL_TIM_OC_DisableFast+0x64>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <LL_TIM_OC_DisableFast+0x64>
 8001716:	2300      	movs	r3, #0
 8001718:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3318      	adds	r3, #24
 800171e:	4619      	mov	r1, r3
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <LL_TIM_OC_DisableFast+0x9c>)
 8001724:	5cd3      	ldrb	r3, [r2, r3]
 8001726:	440b      	add	r3, r1
 8001728:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	4908      	ldr	r1, [pc, #32]	; (8001754 <LL_TIM_OC_DisableFast+0xa0>)
 8001732:	5ccb      	ldrb	r3, [r1, r3]
 8001734:	4619      	mov	r1, r3
 8001736:	2304      	movs	r3, #4
 8001738:	408b      	lsls	r3, r1
 800173a:	43db      	mvns	r3, r3
 800173c:	401a      	ands	r2, r3
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	601a      	str	r2, [r3, #0]

}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	0800402c 	.word	0x0800402c
 8001754:	08004038 	.word	0x08004038

08001758 <LL_TIM_OC_EnablePreload>:
  * @note   OC5PE and OC6PE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d028      	beq.n	80017ba <LL_TIM_OC_EnablePreload+0x62>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2b04      	cmp	r3, #4
 800176c:	d023      	beq.n	80017b6 <LL_TIM_OC_EnablePreload+0x5e>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2b10      	cmp	r3, #16
 8001772:	d01e      	beq.n	80017b2 <LL_TIM_OC_EnablePreload+0x5a>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2b40      	cmp	r3, #64	; 0x40
 8001778:	d019      	beq.n	80017ae <LL_TIM_OC_EnablePreload+0x56>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001780:	d013      	beq.n	80017aa <LL_TIM_OC_EnablePreload+0x52>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001788:	d00d      	beq.n	80017a6 <LL_TIM_OC_EnablePreload+0x4e>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001790:	d007      	beq.n	80017a2 <LL_TIM_OC_EnablePreload+0x4a>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001798:	d101      	bne.n	800179e <LL_TIM_OC_EnablePreload+0x46>
 800179a:	2307      	movs	r3, #7
 800179c:	e00e      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x64>
 800179e:	2308      	movs	r3, #8
 80017a0:	e00c      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x64>
 80017a2:	2306      	movs	r3, #6
 80017a4:	e00a      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x64>
 80017a6:	2305      	movs	r3, #5
 80017a8:	e008      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x64>
 80017aa:	2304      	movs	r3, #4
 80017ac:	e006      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x64>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e004      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x64>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e002      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x64>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <LL_TIM_OC_EnablePreload+0x64>
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3318      	adds	r3, #24
 80017c2:	4619      	mov	r1, r3
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <LL_TIM_OC_EnablePreload+0x98>)
 80017c8:	5cd3      	ldrb	r3, [r2, r3]
 80017ca:	440b      	add	r3, r1
 80017cc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	4907      	ldr	r1, [pc, #28]	; (80017f4 <LL_TIM_OC_EnablePreload+0x9c>)
 80017d6:	5ccb      	ldrb	r3, [r1, r3]
 80017d8:	4619      	mov	r1, r3
 80017da:	2308      	movs	r3, #8
 80017dc:	408b      	lsls	r3, r1
 80017de:	431a      	orrs	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	601a      	str	r2, [r3, #0]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	0800402c 	.word	0x0800402c
 80017f4:	08004038 	.word	0x08004038

080017f8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800180a:	f023 0307 	bic.w	r3, r3, #7
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	609a      	str	r2, [r3, #8]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	605a      	str	r2, [r3, #4]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	609a      	str	r2, [r3, #8]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b094      	sub	sp, #80	; 0x50
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800186e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	2220      	movs	r2, #32
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f001 fe8e 	bl	80035a8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	611a      	str	r2, [r3, #16]
 800189a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff fee1 	bl	8001664 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80018a2:	f7ff fe3d 	bl	8001520 <__NVIC_GetPriorityGrouping>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2200      	movs	r2, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fe8d 	bl	80015cc <NVIC_EncodePriority>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4619      	mov	r1, r3
 80018b6:	201c      	movs	r0, #28
 80018b8:	f7ff fe5e 	bl	8001578 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80018bc:	201c      	movs	r0, #28
 80018be:	f7ff fe3d 	bl	800153c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 80018c2:	f240 331f 	movw	r3, #799	; 0x31f
 80018c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80018c8:	2300      	movs	r3, #0
 80018ca:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 80018cc:	2363      	movs	r3, #99	; 0x63
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80018d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018d8:	4619      	mov	r1, r3
 80018da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018de:	f001 f965 	bl	8002bac <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80018e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018e6:	f7ff fed5 	bl	8001694 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80018ea:	2100      	movs	r1, #0
 80018ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018f0:	f7ff ff82 	bl	80017f8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80018f4:	2101      	movs	r1, #1
 80018f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018fa:	f7ff ff2d 	bl	8001758 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80018fe:	2360      	movs	r3, #96	; 0x60
 8001900:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800190e:	2300      	movs	r3, #0
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	461a      	mov	r2, r3
 8001918:	2101      	movs	r1, #1
 800191a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800191e:	f001 f9b7 	bl	8002c90 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001922:	2101      	movs	r1, #1
 8001924:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001928:	f7ff fec4 	bl	80016b4 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	461a      	mov	r2, r3
 8001936:	2110      	movs	r1, #16
 8001938:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800193c:	f001 f9a8 	bl	8002c90 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001940:	2110      	movs	r1, #16
 8001942:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001946:	f7ff feb5 	bl	80016b4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800194a:	2100      	movs	r1, #0
 800194c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001950:	f7ff ff67 	bl	8001822 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001954:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001958:	f7ff ff76 	bl	8001848 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800195c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001960:	f7ff fe68 	bl	8001634 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001964:	2320      	movs	r3, #32
 8001966:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001968:	2302      	movs	r3, #2
 800196a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001978:	2301      	movs	r3, #1
 800197a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	4619      	mov	r1, r3
 8001980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001984:	f000 fe6a 	bl	800265c <LL_GPIO_Init>

}
 8001988:	bf00      	nop
 800198a:	3750      	adds	r7, #80	; 0x50
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <__NVIC_GetPriorityGrouping>:
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4907      	ldr	r1, [pc, #28]	; (80019e4 <__NVIC_EnableIRQ+0x38>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <__NVIC_SetPriority>:
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	db0a      	blt.n	8001a12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	490c      	ldr	r1, [pc, #48]	; (8001a34 <__NVIC_SetPriority+0x4c>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a10:	e00a      	b.n	8001a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4908      	ldr	r1, [pc, #32]	; (8001a38 <__NVIC_SetPriority+0x50>)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	3b04      	subs	r3, #4
 8001a20:	0112      	lsls	r2, r2, #4
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	440b      	add	r3, r1
 8001a26:	761a      	strb	r2, [r3, #24]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <NVIC_EncodePriority>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f1c3 0307 	rsb	r3, r3, #7
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	bf28      	it	cs
 8001a5a:	2304      	movcs	r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3304      	adds	r3, #4
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d902      	bls.n	8001a6c <NVIC_EncodePriority+0x30>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3b03      	subs	r3, #3
 8001a6a:	e000      	b.n	8001a6e <NVIC_EncodePriority+0x32>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	401a      	ands	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43d9      	mvns	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	4313      	orrs	r3, r2
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	; 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <LL_DMA_EnableChannel>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <LL_DMA_EnableChannel+0x3c>)
 8001ab4:	5cd3      	ldrb	r3, [r2, r3]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	3a01      	subs	r2, #1
 8001ac2:	4907      	ldr	r1, [pc, #28]	; (8001ae0 <LL_DMA_EnableChannel+0x3c>)
 8001ac4:	5c8a      	ldrb	r2, [r1, r2]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	440a      	add	r2, r1
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6013      	str	r3, [r2, #0]
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	08004044 	.word	0x08004044

08001ae4 <LL_DMA_SetDataTransferDirection>:
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	4a0d      	ldr	r2, [pc, #52]	; (8001b2c <LL_DMA_SetDataTransferDirection+0x48>)
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	461a      	mov	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4413      	add	r3, r2
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b04:	f023 0310 	bic.w	r3, r3, #16
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	3a01      	subs	r2, #1
 8001b0c:	4907      	ldr	r1, [pc, #28]	; (8001b2c <LL_DMA_SetDataTransferDirection+0x48>)
 8001b0e:	5c8a      	ldrb	r2, [r1, r2]
 8001b10:	4611      	mov	r1, r2
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	440a      	add	r2, r1
 8001b16:	4611      	mov	r1, r2
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	08004044 	.word	0x08004044

08001b30 <LL_DMA_GetDataTransferDirection>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <LL_DMA_GetDataTransferDirection+0x2c>)
 8001b40:	5cd3      	ldrb	r3, [r2, r3]
 8001b42:	461a      	mov	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4413      	add	r3, r2
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	f244 0310 	movw	r3, #16400	; 0x4010
 8001b4e:	4013      	ands	r3, r2
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	08004044 	.word	0x08004044

08001b60 <LL_DMA_SetMode>:
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <LL_DMA_SetMode+0x44>)
 8001b72:	5cd3      	ldrb	r3, [r2, r3]
 8001b74:	461a      	mov	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 0220 	bic.w	r2, r3, #32
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	4907      	ldr	r1, [pc, #28]	; (8001ba4 <LL_DMA_SetMode+0x44>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	440b      	add	r3, r1
 8001b8e:	4619      	mov	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	08004044 	.word	0x08004044

08001ba8 <LL_DMA_SetPeriphIncMode>:
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	4a0c      	ldr	r2, [pc, #48]	; (8001bec <LL_DMA_SetPeriphIncMode+0x44>)
 8001bba:	5cd3      	ldrb	r3, [r2, r3]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	4907      	ldr	r1, [pc, #28]	; (8001bec <LL_DMA_SetPeriphIncMode+0x44>)
 8001bce:	5ccb      	ldrb	r3, [r1, r3]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	440b      	add	r3, r1
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	08004044 	.word	0x08004044

08001bf0 <LL_DMA_SetMemoryIncMode>:
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <LL_DMA_SetMemoryIncMode+0x44>)
 8001c02:	5cd3      	ldrb	r3, [r2, r3]
 8001c04:	461a      	mov	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4413      	add	r3, r2
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	4907      	ldr	r1, [pc, #28]	; (8001c34 <LL_DMA_SetMemoryIncMode+0x44>)
 8001c16:	5ccb      	ldrb	r3, [r1, r3]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	440b      	add	r3, r1
 8001c1e:	4619      	mov	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	08004044 	.word	0x08004044

08001c38 <LL_DMA_SetPeriphSize>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <LL_DMA_SetPeriphSize+0x44>)
 8001c4a:	5cd3      	ldrb	r3, [r2, r3]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4413      	add	r3, r2
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	4907      	ldr	r1, [pc, #28]	; (8001c7c <LL_DMA_SetPeriphSize+0x44>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	4619      	mov	r1, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	440b      	add	r3, r1
 8001c66:	4619      	mov	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
}
 8001c6e:	bf00      	nop
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	08004044 	.word	0x08004044

08001c80 <LL_DMA_SetMemorySize>:
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <LL_DMA_SetMemorySize+0x44>)
 8001c92:	5cd3      	ldrb	r3, [r2, r3]
 8001c94:	461a      	mov	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4413      	add	r3, r2
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	4907      	ldr	r1, [pc, #28]	; (8001cc4 <LL_DMA_SetMemorySize+0x44>)
 8001ca6:	5ccb      	ldrb	r3, [r1, r3]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	440b      	add	r3, r1
 8001cae:	4619      	mov	r1, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	08004044 	.word	0x08004044

08001cc8 <LL_DMA_SetChannelPriorityLevel>:
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	; (8001d0c <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	4907      	ldr	r1, [pc, #28]	; (8001d0c <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	440b      	add	r3, r1
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	08004044 	.word	0x08004044

08001d10 <LL_DMA_SetDataLength>:
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	4a0c      	ldr	r2, [pc, #48]	; (8001d54 <LL_DMA_SetDataLength+0x44>)
 8001d22:	5cd3      	ldrb	r3, [r2, r3]
 8001d24:	461a      	mov	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4413      	add	r3, r2
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	0c1b      	lsrs	r3, r3, #16
 8001d2e:	041b      	lsls	r3, r3, #16
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	3a01      	subs	r2, #1
 8001d34:	4907      	ldr	r1, [pc, #28]	; (8001d54 <LL_DMA_SetDataLength+0x44>)
 8001d36:	5c8a      	ldrb	r2, [r1, r2]
 8001d38:	4611      	mov	r1, r2
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	440a      	add	r2, r1
 8001d3e:	4611      	mov	r1, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	08004044 	.word	0x08004044

08001d58 <LL_DMA_GetDataLength>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <LL_DMA_GetDataLength+0x28>)
 8001d68:	5cd3      	ldrb	r3, [r2, r3]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	b29b      	uxth	r3, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	08004044 	.word	0x08004044

08001d84 <LL_DMA_ConfigAddresses>:
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	d114      	bne.n	8001dc2 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	4a16      	ldr	r2, [pc, #88]	; (8001df8 <LL_DMA_ConfigAddresses+0x74>)
 8001d9e:	5cd3      	ldrb	r3, [r2, r3]
 8001da0:	461a      	mov	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4413      	add	r3, r2
 8001da6:	461a      	mov	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	4a11      	ldr	r2, [pc, #68]	; (8001df8 <LL_DMA_ConfigAddresses+0x74>)
 8001db2:	5cd3      	ldrb	r3, [r2, r3]
 8001db4:	461a      	mov	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4413      	add	r3, r2
 8001dba:	461a      	mov	r2, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6093      	str	r3, [r2, #8]
}
 8001dc0:	e013      	b.n	8001dea <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <LL_DMA_ConfigAddresses+0x74>)
 8001dc8:	5cd3      	ldrb	r3, [r2, r3]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <LL_DMA_ConfigAddresses+0x74>)
 8001ddc:	5cd3      	ldrb	r3, [r2, r3]
 8001dde:	461a      	mov	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	461a      	mov	r2, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	60d3      	str	r3, [r2, #12]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	08004044 	.word	0x08004044

08001dfc <LL_DMA_SetMemoryAddress>:
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <LL_DMA_SetMemoryAddress+0x2c>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	461a      	mov	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4413      	add	r3, r2
 8001e16:	461a      	mov	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	08004044 	.word	0x08004044

08001e2c <LL_DMA_SetPeriphAddress>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	4a06      	ldr	r2, [pc, #24]	; (8001e58 <LL_DMA_SetPeriphAddress+0x2c>)
 8001e3e:	5cd3      	ldrb	r3, [r2, r3]
 8001e40:	461a      	mov	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4413      	add	r3, r2
 8001e46:	461a      	mov	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6093      	str	r3, [r2, #8]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	08004044 	.word	0x08004044

08001e5c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <LL_DMA_EnableIT_TC+0x3c>)
 8001e6c:	5cd3      	ldrb	r3, [r2, r3]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	3a01      	subs	r2, #1
 8001e7a:	4907      	ldr	r1, [pc, #28]	; (8001e98 <LL_DMA_EnableIT_TC+0x3c>)
 8001e7c:	5c8a      	ldrb	r2, [r1, r2]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	440a      	add	r2, r1
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	6013      	str	r3, [r2, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	08004044 	.word	0x08004044

08001e9c <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <LL_DMA_EnableIT_HT+0x3c>)
 8001eac:	5cd3      	ldrb	r3, [r2, r3]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	3a01      	subs	r2, #1
 8001eba:	4907      	ldr	r1, [pc, #28]	; (8001ed8 <LL_DMA_EnableIT_HT+0x3c>)
 8001ebc:	5c8a      	ldrb	r2, [r1, r2]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	440a      	add	r2, r1
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	6013      	str	r3, [r2, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	08004044 	.word	0x08004044

08001edc <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <LL_DMA_EnableIT_TE+0x3c>)
 8001eec:	5cd3      	ldrb	r3, [r2, r3]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	3a01      	subs	r2, #1
 8001efa:	4907      	ldr	r1, [pc, #28]	; (8001f18 <LL_DMA_EnableIT_TE+0x3c>)
 8001efc:	5c8a      	ldrb	r2, [r1, r2]
 8001efe:	4611      	mov	r1, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	440a      	add	r2, r1
 8001f04:	f043 0308 	orr.w	r3, r3, #8
 8001f08:	6013      	str	r3, [r2, #0]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	08004044 	.word	0x08004044

08001f1c <LL_AHB1_GRP1_EnableClock>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	4907      	ldr	r1, [pc, #28]	; (8001f48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4013      	ands	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	40021000 	.word	0x40021000

08001f4c <LL_APB1_GRP1_EnableClock>:
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f56:	69da      	ldr	r2, [r3, #28]
 8001f58:	4907      	ldr	r1, [pc, #28]	; (8001f78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f62:	69da      	ldr	r2, [r3, #28]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4013      	ands	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	40021000 	.word	0x40021000

08001f7c <LL_USART_Enable>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	601a      	str	r2, [r3, #0]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_USART_ConfigAsyncMode>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	609a      	str	r2, [r3, #8]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	e853 3f00 	ldrex	r3, [r3]
 8001fda:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f043 0310 	orr.w	r3, r3, #16
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	61ba      	str	r2, [r7, #24]
 8001fea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fec:	6979      	ldr	r1, [r7, #20]
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	e841 2300 	strex	r3, r2, [r1]
 8001ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1e9      	bne.n	8001fd0 <LL_USART_EnableIT_IDLE+0x8>
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 800200a:	b480      	push	{r7}
 800200c:	b089      	sub	sp, #36	; 0x24
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3308      	adds	r3, #8
 8002016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	e853 3f00 	ldrex	r3, [r3]
 800201e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002026:	61fb      	str	r3, [r7, #28]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3308      	adds	r3, #8
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	61ba      	str	r2, [r7, #24]
 8002030:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002032:	6979      	ldr	r1, [r7, #20]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	e841 2300 	strex	r3, r2, [r1]
 800203a:	613b      	str	r3, [r7, #16]
   return(result);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1e7      	bne.n	8002012 <LL_USART_DisableIT_CTS+0x8>
}
 8002042:	bf00      	nop
 8002044:	bf00      	nop
 8002046:	3724      	adds	r7, #36	; 0x24
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3308      	adds	r3, #8
 800205c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	e853 3f00 	ldrex	r3, [r3]
 8002064:	60bb      	str	r3, [r7, #8]
   return(result);
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3308      	adds	r3, #8
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	61ba      	str	r2, [r7, #24]
 8002076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002078:	6979      	ldr	r1, [r7, #20]
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	e841 2300 	strex	r3, r2, [r1]
 8002080:	613b      	str	r3, [r7, #16]
   return(result);
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1e7      	bne.n	8002058 <LL_USART_EnableDMAReq_RX+0x8>
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3724      	adds	r7, #36	; 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002096:	b480      	push	{r7}
 8002098:	b089      	sub	sp, #36	; 0x24
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3308      	adds	r3, #8
 80020a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	e853 3f00 	ldrex	r3, [r3]
 80020aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3308      	adds	r3, #8
 80020b8:	69fa      	ldr	r2, [r7, #28]
 80020ba:	61ba      	str	r2, [r7, #24]
 80020bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020be:	6979      	ldr	r1, [r7, #20]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	e841 2300 	strex	r3, r2, [r1]
 80020c6:	613b      	str	r3, [r7, #16]
   return(result);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1e7      	bne.n	800209e <LL_USART_EnableDMAReq_TX+0x8>
}
 80020ce:	bf00      	nop
 80020d0:	bf00      	nop
 80020d2:	3724      	adds	r7, #36	; 0x24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d103      	bne.n	80020f4 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3328      	adds	r3, #40	; 0x28
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	e002      	b.n	80020fa <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3324      	adds	r3, #36	; 0x24
 80020f8:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80020fa:	68fb      	ldr	r3, [r7, #12]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <USART2_RegisterCallback>:
uint8_t bufferUSART2dma[DMA_USART2_BUFFER_SIZE];

static void (* USART2_ProcessData)(const uint8_t* data, uint16_t len) = 0;

void USART2_RegisterCallback(void *callback)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a03      	ldr	r2, [pc, #12]	; (8002128 <USART2_RegisterCallback+0x20>)
 800211a:	6013      	str	r3, [r2, #0]
	}
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	2000008c 	.word	0x2000008c

0800212c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800212c:	b5b0      	push	{r4, r5, r7, lr}
 800212e:	b090      	sub	sp, #64	; 0x40
 8002130:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002132:	f107 031c 	add.w	r3, r7, #28
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
 8002140:	611a      	str	r2, [r3, #16]
 8002142:	615a      	str	r2, [r3, #20]
 8002144:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
 8002154:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002156:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800215a:	f7ff fef7 	bl	8001f4c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800215e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002162:	f7ff fedb 	bl	8001f1c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002166:	f248 0304 	movw	r3, #32772	; 0x8004
 800216a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800216c:	2302      	movs	r3, #2
 800216e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800217c:	2307      	movs	r3, #7
 800217e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	4619      	mov	r1, r3
 8002184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002188:	f000 fa68 	bl	800265c <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800218c:	2200      	movs	r2, #0
 800218e:	2106      	movs	r1, #6
 8002190:	485c      	ldr	r0, [pc, #368]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 8002192:	f7ff fca7 	bl	8001ae4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8002196:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800219a:	2106      	movs	r1, #6
 800219c:	4859      	ldr	r0, [pc, #356]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 800219e:	f7ff fd93 	bl	8001cc8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 80021a2:	2220      	movs	r2, #32
 80021a4:	2106      	movs	r1, #6
 80021a6:	4857      	ldr	r0, [pc, #348]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 80021a8:	f7ff fcda 	bl	8001b60 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2106      	movs	r1, #6
 80021b0:	4854      	ldr	r0, [pc, #336]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 80021b2:	f7ff fcf9 	bl	8001ba8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80021b6:	2280      	movs	r2, #128	; 0x80
 80021b8:	2106      	movs	r1, #6
 80021ba:	4852      	ldr	r0, [pc, #328]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 80021bc:	f7ff fd18 	bl	8001bf0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80021c0:	2200      	movs	r2, #0
 80021c2:	2106      	movs	r1, #6
 80021c4:	484f      	ldr	r0, [pc, #316]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 80021c6:	f7ff fd37 	bl	8001c38 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2106      	movs	r1, #6
 80021ce:	484d      	ldr	r0, [pc, #308]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 80021d0:	f7ff fd56 	bl	8001c80 <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80021d4:	2210      	movs	r2, #16
 80021d6:	2107      	movs	r1, #7
 80021d8:	484a      	ldr	r0, [pc, #296]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 80021da:	f7ff fc83 	bl	8001ae4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80021de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021e2:	2107      	movs	r1, #7
 80021e4:	4847      	ldr	r0, [pc, #284]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 80021e6:	f7ff fd6f 	bl	8001cc8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2107      	movs	r1, #7
 80021ee:	4845      	ldr	r0, [pc, #276]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 80021f0:	f7ff fcb6 	bl	8001b60 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2107      	movs	r1, #7
 80021f8:	4842      	ldr	r0, [pc, #264]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 80021fa:	f7ff fcd5 	bl	8001ba8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	2107      	movs	r1, #7
 8002202:	4840      	ldr	r0, [pc, #256]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 8002204:	f7ff fcf4 	bl	8001bf0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002208:	2200      	movs	r2, #0
 800220a:	2107      	movs	r1, #7
 800220c:	483d      	ldr	r0, [pc, #244]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 800220e:	f7ff fd13 	bl	8001c38 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002212:	2200      	movs	r2, #0
 8002214:	2107      	movs	r1, #7
 8002216:	483b      	ldr	r0, [pc, #236]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 8002218:	f7ff fd32 	bl	8001c80 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800221c:	f7ff fbb8 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8002220:	4603      	mov	r3, r0
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fc08 	bl	8001a3c <NVIC_EncodePriority>
 800222c:	4603      	mov	r3, r0
 800222e:	4619      	mov	r1, r3
 8002230:	2026      	movs	r0, #38	; 0x26
 8002232:	f7ff fbd9 	bl	80019e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002236:	2026      	movs	r0, #38	; 0x26
 8002238:	f7ff fbb8 	bl	80019ac <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 800223c:	2101      	movs	r1, #1
 800223e:	4832      	ldr	r0, [pc, #200]	; (8002308 <MX_USART2_UART_Init+0x1dc>)
 8002240:	f7ff ff4c 	bl	80020dc <LL_USART_DMA_GetRegAddr>
 8002244:	4604      	mov	r4, r0
 8002246:	4d31      	ldr	r5, [pc, #196]	; (800230c <MX_USART2_UART_Init+0x1e0>)
 8002248:	2106      	movs	r1, #6
 800224a:	482e      	ldr	r0, [pc, #184]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 800224c:	f7ff fc70 	bl	8001b30 <LL_DMA_GetDataTransferDirection>
 8002250:	4603      	mov	r3, r0
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	462b      	mov	r3, r5
 8002256:	4622      	mov	r2, r4
 8002258:	2106      	movs	r1, #6
 800225a:	482a      	ldr	r0, [pc, #168]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 800225c:	f7ff fd92 	bl	8001d84 <LL_DMA_ConfigAddresses>
					LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
					(uint32_t)bufferUSART2dma,
					LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002260:	2240      	movs	r2, #64	; 0x40
 8002262:	2106      	movs	r1, #6
 8002264:	4827      	ldr	r0, [pc, #156]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 8002266:	f7ff fd53 	bl	8001d10 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800226a:	2106      	movs	r1, #6
 800226c:	4825      	ldr	r0, [pc, #148]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 800226e:	f7ff fc19 	bl	8001aa4 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8002272:	4825      	ldr	r0, [pc, #148]	; (8002308 <MX_USART2_UART_Init+0x1dc>)
 8002274:	f7ff feec 	bl	8002050 <LL_USART_EnableDMAReq_RX>
  
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8002278:	2106      	movs	r1, #6
 800227a:	4822      	ldr	r0, [pc, #136]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 800227c:	f7ff fdee 	bl	8001e5c <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8002280:	2106      	movs	r1, #6
 8002282:	4820      	ldr	r0, [pc, #128]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 8002284:	f7ff fe0a 	bl	8001e9c <LL_DMA_EnableIT_HT>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002288:	2100      	movs	r1, #0
 800228a:	481f      	ldr	r0, [pc, #124]	; (8002308 <MX_USART2_UART_Init+0x1dc>)
 800228c:	f7ff ff26 	bl	80020dc <LL_USART_DMA_GetRegAddr>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	2107      	movs	r1, #7
 8002296:	481b      	ldr	r0, [pc, #108]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 8002298:	f7ff fdc8 	bl	8001e2c <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 800229c:	481a      	ldr	r0, [pc, #104]	; (8002308 <MX_USART2_UART_Init+0x1dc>)
 800229e:	f7ff fefa 	bl	8002096 <LL_USART_EnableDMAReq_TX>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 80022a2:	2107      	movs	r1, #7
 80022a4:	4817      	ldr	r0, [pc, #92]	; (8002304 <MX_USART2_UART_Init+0x1d8>)
 80022a6:	f7ff fe19 	bl	8001edc <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 80022aa:	2100      	movs	r1, #0
 80022ac:	2026      	movs	r0, #38	; 0x26
 80022ae:	f7ff fb9b 	bl	80019e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80022b2:	2026      	movs	r0, #38	; 0x26
 80022b4:	f7ff fb7a 	bl	80019ac <__NVIC_EnableIRQ>

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80022b8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80022bc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80022ca:	230c      	movs	r3, #12
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80022d2:	2300      	movs	r3, #0
 80022d4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	4619      	mov	r1, r3
 80022dc:	480a      	ldr	r0, [pc, #40]	; (8002308 <MX_USART2_UART_Init+0x1dc>)
 80022de:	f001 f83f 	bl	8003360 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80022e2:	4809      	ldr	r0, [pc, #36]	; (8002308 <MX_USART2_UART_Init+0x1dc>)
 80022e4:	f7ff fe91 	bl	800200a <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 80022e8:	4807      	ldr	r0, [pc, #28]	; (8002308 <MX_USART2_UART_Init+0x1dc>)
 80022ea:	f7ff fe57 	bl	8001f9c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80022ee:	4806      	ldr	r0, [pc, #24]	; (8002308 <MX_USART2_UART_Init+0x1dc>)
 80022f0:	f7ff fe44 	bl	8001f7c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  LL_USART_EnableIT_IDLE(USART2);
 80022f4:	4804      	ldr	r0, [pc, #16]	; (8002308 <MX_USART2_UART_Init+0x1dc>)
 80022f6:	f7ff fe67 	bl	8001fc8 <LL_USART_EnableIT_IDLE>
  /* USER CODE END USART2_Init 2 */

}
 80022fa:	bf00      	nop
 80022fc:	3738      	adds	r7, #56	; 0x38
 80022fe:	46bd      	mov	sp, r7
 8002300:	bdb0      	pop	{r4, r5, r7, pc}
 8002302:	bf00      	nop
 8002304:	40020000 	.word	0x40020000
 8002308:	40004400 	.word	0x40004400
 800230c:	2000009c 	.word	0x2000009c

08002310 <USART2_PutBuffer>:

/* USER CODE BEGIN 1 */
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	461a      	mov	r2, r3
 8002320:	2107      	movs	r1, #7
 8002322:	480a      	ldr	r0, [pc, #40]	; (800234c <USART2_PutBuffer+0x3c>)
 8002324:	f7ff fd6a 	bl	8001dfc <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	461a      	mov	r2, r3
 800232c:	2107      	movs	r1, #7
 800232e:	4807      	ldr	r0, [pc, #28]	; (800234c <USART2_PutBuffer+0x3c>)
 8002330:	f7ff fcee 	bl	8001d10 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8002334:	2107      	movs	r1, #7
 8002336:	4805      	ldr	r0, [pc, #20]	; (800234c <USART2_PutBuffer+0x3c>)
 8002338:	f7ff fd90 	bl	8001e5c <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 800233c:	2107      	movs	r1, #7
 800233e:	4803      	ldr	r0, [pc, #12]	; (800234c <USART2_PutBuffer+0x3c>)
 8002340:	f7ff fbb0 	bl	8001aa4 <LL_DMA_EnableChannel>
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40020000 	.word	0x40020000

08002350 <USART2_CheckDmaReception>:


void USART2_CheckDmaReception(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
	if(USART2_ProcessData == 0) return;
 8002356:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <USART2_CheckDmaReception+0xa0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d043      	beq.n	80023e6 <USART2_CheckDmaReception+0x96>

	static uint16_t old_pos = 0;

	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 800235e:	2106      	movs	r1, #6
 8002360:	4824      	ldr	r0, [pc, #144]	; (80023f4 <USART2_CheckDmaReception+0xa4>)
 8002362:	f7ff fcf9 	bl	8001d58 <LL_DMA_GetDataLength>
 8002366:	4603      	mov	r3, r0
 8002368:	b29b      	uxth	r3, r3
 800236a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800236e:	80fb      	strh	r3, [r7, #6]

	if (pos != old_pos)
 8002370:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <USART2_CheckDmaReception+0xa8>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	88fa      	ldrh	r2, [r7, #6]
 8002376:	429a      	cmp	r2, r3
 8002378:	d02a      	beq.n	80023d0 <USART2_CheckDmaReception+0x80>
	{
		if (pos > old_pos)
 800237a:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <USART2_CheckDmaReception+0xa8>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	88fa      	ldrh	r2, [r7, #6]
 8002380:	429a      	cmp	r2, r3
 8002382:	d90e      	bls.n	80023a2 <USART2_CheckDmaReception+0x52>
		{
			USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 8002384:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <USART2_CheckDmaReception+0xa0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1b      	ldr	r2, [pc, #108]	; (80023f8 <USART2_CheckDmaReception+0xa8>)
 800238a:	8812      	ldrh	r2, [r2, #0]
 800238c:	4611      	mov	r1, r2
 800238e:	4a1b      	ldr	r2, [pc, #108]	; (80023fc <USART2_CheckDmaReception+0xac>)
 8002390:	1888      	adds	r0, r1, r2
 8002392:	4a19      	ldr	r2, [pc, #100]	; (80023f8 <USART2_CheckDmaReception+0xa8>)
 8002394:	8812      	ldrh	r2, [r2, #0]
 8002396:	88f9      	ldrh	r1, [r7, #6]
 8002398:	1a8a      	subs	r2, r1, r2
 800239a:	b292      	uxth	r2, r2
 800239c:	4611      	mov	r1, r2
 800239e:	4798      	blx	r3
 80023a0:	e016      	b.n	80023d0 <USART2_CheckDmaReception+0x80>
		}
		else
		{
			USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 80023a2:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <USART2_CheckDmaReception+0xa0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <USART2_CheckDmaReception+0xa8>)
 80023a8:	8812      	ldrh	r2, [r2, #0]
 80023aa:	4611      	mov	r1, r2
 80023ac:	4a13      	ldr	r2, [pc, #76]	; (80023fc <USART2_CheckDmaReception+0xac>)
 80023ae:	1888      	adds	r0, r1, r2
 80023b0:	4a11      	ldr	r2, [pc, #68]	; (80023f8 <USART2_CheckDmaReception+0xa8>)
 80023b2:	8812      	ldrh	r2, [r2, #0]
 80023b4:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 80023b8:	b292      	uxth	r2, r2
 80023ba:	4611      	mov	r1, r2
 80023bc:	4798      	blx	r3

			if (pos > 0)
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <USART2_CheckDmaReception+0x80>
			{
				USART2_ProcessData(&bufferUSART2dma[0], pos);
 80023c4:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <USART2_CheckDmaReception+0xa0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	88fa      	ldrh	r2, [r7, #6]
 80023ca:	4611      	mov	r1, r2
 80023cc:	480b      	ldr	r0, [pc, #44]	; (80023fc <USART2_CheckDmaReception+0xac>)
 80023ce:	4798      	blx	r3
			}
		}
	}

	old_pos = pos;
 80023d0:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <USART2_CheckDmaReception+0xa8>)
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	8013      	strh	r3, [r2, #0]

	if (old_pos == DMA_USART2_BUFFER_SIZE)
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <USART2_CheckDmaReception+0xa8>)
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	2b40      	cmp	r3, #64	; 0x40
 80023dc:	d104      	bne.n	80023e8 <USART2_CheckDmaReception+0x98>
	{
		old_pos = 0;
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <USART2_CheckDmaReception+0xa8>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	801a      	strh	r2, [r3, #0]
 80023e4:	e000      	b.n	80023e8 <USART2_CheckDmaReception+0x98>
	if(USART2_ProcessData == 0) return;
 80023e6:	bf00      	nop
	}
}
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2000008c 	.word	0x2000008c
 80023f4:	40020000 	.word	0x40020000
 80023f8:	20000090 	.word	0x20000090
 80023fc:	2000009c 	.word	0x2000009c

08002400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002438 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002404:	480d      	ldr	r0, [pc, #52]	; (800243c <LoopForever+0x6>)
  ldr r1, =_edata
 8002406:	490e      	ldr	r1, [pc, #56]	; (8002440 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002408:	4a0e      	ldr	r2, [pc, #56]	; (8002444 <LoopForever+0xe>)
  movs r3, #0
 800240a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800240c:	e002      	b.n	8002414 <LoopCopyDataInit>

0800240e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002412:	3304      	adds	r3, #4

08002414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002418:	d3f9      	bcc.n	800240e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800241a:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <LoopForever+0x12>)
  ldr r4, =_ebss
 800241c:	4c0b      	ldr	r4, [pc, #44]	; (800244c <LoopForever+0x16>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002420:	e001      	b.n	8002426 <LoopFillZerobss>

08002422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002424:	3204      	adds	r2, #4

08002426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002428:	d3fb      	bcc.n	8002422 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800242a:	f7ff f867 	bl	80014fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800242e:	f001 f88f 	bl	8003550 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002432:	f7fe fd1f 	bl	8000e74 <main>

08002436 <LoopForever>:

LoopForever:
    b LoopForever
 8002436:	e7fe      	b.n	8002436 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002438:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800243c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002440:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002444:	08004188 	.word	0x08004188
  ldr r2, =_sbss
 8002448:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800244c:	200000ec 	.word	0x200000ec

08002450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002450:	e7fe      	b.n	8002450 <ADC1_2_IRQHandler>

08002452 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002452:	b480      	push	{r7}
 8002454:	b089      	sub	sp, #36	; 0x24
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	613b      	str	r3, [r7, #16]
  return result;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2103      	movs	r1, #3
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	401a      	ands	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	61bb      	str	r3, [r7, #24]
  return result;
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	431a      	orrs	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	601a      	str	r2, [r3, #0]
}
 80024a4:	bf00      	nop
 80024a6:	3724      	adds	r7, #36	; 0x24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	401a      	ands	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	431a      	orrs	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	605a      	str	r2, [r3, #4]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b089      	sub	sp, #36	; 0x24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	613b      	str	r3, [r7, #16]
  return result;
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2103      	movs	r1, #3
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	401a      	ands	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	61bb      	str	r3, [r7, #24]
  return result;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	fa01 f303 	lsl.w	r3, r1, r3
 800252c:	431a      	orrs	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002532:	bf00      	nop
 8002534:	3724      	adds	r7, #36	; 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800253e:	b480      	push	{r7}
 8002540:	b089      	sub	sp, #36	; 0x24
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	613b      	str	r3, [r7, #16]
  return result;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2103      	movs	r1, #3
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	401a      	ands	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	61bb      	str	r3, [r7, #24]
  return result;
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	fa01 f303 	lsl.w	r3, r1, r3
 800258a:	431a      	orrs	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	60da      	str	r2, [r3, #12]
}
 8002590:	bf00      	nop
 8002592:	3724      	adds	r7, #36	; 0x24
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	; 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a1a      	ldr	r2, [r3, #32]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	613b      	str	r3, [r7, #16]
  return result;
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	210f      	movs	r1, #15
 80025c4:	fa01 f303 	lsl.w	r3, r1, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	401a      	ands	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	61bb      	str	r3, [r7, #24]
  return result;
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	431a      	orrs	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80025ee:	bf00      	nop
 80025f0:	3724      	adds	r7, #36	; 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b089      	sub	sp, #36	; 0x24
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	613b      	str	r3, [r7, #16]
  return result;
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	210f      	movs	r1, #15
 8002624:	fa01 f303 	lsl.w	r3, r1, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	401a      	ands	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	61bb      	str	r3, [r7, #24]
  return result;
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	431a      	orrs	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002650:	bf00      	nop
 8002652:	3724      	adds	r7, #36	; 0x24
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	613b      	str	r3, [r7, #16]
  return result;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800267e:	e051      	b.n	8002724 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	2101      	movs	r1, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d043      	beq.n	800271e <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d003      	beq.n	80026a6 <LL_GPIO_Init+0x4a>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d10e      	bne.n	80026c4 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	461a      	mov	r2, r3
 80026ac:	69b9      	ldr	r1, [r7, #24]
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ff16 	bl	80024e0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	6819      	ldr	r1, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	461a      	mov	r2, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff fef6 	bl	80024b0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	461a      	mov	r2, r3
 80026ca:	69b9      	ldr	r1, [r7, #24]
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff36 	bl	800253e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d11a      	bne.n	8002710 <LL_GPIO_Init+0xb4>
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	60bb      	str	r3, [r7, #8]
  return result;
 80026e6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b07      	cmp	r3, #7
 80026f0:	d807      	bhi.n	8002702 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	461a      	mov	r2, r3
 80026f8:	69b9      	ldr	r1, [r7, #24]
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ff4e 	bl	800259c <LL_GPIO_SetAFPin_0_7>
 8002700:	e006      	b.n	8002710 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	461a      	mov	r2, r3
 8002708:	69b9      	ldr	r1, [r7, #24]
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff ff75 	bl	80025fa <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	461a      	mov	r2, r3
 8002716:	69b9      	ldr	r1, [r7, #24]
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff fe9a 	bl	8002452 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3301      	adds	r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	fa22 f303 	lsr.w	r3, r2, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1a6      	bne.n	8002680 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3720      	adds	r7, #32
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <LL_RCC_HSI_IsReady>:
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <LL_RCC_HSI_IsReady+0x20>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b02      	cmp	r3, #2
 800274a:	bf0c      	ite	eq
 800274c:	2301      	moveq	r3, #1
 800274e:	2300      	movne	r3, #0
 8002750:	b2db      	uxtb	r3, r3
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	40021000 	.word	0x40021000

08002760 <LL_RCC_LSE_IsReady>:
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <LL_RCC_LSE_IsReady+0x20>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b02      	cmp	r3, #2
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	40021000 	.word	0x40021000

08002784 <LL_RCC_GetSysClkSource>:
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <LL_RCC_GetSysClkSource+0x18>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 030c 	and.w	r3, r3, #12
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000

080027a0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <LL_RCC_GetAHBPrescaler+0x18>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000

080027bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000

080027d8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000

080027f4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80027fc:	4b07      	ldr	r3, [pc, #28]	; (800281c <LL_RCC_GetUSARTClockSource+0x28>)
 80027fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002800:	2103      	movs	r1, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	401a      	ands	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	061b      	lsls	r3, r3, #24
 800280e:	4313      	orrs	r3, r2
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	40021000 	.word	0x40021000

08002820 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002824:	4b04      	ldr	r3, [pc, #16]	; (8002838 <LL_RCC_PLL_GetMainSource+0x18>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000

0800283c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000

08002858 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <LL_RCC_PLL_GetPrediv+0x18>)
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	f003 030f 	and.w	r3, r3, #15
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000

08002874 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800287c:	f000 f864 	bl	8002948 <RCC_GetSystemClockFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f882 	bl	8002994 <RCC_GetHCLKClockFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f890 	bl	80029c0 <RCC_GetPCLK1ClockFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f89c 	bl	80029e8 <RCC_GetPCLK2ClockFreq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	60da      	str	r2, [r3, #12]
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d12d      	bne.n	800292e <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ff8e 	bl	80027f4 <LL_RCC_GetUSARTClockSource>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d00a      	beq.n	80028f4 <LL_RCC_GetUSARTClockFreq+0x34>
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d819      	bhi.n	8002916 <LL_RCC_GetUSARTClockFreq+0x56>
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d002      	beq.n	80028ec <LL_RCC_GetUSARTClockFreq+0x2c>
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d00c      	beq.n	8002904 <LL_RCC_GetUSARTClockFreq+0x44>
 80028ea:	e014      	b.n	8002916 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80028ec:	f000 f82c 	bl	8002948 <RCC_GetSystemClockFreq>
 80028f0:	60f8      	str	r0, [r7, #12]
        break;
 80028f2:	e021      	b.n	8002938 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80028f4:	f7ff ff22 	bl	800273c <LL_RCC_HSI_IsReady>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d019      	beq.n	8002932 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <LL_RCC_GetUSARTClockFreq+0x84>)
 8002900:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002902:	e016      	b.n	8002932 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002904:	f7ff ff2c 	bl	8002760 <LL_RCC_LSE_IsReady>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d013      	beq.n	8002936 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 800290e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002912:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002914:	e00f      	b.n	8002936 <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002916:	f000 f817 	bl	8002948 <RCC_GetSystemClockFreq>
 800291a:	4603      	mov	r3, r0
 800291c:	4618      	mov	r0, r3
 800291e:	f000 f839 	bl	8002994 <RCC_GetHCLKClockFreq>
 8002922:	4603      	mov	r3, r0
 8002924:	4618      	mov	r0, r3
 8002926:	f000 f84b 	bl	80029c0 <RCC_GetPCLK1ClockFreq>
 800292a:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 800292c:	e004      	b.n	8002938 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 800292e:	bf00      	nop
 8002930:	e002      	b.n	8002938 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002932:	bf00      	nop
 8002934:	e000      	b.n	8002938 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002936:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002938:	68fb      	ldr	r3, [r7, #12]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	007a1200 	.word	0x007a1200

08002948 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002952:	f7ff ff17 	bl	8002784 <LL_RCC_GetSysClkSource>
 8002956:	4603      	mov	r3, r0
 8002958:	2b08      	cmp	r3, #8
 800295a:	d00c      	beq.n	8002976 <RCC_GetSystemClockFreq+0x2e>
 800295c:	2b08      	cmp	r3, #8
 800295e:	d80e      	bhi.n	800297e <RCC_GetSystemClockFreq+0x36>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <RCC_GetSystemClockFreq+0x22>
 8002964:	2b04      	cmp	r3, #4
 8002966:	d003      	beq.n	8002970 <RCC_GetSystemClockFreq+0x28>
 8002968:	e009      	b.n	800297e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <RCC_GetSystemClockFreq+0x48>)
 800296c:	607b      	str	r3, [r7, #4]
      break;
 800296e:	e009      	b.n	8002984 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002970:	4b07      	ldr	r3, [pc, #28]	; (8002990 <RCC_GetSystemClockFreq+0x48>)
 8002972:	607b      	str	r3, [r7, #4]
      break;
 8002974:	e006      	b.n	8002984 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002976:	f000 f84b 	bl	8002a10 <RCC_PLL_GetFreqDomain_SYS>
 800297a:	6078      	str	r0, [r7, #4]
      break;
 800297c:	e002      	b.n	8002984 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <RCC_GetSystemClockFreq+0x48>)
 8002980:	607b      	str	r3, [r7, #4]
      break;
 8002982:	bf00      	nop
  }

  return frequency;
 8002984:	687b      	ldr	r3, [r7, #4]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	007a1200 	.word	0x007a1200

08002994 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800299c:	f7ff ff00 	bl	80027a0 <LL_RCC_GetAHBPrescaler>
 80029a0:	4603      	mov	r3, r0
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <RCC_GetHCLKClockFreq+0x28>)
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	461a      	mov	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	40d3      	lsrs	r3, r2
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	08004014 	.word	0x08004014

080029c0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80029c8:	f7ff fef8 	bl	80027bc <LL_RCC_GetAPB1Prescaler>
 80029cc:	4603      	mov	r3, r0
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <RCC_GetPCLK1ClockFreq+0x24>)
 80029d2:	5cd3      	ldrb	r3, [r2, r3]
 80029d4:	461a      	mov	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	40d3      	lsrs	r3, r2
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	08004024 	.word	0x08004024

080029e8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80029f0:	f7ff fef2 	bl	80027d8 <LL_RCC_GetAPB2Prescaler>
 80029f4:	4603      	mov	r3, r0
 80029f6:	0adb      	lsrs	r3, r3, #11
 80029f8:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <RCC_GetPCLK2ClockFreq+0x24>)
 80029fa:	5cd3      	ldrb	r3, [r2, r3]
 80029fc:	461a      	mov	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	40d3      	lsrs	r3, r2
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	08004024 	.word	0x08004024

08002a10 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002a1e:	f7ff feff 	bl	8002820 <LL_RCC_PLL_GetMainSource>
 8002a22:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d004      	beq.n	8002a34 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a30:	d003      	beq.n	8002a3a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002a32:	e005      	b.n	8002a40 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002a34:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002a36:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002a38:	e005      	b.n	8002a46 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002a3a:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002a3c:	60fb      	str	r3, [r7, #12]
      break;
 8002a3e:	e002      	b.n	8002a46 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002a40:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002a42:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002a44:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002a46:	f7ff ff07 	bl	8002858 <LL_RCC_PLL_GetPrediv>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	fbb2 f4f3 	udiv	r4, r2, r3
 8002a54:	f7ff fef2 	bl	800283c <LL_RCC_PLL_GetMultiplicator>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a5e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a62:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	fa92 f2a2 	rbit	r2, r2
 8002a6a:	603a      	str	r2, [r7, #0]
  return result;
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	fab2 f282 	clz	r2, r2
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	40d3      	lsrs	r3, r2
 8002a76:	3302      	adds	r3, #2
 8002a78:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd90      	pop	{r4, r7, pc}
 8002a84:	003d0900 	.word	0x003d0900
 8002a88:	007a1200 	.word	0x007a1200

08002a8c <LL_TIM_SetPrescaler>:
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_TIM_SetAutoReload>:
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_TIM_SetRepetitionCounter>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_TIM_OC_SetCompareCH1>:
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <LL_TIM_OC_SetCompareCH2>:
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_TIM_OC_SetCompareCH3>:
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_TIM_OC_SetCompareCH4>:
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_TIM_OC_SetCompareCH5>:
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_TIM_OC_SetCompareCH6>:
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f043 0201 	orr.w	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	615a      	str	r2, [r3, #20]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a2f      	ldr	r2, [pc, #188]	; (8002c7c <LL_TIM_Init+0xd0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d007      	beq.n	8002bd4 <LL_TIM_Init+0x28>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bca:	d003      	beq.n	8002bd4 <LL_TIM_Init+0x28>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a2c      	ldr	r2, [pc, #176]	; (8002c80 <LL_TIM_Init+0xd4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d106      	bne.n	8002be2 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a25      	ldr	r2, [pc, #148]	; (8002c7c <LL_TIM_Init+0xd0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d013      	beq.n	8002c12 <LL_TIM_Init+0x66>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d00f      	beq.n	8002c12 <LL_TIM_Init+0x66>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a22      	ldr	r2, [pc, #136]	; (8002c80 <LL_TIM_Init+0xd4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00b      	beq.n	8002c12 <LL_TIM_Init+0x66>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <LL_TIM_Init+0xd8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <LL_TIM_Init+0x66>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a20      	ldr	r2, [pc, #128]	; (8002c88 <LL_TIM_Init+0xdc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d003      	beq.n	8002c12 <LL_TIM_Init+0x66>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a1f      	ldr	r2, [pc, #124]	; (8002c8c <LL_TIM_Init+0xe0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d106      	bne.n	8002c20 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ff3b 	bl	8002aa8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	4619      	mov	r1, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff ff27 	bl	8002a8c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a0e      	ldr	r2, [pc, #56]	; (8002c7c <LL_TIM_Init+0xd0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00b      	beq.n	8002c5e <LL_TIM_Init+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <LL_TIM_Init+0xd8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <LL_TIM_Init+0xb2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a0d      	ldr	r2, [pc, #52]	; (8002c88 <LL_TIM_Init+0xdc>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d003      	beq.n	8002c5e <LL_TIM_Init+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a0c      	ldr	r2, [pc, #48]	; (8002c8c <LL_TIM_Init+0xe0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d105      	bne.n	8002c6a <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	4619      	mov	r1, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff ff2d 	bl	8002ac4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff ff8e 	bl	8002b8c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40012c00 	.word	0x40012c00
 8002c80:	40000400 	.word	0x40000400
 8002c84:	40014000 	.word	0x40014000
 8002c88:	40014400 	.word	0x40014400
 8002c8c:	40014800 	.word	0x40014800

08002c90 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca6:	d045      	beq.n	8002d34 <LL_TIM_OC_Init+0xa4>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cae:	d848      	bhi.n	8002d42 <LL_TIM_OC_Init+0xb2>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb6:	d036      	beq.n	8002d26 <LL_TIM_OC_Init+0x96>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbe:	d840      	bhi.n	8002d42 <LL_TIM_OC_Init+0xb2>
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc6:	d027      	beq.n	8002d18 <LL_TIM_OC_Init+0x88>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cce:	d838      	bhi.n	8002d42 <LL_TIM_OC_Init+0xb2>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd6:	d018      	beq.n	8002d0a <LL_TIM_OC_Init+0x7a>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cde:	d830      	bhi.n	8002d42 <LL_TIM_OC_Init+0xb2>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d003      	beq.n	8002cee <LL_TIM_OC_Init+0x5e>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	d007      	beq.n	8002cfc <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8002cec:	e029      	b.n	8002d42 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f82d 	bl	8002d50 <OC1Config>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8002cfa:	e023      	b.n	8002d44 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f8a0 	bl	8002e44 <OC2Config>
 8002d04:	4603      	mov	r3, r0
 8002d06:	75fb      	strb	r3, [r7, #23]
      break;
 8002d08:	e01c      	b.n	8002d44 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f917 	bl	8002f40 <OC3Config>
 8002d12:	4603      	mov	r3, r0
 8002d14:	75fb      	strb	r3, [r7, #23]
      break;
 8002d16:	e015      	b.n	8002d44 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f98e 	bl	800303c <OC4Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	75fb      	strb	r3, [r7, #23]
      break;
 8002d24:	e00e      	b.n	8002d44 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f9ed 	bl	8003108 <OC5Config>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	75fb      	strb	r3, [r7, #23]
      break;
 8002d32:	e007      	b.n	8002d44 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fa44 	bl	80031c4 <OC6Config>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d40:	e000      	b.n	8002d44 <LL_TIM_OC_Init+0xb4>
      break;
 8002d42:	bf00      	nop
  }

  return result;
 8002d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f023 0201 	bic.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0303 	bic.w	r3, r3, #3
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f023 0202 	bic.w	r2, r3, #2
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f023 0201 	bic.w	r2, r3, #1
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a20      	ldr	r2, [pc, #128]	; (8002e34 <OC1Config+0xe4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00b      	beq.n	8002dce <OC1Config+0x7e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a1f      	ldr	r2, [pc, #124]	; (8002e38 <OC1Config+0xe8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d007      	beq.n	8002dce <OC1Config+0x7e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a1e      	ldr	r2, [pc, #120]	; (8002e3c <OC1Config+0xec>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d003      	beq.n	8002dce <OC1Config+0x7e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <OC1Config+0xf0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d11e      	bne.n	8002e0c <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f023 0208 	bic.w	r2, r3, #8
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f023 0204 	bic.w	r2, r3, #4
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff fe5e 	bl	8002ae0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40012c00 	.word	0x40012c00
 8002e38:	40014000 	.word	0x40014000
 8002e3c:	40014400 	.word	0x40014400
 8002e40:	40014800 	.word	0x40014800

08002e44 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f023 0210 	bic.w	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	0212      	lsls	r2, r2, #8
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f023 0220 	bic.w	r2, r3, #32
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f023 0210 	bic.w	r2, r3, #16
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a21      	ldr	r2, [pc, #132]	; (8002f30 <OC2Config+0xec>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00b      	beq.n	8002ec8 <OC2Config+0x84>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a20      	ldr	r2, [pc, #128]	; (8002f34 <OC2Config+0xf0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d007      	beq.n	8002ec8 <OC2Config+0x84>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a1f      	ldr	r2, [pc, #124]	; (8002f38 <OC2Config+0xf4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d003      	beq.n	8002ec8 <OC2Config+0x84>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a1e      	ldr	r2, [pc, #120]	; (8002f3c <OC2Config+0xf8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d11f      	bne.n	8002f08 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	019b      	lsls	r3, r3, #6
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	019b      	lsls	r3, r3, #6
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff fdee 	bl	8002afc <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	40014000 	.word	0x40014000
 8002f38:	40014400 	.word	0x40014400
 8002f3c:	40014800 	.word	0x40014800

08002f40 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0303 	bic.w	r3, r3, #3
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a21      	ldr	r2, [pc, #132]	; (800302c <OC3Config+0xec>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00b      	beq.n	8002fc2 <OC3Config+0x82>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a20      	ldr	r2, [pc, #128]	; (8003030 <OC3Config+0xf0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d007      	beq.n	8002fc2 <OC3Config+0x82>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1f      	ldr	r2, [pc, #124]	; (8003034 <OC3Config+0xf4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d003      	beq.n	8002fc2 <OC3Config+0x82>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a1e      	ldr	r2, [pc, #120]	; (8003038 <OC3Config+0xf8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d11f      	bne.n	8003002 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	029b      	lsls	r3, r3, #10
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	029b      	lsls	r3, r3, #10
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	015b      	lsls	r3, r3, #5
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	4619      	mov	r1, r3
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff fd7f 	bl	8002b18 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40012c00 	.word	0x40012c00
 8003030:	40014000 	.word	0x40014000
 8003034:	40014400 	.word	0x40014400
 8003038:	40014800 	.word	0x40014800

0800303c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800306a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	0212      	lsls	r2, r2, #8
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	031b      	lsls	r3, r3, #12
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	031b      	lsls	r3, r3, #12
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <OC4Config+0xbc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00b      	beq.n	80030c0 <OC4Config+0x84>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a14      	ldr	r2, [pc, #80]	; (80030fc <OC4Config+0xc0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d007      	beq.n	80030c0 <OC4Config+0x84>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a13      	ldr	r2, [pc, #76]	; (8003100 <OC4Config+0xc4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d003      	beq.n	80030c0 <OC4Config+0x84>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a12      	ldr	r2, [pc, #72]	; (8003104 <OC4Config+0xc8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d107      	bne.n	80030d0 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	019b      	lsls	r3, r3, #6
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4619      	mov	r1, r3
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff fd26 	bl	8002b34 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	40014000 	.word	0x40014000
 8003100:	40014400 	.word	0x40014400
 8003104:	40014800 	.word	0x40014800

08003108 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003128:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	4313      	orrs	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	041b      	lsls	r3, r3, #16
 8003148:	4313      	orrs	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	041b      	lsls	r3, r3, #16
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a15      	ldr	r2, [pc, #84]	; (80031b4 <OC5Config+0xac>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00b      	beq.n	800317c <OC5Config+0x74>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a14      	ldr	r2, [pc, #80]	; (80031b8 <OC5Config+0xb0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d007      	beq.n	800317c <OC5Config+0x74>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a13      	ldr	r2, [pc, #76]	; (80031bc <OC5Config+0xb4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d003      	beq.n	800317c <OC5Config+0x74>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <OC5Config+0xb8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d109      	bne.n	8003190 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	021b      	lsls	r3, r3, #8
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	4619      	mov	r1, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff fcd7 	bl	8002b50 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40012c00 	.word	0x40012c00
 80031b8:	40014000 	.word	0x40014000
 80031bc:	40014400 	.word	0x40014400
 80031c0:	40014800 	.word	0x40014800

080031c4 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	0212      	lsls	r2, r2, #8
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	051b      	lsls	r3, r3, #20
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	051b      	lsls	r3, r3, #20
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a14      	ldr	r2, [pc, #80]	; (8003270 <OC6Config+0xac>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00b      	beq.n	800323a <OC6Config+0x76>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a13      	ldr	r2, [pc, #76]	; (8003274 <OC6Config+0xb0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d007      	beq.n	800323a <OC6Config+0x76>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a12      	ldr	r2, [pc, #72]	; (8003278 <OC6Config+0xb4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d003      	beq.n	800323a <OC6Config+0x76>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a11      	ldr	r2, [pc, #68]	; (800327c <OC6Config+0xb8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d109      	bne.n	800324e <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	029b      	lsls	r3, r3, #10
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4619      	mov	r1, r3
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff fc88 	bl	8002b70 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40012c00 	.word	0x40012c00
 8003274:	40014000 	.word	0x40014000
 8003278:	40014400 	.word	0x40014400
 800327c:	40014800 	.word	0x40014800

08003280 <LL_USART_IsEnabled>:
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <LL_USART_IsEnabled+0x18>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <LL_USART_IsEnabled+0x1a>
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <LL_USART_SetStopBitsLength>:
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	605a      	str	r2, [r3, #4]
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <LL_USART_SetHWFlowCtrl>:
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	609a      	str	r2, [r3, #8]
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <LL_USART_SetBaudRate>:
{
 80032f2:	b480      	push	{r7}
 80032f4:	b087      	sub	sp, #28
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003306:	d11a      	bne.n	800333e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	005a      	lsls	r2, r3, #1
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	085b      	lsrs	r3, r3, #1
 8003310:	441a      	add	r2, r3
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	fbb2 f3f3 	udiv	r3, r2, r3
 8003318:	b29b      	uxth	r3, r3
 800331a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	085b      	lsrs	r3, r3, #1
 800332a:	b29b      	uxth	r3, r3
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	60da      	str	r2, [r3, #12]
}
 800333c:	e00a      	b.n	8003354 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	085a      	lsrs	r2, r3, #1
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	441a      	add	r2, r3
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	fbb2 f3f3 	udiv	r3, r2, r3
 800334c:	b29b      	uxth	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	60da      	str	r2, [r3, #12]
}
 8003354:	bf00      	nop
 8003356:	371c      	adds	r7, #28
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800336e:	2300      	movs	r3, #0
 8003370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff ff84 	bl	8003280 <LL_USART_IsEnabled>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d14e      	bne.n	800341c <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4b29      	ldr	r3, [pc, #164]	; (8003428 <LL_USART_Init+0xc8>)
 8003384:	4013      	ands	r3, r2
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	6851      	ldr	r1, [r2, #4]
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	68d2      	ldr	r2, [r2, #12]
 800338e:	4311      	orrs	r1, r2
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	6912      	ldr	r2, [r2, #16]
 8003394:	4311      	orrs	r1, r2
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	6992      	ldr	r2, [r2, #24]
 800339a:	430a      	orrs	r2, r1
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	4619      	mov	r1, r3
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ff7c 	bl	80032a6 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	4619      	mov	r1, r3
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff89 	bl	80032cc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a1b      	ldr	r2, [pc, #108]	; (800342c <LL_USART_Init+0xcc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d104      	bne.n	80033cc <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80033c2:	2000      	movs	r0, #0
 80033c4:	f7ff fa7c 	bl	80028c0 <LL_RCC_GetUSARTClockFreq>
 80033c8:	61b8      	str	r0, [r7, #24]
 80033ca:	e016      	b.n	80033fa <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a18      	ldr	r2, [pc, #96]	; (8003430 <LL_USART_Init+0xd0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d107      	bne.n	80033e4 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80033d4:	f107 0308 	add.w	r3, r7, #8
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fa4b 	bl	8002874 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	e00a      	b.n	80033fa <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a13      	ldr	r2, [pc, #76]	; (8003434 <LL_USART_Init+0xd4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d106      	bne.n	80033fa <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80033ec:	f107 0308 	add.w	r3, r7, #8
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fa3f 	bl	8002874 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00d      	beq.n	800341c <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d009      	beq.n	800341c <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8003408:	2300      	movs	r3, #0
 800340a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69b9      	ldr	r1, [r7, #24]
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ff6b 	bl	80032f2 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800341c:	7ffb      	ldrb	r3, [r7, #31]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3720      	adds	r7, #32
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	efff69f3 	.word	0xefff69f3
 800342c:	40013800 	.word	0x40013800
 8003430:	40004400 	.word	0x40004400
 8003434:	40004800 	.word	0x40004800

08003438 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	fbb2 f3f3 	udiv	r3, r2, r3
 800344a:	4a07      	ldr	r2, [pc, #28]	; (8003468 <LL_InitTick+0x30>)
 800344c:	3b01      	subs	r3, #1
 800344e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <LL_InitTick+0x30>)
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003456:	4b04      	ldr	r3, [pc, #16]	; (8003468 <LL_InitTick+0x30>)
 8003458:	2205      	movs	r2, #5
 800345a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	e000e010 	.word	0xe000e010

0800346c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003474:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff ffdd 	bl	8003438 <LL_InitTick>
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <LL_mDelay+0x48>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003496:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349e:	d00c      	beq.n	80034ba <LL_mDelay+0x32>
  {
    Delay++;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3301      	adds	r3, #1
 80034a4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80034a6:	e008      	b.n	80034ba <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <LL_mDelay+0x48>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <LL_mDelay+0x32>
    {
      Delay--;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	607b      	str	r3, [r7, #4]
  while (Delay)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f3      	bne.n	80034a8 <LL_mDelay+0x20>
    }
  }
}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	e000e010 	.word	0xe000e010

080034d4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80034dc:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <LL_SetSystemCoreClock+0x1c>)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6013      	str	r3, [r2, #0]
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20000004 	.word	0x20000004

080034f4 <asiprintf>:
 80034f4:	b40e      	push	{r1, r2, r3}
 80034f6:	b530      	push	{r4, r5, lr}
 80034f8:	b09c      	sub	sp, #112	; 0x70
 80034fa:	ab1f      	add	r3, sp, #124	; 0x7c
 80034fc:	4605      	mov	r5, r0
 80034fe:	490d      	ldr	r1, [pc, #52]	; (8003534 <asiprintf+0x40>)
 8003500:	480d      	ldr	r0, [pc, #52]	; (8003538 <asiprintf+0x44>)
 8003502:	f853 2b04 	ldr.w	r2, [r3], #4
 8003506:	6800      	ldr	r0, [r0, #0]
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	2400      	movs	r4, #0
 800350c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8003510:	a902      	add	r1, sp, #8
 8003512:	9402      	str	r4, [sp, #8]
 8003514:	9404      	str	r4, [sp, #16]
 8003516:	9407      	str	r4, [sp, #28]
 8003518:	f000 f954 	bl	80037c4 <_svfiprintf_r>
 800351c:	2800      	cmp	r0, #0
 800351e:	bfa1      	itttt	ge
 8003520:	9b02      	ldrge	r3, [sp, #8]
 8003522:	701c      	strbge	r4, [r3, #0]
 8003524:	9b06      	ldrge	r3, [sp, #24]
 8003526:	602b      	strge	r3, [r5, #0]
 8003528:	b01c      	add	sp, #112	; 0x70
 800352a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800352e:	b003      	add	sp, #12
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	ffff0288 	.word	0xffff0288
 8003538:	20000008 	.word	0x20000008

0800353c <atoi>:
 800353c:	220a      	movs	r2, #10
 800353e:	2100      	movs	r1, #0
 8003540:	f000 bc9a 	b.w	8003e78 <strtol>

08003544 <__errno>:
 8003544:	4b01      	ldr	r3, [pc, #4]	; (800354c <__errno+0x8>)
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000008 	.word	0x20000008

08003550 <__libc_init_array>:
 8003550:	b570      	push	{r4, r5, r6, lr}
 8003552:	4d0d      	ldr	r5, [pc, #52]	; (8003588 <__libc_init_array+0x38>)
 8003554:	4c0d      	ldr	r4, [pc, #52]	; (800358c <__libc_init_array+0x3c>)
 8003556:	1b64      	subs	r4, r4, r5
 8003558:	10a4      	asrs	r4, r4, #2
 800355a:	2600      	movs	r6, #0
 800355c:	42a6      	cmp	r6, r4
 800355e:	d109      	bne.n	8003574 <__libc_init_array+0x24>
 8003560:	4d0b      	ldr	r5, [pc, #44]	; (8003590 <__libc_init_array+0x40>)
 8003562:	4c0c      	ldr	r4, [pc, #48]	; (8003594 <__libc_init_array+0x44>)
 8003564:	f000 fcf6 	bl	8003f54 <_init>
 8003568:	1b64      	subs	r4, r4, r5
 800356a:	10a4      	asrs	r4, r4, #2
 800356c:	2600      	movs	r6, #0
 800356e:	42a6      	cmp	r6, r4
 8003570:	d105      	bne.n	800357e <__libc_init_array+0x2e>
 8003572:	bd70      	pop	{r4, r5, r6, pc}
 8003574:	f855 3b04 	ldr.w	r3, [r5], #4
 8003578:	4798      	blx	r3
 800357a:	3601      	adds	r6, #1
 800357c:	e7ee      	b.n	800355c <__libc_init_array+0xc>
 800357e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003582:	4798      	blx	r3
 8003584:	3601      	adds	r6, #1
 8003586:	e7f2      	b.n	800356e <__libc_init_array+0x1e>
 8003588:	08004180 	.word	0x08004180
 800358c:	08004180 	.word	0x08004180
 8003590:	08004180 	.word	0x08004180
 8003594:	08004184 	.word	0x08004184

08003598 <free>:
 8003598:	4b02      	ldr	r3, [pc, #8]	; (80035a4 <free+0xc>)
 800359a:	4601      	mov	r1, r0
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	f000 b80b 	b.w	80035b8 <_free_r>
 80035a2:	bf00      	nop
 80035a4:	20000008 	.word	0x20000008

080035a8 <memset>:
 80035a8:	4402      	add	r2, r0
 80035aa:	4603      	mov	r3, r0
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d100      	bne.n	80035b2 <memset+0xa>
 80035b0:	4770      	bx	lr
 80035b2:	f803 1b01 	strb.w	r1, [r3], #1
 80035b6:	e7f9      	b.n	80035ac <memset+0x4>

080035b8 <_free_r>:
 80035b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035ba:	2900      	cmp	r1, #0
 80035bc:	d048      	beq.n	8003650 <_free_r+0x98>
 80035be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035c2:	9001      	str	r0, [sp, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f1a1 0404 	sub.w	r4, r1, #4
 80035ca:	bfb8      	it	lt
 80035cc:	18e4      	addlt	r4, r4, r3
 80035ce:	f000 fc85 	bl	8003edc <__malloc_lock>
 80035d2:	4a20      	ldr	r2, [pc, #128]	; (8003654 <_free_r+0x9c>)
 80035d4:	9801      	ldr	r0, [sp, #4]
 80035d6:	6813      	ldr	r3, [r2, #0]
 80035d8:	4615      	mov	r5, r2
 80035da:	b933      	cbnz	r3, 80035ea <_free_r+0x32>
 80035dc:	6063      	str	r3, [r4, #4]
 80035de:	6014      	str	r4, [r2, #0]
 80035e0:	b003      	add	sp, #12
 80035e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035e6:	f000 bc7f 	b.w	8003ee8 <__malloc_unlock>
 80035ea:	42a3      	cmp	r3, r4
 80035ec:	d90b      	bls.n	8003606 <_free_r+0x4e>
 80035ee:	6821      	ldr	r1, [r4, #0]
 80035f0:	1862      	adds	r2, r4, r1
 80035f2:	4293      	cmp	r3, r2
 80035f4:	bf04      	itt	eq
 80035f6:	681a      	ldreq	r2, [r3, #0]
 80035f8:	685b      	ldreq	r3, [r3, #4]
 80035fa:	6063      	str	r3, [r4, #4]
 80035fc:	bf04      	itt	eq
 80035fe:	1852      	addeq	r2, r2, r1
 8003600:	6022      	streq	r2, [r4, #0]
 8003602:	602c      	str	r4, [r5, #0]
 8003604:	e7ec      	b.n	80035e0 <_free_r+0x28>
 8003606:	461a      	mov	r2, r3
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	b10b      	cbz	r3, 8003610 <_free_r+0x58>
 800360c:	42a3      	cmp	r3, r4
 800360e:	d9fa      	bls.n	8003606 <_free_r+0x4e>
 8003610:	6811      	ldr	r1, [r2, #0]
 8003612:	1855      	adds	r5, r2, r1
 8003614:	42a5      	cmp	r5, r4
 8003616:	d10b      	bne.n	8003630 <_free_r+0x78>
 8003618:	6824      	ldr	r4, [r4, #0]
 800361a:	4421      	add	r1, r4
 800361c:	1854      	adds	r4, r2, r1
 800361e:	42a3      	cmp	r3, r4
 8003620:	6011      	str	r1, [r2, #0]
 8003622:	d1dd      	bne.n	80035e0 <_free_r+0x28>
 8003624:	681c      	ldr	r4, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	6053      	str	r3, [r2, #4]
 800362a:	4421      	add	r1, r4
 800362c:	6011      	str	r1, [r2, #0]
 800362e:	e7d7      	b.n	80035e0 <_free_r+0x28>
 8003630:	d902      	bls.n	8003638 <_free_r+0x80>
 8003632:	230c      	movs	r3, #12
 8003634:	6003      	str	r3, [r0, #0]
 8003636:	e7d3      	b.n	80035e0 <_free_r+0x28>
 8003638:	6825      	ldr	r5, [r4, #0]
 800363a:	1961      	adds	r1, r4, r5
 800363c:	428b      	cmp	r3, r1
 800363e:	bf04      	itt	eq
 8003640:	6819      	ldreq	r1, [r3, #0]
 8003642:	685b      	ldreq	r3, [r3, #4]
 8003644:	6063      	str	r3, [r4, #4]
 8003646:	bf04      	itt	eq
 8003648:	1949      	addeq	r1, r1, r5
 800364a:	6021      	streq	r1, [r4, #0]
 800364c:	6054      	str	r4, [r2, #4]
 800364e:	e7c7      	b.n	80035e0 <_free_r+0x28>
 8003650:	b003      	add	sp, #12
 8003652:	bd30      	pop	{r4, r5, pc}
 8003654:	20000094 	.word	0x20000094

08003658 <_malloc_r>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	1ccd      	adds	r5, r1, #3
 800365c:	f025 0503 	bic.w	r5, r5, #3
 8003660:	3508      	adds	r5, #8
 8003662:	2d0c      	cmp	r5, #12
 8003664:	bf38      	it	cc
 8003666:	250c      	movcc	r5, #12
 8003668:	2d00      	cmp	r5, #0
 800366a:	4606      	mov	r6, r0
 800366c:	db01      	blt.n	8003672 <_malloc_r+0x1a>
 800366e:	42a9      	cmp	r1, r5
 8003670:	d903      	bls.n	800367a <_malloc_r+0x22>
 8003672:	230c      	movs	r3, #12
 8003674:	6033      	str	r3, [r6, #0]
 8003676:	2000      	movs	r0, #0
 8003678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800367a:	f000 fc2f 	bl	8003edc <__malloc_lock>
 800367e:	4921      	ldr	r1, [pc, #132]	; (8003704 <_malloc_r+0xac>)
 8003680:	680a      	ldr	r2, [r1, #0]
 8003682:	4614      	mov	r4, r2
 8003684:	b99c      	cbnz	r4, 80036ae <_malloc_r+0x56>
 8003686:	4f20      	ldr	r7, [pc, #128]	; (8003708 <_malloc_r+0xb0>)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	b923      	cbnz	r3, 8003696 <_malloc_r+0x3e>
 800368c:	4621      	mov	r1, r4
 800368e:	4630      	mov	r0, r6
 8003690:	f000 fb2c 	bl	8003cec <_sbrk_r>
 8003694:	6038      	str	r0, [r7, #0]
 8003696:	4629      	mov	r1, r5
 8003698:	4630      	mov	r0, r6
 800369a:	f000 fb27 	bl	8003cec <_sbrk_r>
 800369e:	1c43      	adds	r3, r0, #1
 80036a0:	d123      	bne.n	80036ea <_malloc_r+0x92>
 80036a2:	230c      	movs	r3, #12
 80036a4:	6033      	str	r3, [r6, #0]
 80036a6:	4630      	mov	r0, r6
 80036a8:	f000 fc1e 	bl	8003ee8 <__malloc_unlock>
 80036ac:	e7e3      	b.n	8003676 <_malloc_r+0x1e>
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	1b5b      	subs	r3, r3, r5
 80036b2:	d417      	bmi.n	80036e4 <_malloc_r+0x8c>
 80036b4:	2b0b      	cmp	r3, #11
 80036b6:	d903      	bls.n	80036c0 <_malloc_r+0x68>
 80036b8:	6023      	str	r3, [r4, #0]
 80036ba:	441c      	add	r4, r3
 80036bc:	6025      	str	r5, [r4, #0]
 80036be:	e004      	b.n	80036ca <_malloc_r+0x72>
 80036c0:	6863      	ldr	r3, [r4, #4]
 80036c2:	42a2      	cmp	r2, r4
 80036c4:	bf0c      	ite	eq
 80036c6:	600b      	streq	r3, [r1, #0]
 80036c8:	6053      	strne	r3, [r2, #4]
 80036ca:	4630      	mov	r0, r6
 80036cc:	f000 fc0c 	bl	8003ee8 <__malloc_unlock>
 80036d0:	f104 000b 	add.w	r0, r4, #11
 80036d4:	1d23      	adds	r3, r4, #4
 80036d6:	f020 0007 	bic.w	r0, r0, #7
 80036da:	1ac2      	subs	r2, r0, r3
 80036dc:	d0cc      	beq.n	8003678 <_malloc_r+0x20>
 80036de:	1a1b      	subs	r3, r3, r0
 80036e0:	50a3      	str	r3, [r4, r2]
 80036e2:	e7c9      	b.n	8003678 <_malloc_r+0x20>
 80036e4:	4622      	mov	r2, r4
 80036e6:	6864      	ldr	r4, [r4, #4]
 80036e8:	e7cc      	b.n	8003684 <_malloc_r+0x2c>
 80036ea:	1cc4      	adds	r4, r0, #3
 80036ec:	f024 0403 	bic.w	r4, r4, #3
 80036f0:	42a0      	cmp	r0, r4
 80036f2:	d0e3      	beq.n	80036bc <_malloc_r+0x64>
 80036f4:	1a21      	subs	r1, r4, r0
 80036f6:	4630      	mov	r0, r6
 80036f8:	f000 faf8 	bl	8003cec <_sbrk_r>
 80036fc:	3001      	adds	r0, #1
 80036fe:	d1dd      	bne.n	80036bc <_malloc_r+0x64>
 8003700:	e7cf      	b.n	80036a2 <_malloc_r+0x4a>
 8003702:	bf00      	nop
 8003704:	20000094 	.word	0x20000094
 8003708:	20000098 	.word	0x20000098

0800370c <__ssputs_r>:
 800370c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003710:	688e      	ldr	r6, [r1, #8]
 8003712:	429e      	cmp	r6, r3
 8003714:	4682      	mov	sl, r0
 8003716:	460c      	mov	r4, r1
 8003718:	4690      	mov	r8, r2
 800371a:	461f      	mov	r7, r3
 800371c:	d838      	bhi.n	8003790 <__ssputs_r+0x84>
 800371e:	898a      	ldrh	r2, [r1, #12]
 8003720:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003724:	d032      	beq.n	800378c <__ssputs_r+0x80>
 8003726:	6825      	ldr	r5, [r4, #0]
 8003728:	6909      	ldr	r1, [r1, #16]
 800372a:	eba5 0901 	sub.w	r9, r5, r1
 800372e:	6965      	ldr	r5, [r4, #20]
 8003730:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003738:	3301      	adds	r3, #1
 800373a:	444b      	add	r3, r9
 800373c:	106d      	asrs	r5, r5, #1
 800373e:	429d      	cmp	r5, r3
 8003740:	bf38      	it	cc
 8003742:	461d      	movcc	r5, r3
 8003744:	0553      	lsls	r3, r2, #21
 8003746:	d531      	bpl.n	80037ac <__ssputs_r+0xa0>
 8003748:	4629      	mov	r1, r5
 800374a:	f7ff ff85 	bl	8003658 <_malloc_r>
 800374e:	4606      	mov	r6, r0
 8003750:	b950      	cbnz	r0, 8003768 <__ssputs_r+0x5c>
 8003752:	230c      	movs	r3, #12
 8003754:	f8ca 3000 	str.w	r3, [sl]
 8003758:	89a3      	ldrh	r3, [r4, #12]
 800375a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800375e:	81a3      	strh	r3, [r4, #12]
 8003760:	f04f 30ff 	mov.w	r0, #4294967295
 8003764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003768:	6921      	ldr	r1, [r4, #16]
 800376a:	464a      	mov	r2, r9
 800376c:	f000 fb8e 	bl	8003e8c <memcpy>
 8003770:	89a3      	ldrh	r3, [r4, #12]
 8003772:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800377a:	81a3      	strh	r3, [r4, #12]
 800377c:	6126      	str	r6, [r4, #16]
 800377e:	6165      	str	r5, [r4, #20]
 8003780:	444e      	add	r6, r9
 8003782:	eba5 0509 	sub.w	r5, r5, r9
 8003786:	6026      	str	r6, [r4, #0]
 8003788:	60a5      	str	r5, [r4, #8]
 800378a:	463e      	mov	r6, r7
 800378c:	42be      	cmp	r6, r7
 800378e:	d900      	bls.n	8003792 <__ssputs_r+0x86>
 8003790:	463e      	mov	r6, r7
 8003792:	4632      	mov	r2, r6
 8003794:	6820      	ldr	r0, [r4, #0]
 8003796:	4641      	mov	r1, r8
 8003798:	f000 fb86 	bl	8003ea8 <memmove>
 800379c:	68a3      	ldr	r3, [r4, #8]
 800379e:	6822      	ldr	r2, [r4, #0]
 80037a0:	1b9b      	subs	r3, r3, r6
 80037a2:	4432      	add	r2, r6
 80037a4:	60a3      	str	r3, [r4, #8]
 80037a6:	6022      	str	r2, [r4, #0]
 80037a8:	2000      	movs	r0, #0
 80037aa:	e7db      	b.n	8003764 <__ssputs_r+0x58>
 80037ac:	462a      	mov	r2, r5
 80037ae:	f000 fba1 	bl	8003ef4 <_realloc_r>
 80037b2:	4606      	mov	r6, r0
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d1e1      	bne.n	800377c <__ssputs_r+0x70>
 80037b8:	6921      	ldr	r1, [r4, #16]
 80037ba:	4650      	mov	r0, sl
 80037bc:	f7ff fefc 	bl	80035b8 <_free_r>
 80037c0:	e7c7      	b.n	8003752 <__ssputs_r+0x46>
	...

080037c4 <_svfiprintf_r>:
 80037c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c8:	4698      	mov	r8, r3
 80037ca:	898b      	ldrh	r3, [r1, #12]
 80037cc:	061b      	lsls	r3, r3, #24
 80037ce:	b09d      	sub	sp, #116	; 0x74
 80037d0:	4607      	mov	r7, r0
 80037d2:	460d      	mov	r5, r1
 80037d4:	4614      	mov	r4, r2
 80037d6:	d50e      	bpl.n	80037f6 <_svfiprintf_r+0x32>
 80037d8:	690b      	ldr	r3, [r1, #16]
 80037da:	b963      	cbnz	r3, 80037f6 <_svfiprintf_r+0x32>
 80037dc:	2140      	movs	r1, #64	; 0x40
 80037de:	f7ff ff3b 	bl	8003658 <_malloc_r>
 80037e2:	6028      	str	r0, [r5, #0]
 80037e4:	6128      	str	r0, [r5, #16]
 80037e6:	b920      	cbnz	r0, 80037f2 <_svfiprintf_r+0x2e>
 80037e8:	230c      	movs	r3, #12
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	f04f 30ff 	mov.w	r0, #4294967295
 80037f0:	e0d1      	b.n	8003996 <_svfiprintf_r+0x1d2>
 80037f2:	2340      	movs	r3, #64	; 0x40
 80037f4:	616b      	str	r3, [r5, #20]
 80037f6:	2300      	movs	r3, #0
 80037f8:	9309      	str	r3, [sp, #36]	; 0x24
 80037fa:	2320      	movs	r3, #32
 80037fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003800:	f8cd 800c 	str.w	r8, [sp, #12]
 8003804:	2330      	movs	r3, #48	; 0x30
 8003806:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80039b0 <_svfiprintf_r+0x1ec>
 800380a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800380e:	f04f 0901 	mov.w	r9, #1
 8003812:	4623      	mov	r3, r4
 8003814:	469a      	mov	sl, r3
 8003816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800381a:	b10a      	cbz	r2, 8003820 <_svfiprintf_r+0x5c>
 800381c:	2a25      	cmp	r2, #37	; 0x25
 800381e:	d1f9      	bne.n	8003814 <_svfiprintf_r+0x50>
 8003820:	ebba 0b04 	subs.w	fp, sl, r4
 8003824:	d00b      	beq.n	800383e <_svfiprintf_r+0x7a>
 8003826:	465b      	mov	r3, fp
 8003828:	4622      	mov	r2, r4
 800382a:	4629      	mov	r1, r5
 800382c:	4638      	mov	r0, r7
 800382e:	f7ff ff6d 	bl	800370c <__ssputs_r>
 8003832:	3001      	adds	r0, #1
 8003834:	f000 80aa 	beq.w	800398c <_svfiprintf_r+0x1c8>
 8003838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800383a:	445a      	add	r2, fp
 800383c:	9209      	str	r2, [sp, #36]	; 0x24
 800383e:	f89a 3000 	ldrb.w	r3, [sl]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 80a2 	beq.w	800398c <_svfiprintf_r+0x1c8>
 8003848:	2300      	movs	r3, #0
 800384a:	f04f 32ff 	mov.w	r2, #4294967295
 800384e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003852:	f10a 0a01 	add.w	sl, sl, #1
 8003856:	9304      	str	r3, [sp, #16]
 8003858:	9307      	str	r3, [sp, #28]
 800385a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800385e:	931a      	str	r3, [sp, #104]	; 0x68
 8003860:	4654      	mov	r4, sl
 8003862:	2205      	movs	r2, #5
 8003864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003868:	4851      	ldr	r0, [pc, #324]	; (80039b0 <_svfiprintf_r+0x1ec>)
 800386a:	f7fc fcb1 	bl	80001d0 <memchr>
 800386e:	9a04      	ldr	r2, [sp, #16]
 8003870:	b9d8      	cbnz	r0, 80038aa <_svfiprintf_r+0xe6>
 8003872:	06d0      	lsls	r0, r2, #27
 8003874:	bf44      	itt	mi
 8003876:	2320      	movmi	r3, #32
 8003878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800387c:	0711      	lsls	r1, r2, #28
 800387e:	bf44      	itt	mi
 8003880:	232b      	movmi	r3, #43	; 0x2b
 8003882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003886:	f89a 3000 	ldrb.w	r3, [sl]
 800388a:	2b2a      	cmp	r3, #42	; 0x2a
 800388c:	d015      	beq.n	80038ba <_svfiprintf_r+0xf6>
 800388e:	9a07      	ldr	r2, [sp, #28]
 8003890:	4654      	mov	r4, sl
 8003892:	2000      	movs	r0, #0
 8003894:	f04f 0c0a 	mov.w	ip, #10
 8003898:	4621      	mov	r1, r4
 800389a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800389e:	3b30      	subs	r3, #48	; 0x30
 80038a0:	2b09      	cmp	r3, #9
 80038a2:	d94e      	bls.n	8003942 <_svfiprintf_r+0x17e>
 80038a4:	b1b0      	cbz	r0, 80038d4 <_svfiprintf_r+0x110>
 80038a6:	9207      	str	r2, [sp, #28]
 80038a8:	e014      	b.n	80038d4 <_svfiprintf_r+0x110>
 80038aa:	eba0 0308 	sub.w	r3, r0, r8
 80038ae:	fa09 f303 	lsl.w	r3, r9, r3
 80038b2:	4313      	orrs	r3, r2
 80038b4:	9304      	str	r3, [sp, #16]
 80038b6:	46a2      	mov	sl, r4
 80038b8:	e7d2      	b.n	8003860 <_svfiprintf_r+0x9c>
 80038ba:	9b03      	ldr	r3, [sp, #12]
 80038bc:	1d19      	adds	r1, r3, #4
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	9103      	str	r1, [sp, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bfbb      	ittet	lt
 80038c6:	425b      	neglt	r3, r3
 80038c8:	f042 0202 	orrlt.w	r2, r2, #2
 80038cc:	9307      	strge	r3, [sp, #28]
 80038ce:	9307      	strlt	r3, [sp, #28]
 80038d0:	bfb8      	it	lt
 80038d2:	9204      	strlt	r2, [sp, #16]
 80038d4:	7823      	ldrb	r3, [r4, #0]
 80038d6:	2b2e      	cmp	r3, #46	; 0x2e
 80038d8:	d10c      	bne.n	80038f4 <_svfiprintf_r+0x130>
 80038da:	7863      	ldrb	r3, [r4, #1]
 80038dc:	2b2a      	cmp	r3, #42	; 0x2a
 80038de:	d135      	bne.n	800394c <_svfiprintf_r+0x188>
 80038e0:	9b03      	ldr	r3, [sp, #12]
 80038e2:	1d1a      	adds	r2, r3, #4
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	9203      	str	r2, [sp, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bfb8      	it	lt
 80038ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80038f0:	3402      	adds	r4, #2
 80038f2:	9305      	str	r3, [sp, #20]
 80038f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80039c0 <_svfiprintf_r+0x1fc>
 80038f8:	7821      	ldrb	r1, [r4, #0]
 80038fa:	2203      	movs	r2, #3
 80038fc:	4650      	mov	r0, sl
 80038fe:	f7fc fc67 	bl	80001d0 <memchr>
 8003902:	b140      	cbz	r0, 8003916 <_svfiprintf_r+0x152>
 8003904:	2340      	movs	r3, #64	; 0x40
 8003906:	eba0 000a 	sub.w	r0, r0, sl
 800390a:	fa03 f000 	lsl.w	r0, r3, r0
 800390e:	9b04      	ldr	r3, [sp, #16]
 8003910:	4303      	orrs	r3, r0
 8003912:	3401      	adds	r4, #1
 8003914:	9304      	str	r3, [sp, #16]
 8003916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800391a:	4826      	ldr	r0, [pc, #152]	; (80039b4 <_svfiprintf_r+0x1f0>)
 800391c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003920:	2206      	movs	r2, #6
 8003922:	f7fc fc55 	bl	80001d0 <memchr>
 8003926:	2800      	cmp	r0, #0
 8003928:	d038      	beq.n	800399c <_svfiprintf_r+0x1d8>
 800392a:	4b23      	ldr	r3, [pc, #140]	; (80039b8 <_svfiprintf_r+0x1f4>)
 800392c:	bb1b      	cbnz	r3, 8003976 <_svfiprintf_r+0x1b2>
 800392e:	9b03      	ldr	r3, [sp, #12]
 8003930:	3307      	adds	r3, #7
 8003932:	f023 0307 	bic.w	r3, r3, #7
 8003936:	3308      	adds	r3, #8
 8003938:	9303      	str	r3, [sp, #12]
 800393a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800393c:	4433      	add	r3, r6
 800393e:	9309      	str	r3, [sp, #36]	; 0x24
 8003940:	e767      	b.n	8003812 <_svfiprintf_r+0x4e>
 8003942:	fb0c 3202 	mla	r2, ip, r2, r3
 8003946:	460c      	mov	r4, r1
 8003948:	2001      	movs	r0, #1
 800394a:	e7a5      	b.n	8003898 <_svfiprintf_r+0xd4>
 800394c:	2300      	movs	r3, #0
 800394e:	3401      	adds	r4, #1
 8003950:	9305      	str	r3, [sp, #20]
 8003952:	4619      	mov	r1, r3
 8003954:	f04f 0c0a 	mov.w	ip, #10
 8003958:	4620      	mov	r0, r4
 800395a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800395e:	3a30      	subs	r2, #48	; 0x30
 8003960:	2a09      	cmp	r2, #9
 8003962:	d903      	bls.n	800396c <_svfiprintf_r+0x1a8>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0c5      	beq.n	80038f4 <_svfiprintf_r+0x130>
 8003968:	9105      	str	r1, [sp, #20]
 800396a:	e7c3      	b.n	80038f4 <_svfiprintf_r+0x130>
 800396c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003970:	4604      	mov	r4, r0
 8003972:	2301      	movs	r3, #1
 8003974:	e7f0      	b.n	8003958 <_svfiprintf_r+0x194>
 8003976:	ab03      	add	r3, sp, #12
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	462a      	mov	r2, r5
 800397c:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <_svfiprintf_r+0x1f8>)
 800397e:	a904      	add	r1, sp, #16
 8003980:	4638      	mov	r0, r7
 8003982:	f3af 8000 	nop.w
 8003986:	1c42      	adds	r2, r0, #1
 8003988:	4606      	mov	r6, r0
 800398a:	d1d6      	bne.n	800393a <_svfiprintf_r+0x176>
 800398c:	89ab      	ldrh	r3, [r5, #12]
 800398e:	065b      	lsls	r3, r3, #25
 8003990:	f53f af2c 	bmi.w	80037ec <_svfiprintf_r+0x28>
 8003994:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003996:	b01d      	add	sp, #116	; 0x74
 8003998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800399c:	ab03      	add	r3, sp, #12
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	462a      	mov	r2, r5
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <_svfiprintf_r+0x1f8>)
 80039a4:	a904      	add	r1, sp, #16
 80039a6:	4638      	mov	r0, r7
 80039a8:	f000 f87a 	bl	8003aa0 <_printf_i>
 80039ac:	e7eb      	b.n	8003986 <_svfiprintf_r+0x1c2>
 80039ae:	bf00      	nop
 80039b0:	0800404b 	.word	0x0800404b
 80039b4:	08004055 	.word	0x08004055
 80039b8:	00000000 	.word	0x00000000
 80039bc:	0800370d 	.word	0x0800370d
 80039c0:	08004051 	.word	0x08004051

080039c4 <_printf_common>:
 80039c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039c8:	4616      	mov	r6, r2
 80039ca:	4699      	mov	r9, r3
 80039cc:	688a      	ldr	r2, [r1, #8]
 80039ce:	690b      	ldr	r3, [r1, #16]
 80039d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039d4:	4293      	cmp	r3, r2
 80039d6:	bfb8      	it	lt
 80039d8:	4613      	movlt	r3, r2
 80039da:	6033      	str	r3, [r6, #0]
 80039dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039e0:	4607      	mov	r7, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	b10a      	cbz	r2, 80039ea <_printf_common+0x26>
 80039e6:	3301      	adds	r3, #1
 80039e8:	6033      	str	r3, [r6, #0]
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	0699      	lsls	r1, r3, #26
 80039ee:	bf42      	ittt	mi
 80039f0:	6833      	ldrmi	r3, [r6, #0]
 80039f2:	3302      	addmi	r3, #2
 80039f4:	6033      	strmi	r3, [r6, #0]
 80039f6:	6825      	ldr	r5, [r4, #0]
 80039f8:	f015 0506 	ands.w	r5, r5, #6
 80039fc:	d106      	bne.n	8003a0c <_printf_common+0x48>
 80039fe:	f104 0a19 	add.w	sl, r4, #25
 8003a02:	68e3      	ldr	r3, [r4, #12]
 8003a04:	6832      	ldr	r2, [r6, #0]
 8003a06:	1a9b      	subs	r3, r3, r2
 8003a08:	42ab      	cmp	r3, r5
 8003a0a:	dc26      	bgt.n	8003a5a <_printf_common+0x96>
 8003a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a10:	1e13      	subs	r3, r2, #0
 8003a12:	6822      	ldr	r2, [r4, #0]
 8003a14:	bf18      	it	ne
 8003a16:	2301      	movne	r3, #1
 8003a18:	0692      	lsls	r2, r2, #26
 8003a1a:	d42b      	bmi.n	8003a74 <_printf_common+0xb0>
 8003a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a20:	4649      	mov	r1, r9
 8003a22:	4638      	mov	r0, r7
 8003a24:	47c0      	blx	r8
 8003a26:	3001      	adds	r0, #1
 8003a28:	d01e      	beq.n	8003a68 <_printf_common+0xa4>
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	68e5      	ldr	r5, [r4, #12]
 8003a2e:	6832      	ldr	r2, [r6, #0]
 8003a30:	f003 0306 	and.w	r3, r3, #6
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	bf08      	it	eq
 8003a38:	1aad      	subeq	r5, r5, r2
 8003a3a:	68a3      	ldr	r3, [r4, #8]
 8003a3c:	6922      	ldr	r2, [r4, #16]
 8003a3e:	bf0c      	ite	eq
 8003a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a44:	2500      	movne	r5, #0
 8003a46:	4293      	cmp	r3, r2
 8003a48:	bfc4      	itt	gt
 8003a4a:	1a9b      	subgt	r3, r3, r2
 8003a4c:	18ed      	addgt	r5, r5, r3
 8003a4e:	2600      	movs	r6, #0
 8003a50:	341a      	adds	r4, #26
 8003a52:	42b5      	cmp	r5, r6
 8003a54:	d11a      	bne.n	8003a8c <_printf_common+0xc8>
 8003a56:	2000      	movs	r0, #0
 8003a58:	e008      	b.n	8003a6c <_printf_common+0xa8>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	4652      	mov	r2, sl
 8003a5e:	4649      	mov	r1, r9
 8003a60:	4638      	mov	r0, r7
 8003a62:	47c0      	blx	r8
 8003a64:	3001      	adds	r0, #1
 8003a66:	d103      	bne.n	8003a70 <_printf_common+0xac>
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a70:	3501      	adds	r5, #1
 8003a72:	e7c6      	b.n	8003a02 <_printf_common+0x3e>
 8003a74:	18e1      	adds	r1, r4, r3
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	2030      	movs	r0, #48	; 0x30
 8003a7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a7e:	4422      	add	r2, r4
 8003a80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a88:	3302      	adds	r3, #2
 8003a8a:	e7c7      	b.n	8003a1c <_printf_common+0x58>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	4622      	mov	r2, r4
 8003a90:	4649      	mov	r1, r9
 8003a92:	4638      	mov	r0, r7
 8003a94:	47c0      	blx	r8
 8003a96:	3001      	adds	r0, #1
 8003a98:	d0e6      	beq.n	8003a68 <_printf_common+0xa4>
 8003a9a:	3601      	adds	r6, #1
 8003a9c:	e7d9      	b.n	8003a52 <_printf_common+0x8e>
	...

08003aa0 <_printf_i>:
 8003aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	4691      	mov	r9, r2
 8003aa8:	7e27      	ldrb	r7, [r4, #24]
 8003aaa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003aac:	2f78      	cmp	r7, #120	; 0x78
 8003aae:	4680      	mov	r8, r0
 8003ab0:	469a      	mov	sl, r3
 8003ab2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ab6:	d807      	bhi.n	8003ac8 <_printf_i+0x28>
 8003ab8:	2f62      	cmp	r7, #98	; 0x62
 8003aba:	d80a      	bhi.n	8003ad2 <_printf_i+0x32>
 8003abc:	2f00      	cmp	r7, #0
 8003abe:	f000 80d8 	beq.w	8003c72 <_printf_i+0x1d2>
 8003ac2:	2f58      	cmp	r7, #88	; 0x58
 8003ac4:	f000 80a3 	beq.w	8003c0e <_printf_i+0x16e>
 8003ac8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ad0:	e03a      	b.n	8003b48 <_printf_i+0xa8>
 8003ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ad6:	2b15      	cmp	r3, #21
 8003ad8:	d8f6      	bhi.n	8003ac8 <_printf_i+0x28>
 8003ada:	a001      	add	r0, pc, #4	; (adr r0, 8003ae0 <_printf_i+0x40>)
 8003adc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ae0:	08003b39 	.word	0x08003b39
 8003ae4:	08003b4d 	.word	0x08003b4d
 8003ae8:	08003ac9 	.word	0x08003ac9
 8003aec:	08003ac9 	.word	0x08003ac9
 8003af0:	08003ac9 	.word	0x08003ac9
 8003af4:	08003ac9 	.word	0x08003ac9
 8003af8:	08003b4d 	.word	0x08003b4d
 8003afc:	08003ac9 	.word	0x08003ac9
 8003b00:	08003ac9 	.word	0x08003ac9
 8003b04:	08003ac9 	.word	0x08003ac9
 8003b08:	08003ac9 	.word	0x08003ac9
 8003b0c:	08003c59 	.word	0x08003c59
 8003b10:	08003b7d 	.word	0x08003b7d
 8003b14:	08003c3b 	.word	0x08003c3b
 8003b18:	08003ac9 	.word	0x08003ac9
 8003b1c:	08003ac9 	.word	0x08003ac9
 8003b20:	08003c7b 	.word	0x08003c7b
 8003b24:	08003ac9 	.word	0x08003ac9
 8003b28:	08003b7d 	.word	0x08003b7d
 8003b2c:	08003ac9 	.word	0x08003ac9
 8003b30:	08003ac9 	.word	0x08003ac9
 8003b34:	08003c43 	.word	0x08003c43
 8003b38:	680b      	ldr	r3, [r1, #0]
 8003b3a:	1d1a      	adds	r2, r3, #4
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	600a      	str	r2, [r1, #0]
 8003b40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0a3      	b.n	8003c94 <_printf_i+0x1f4>
 8003b4c:	6825      	ldr	r5, [r4, #0]
 8003b4e:	6808      	ldr	r0, [r1, #0]
 8003b50:	062e      	lsls	r6, r5, #24
 8003b52:	f100 0304 	add.w	r3, r0, #4
 8003b56:	d50a      	bpl.n	8003b6e <_printf_i+0xce>
 8003b58:	6805      	ldr	r5, [r0, #0]
 8003b5a:	600b      	str	r3, [r1, #0]
 8003b5c:	2d00      	cmp	r5, #0
 8003b5e:	da03      	bge.n	8003b68 <_printf_i+0xc8>
 8003b60:	232d      	movs	r3, #45	; 0x2d
 8003b62:	426d      	negs	r5, r5
 8003b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b68:	485e      	ldr	r0, [pc, #376]	; (8003ce4 <_printf_i+0x244>)
 8003b6a:	230a      	movs	r3, #10
 8003b6c:	e019      	b.n	8003ba2 <_printf_i+0x102>
 8003b6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b72:	6805      	ldr	r5, [r0, #0]
 8003b74:	600b      	str	r3, [r1, #0]
 8003b76:	bf18      	it	ne
 8003b78:	b22d      	sxthne	r5, r5
 8003b7a:	e7ef      	b.n	8003b5c <_printf_i+0xbc>
 8003b7c:	680b      	ldr	r3, [r1, #0]
 8003b7e:	6825      	ldr	r5, [r4, #0]
 8003b80:	1d18      	adds	r0, r3, #4
 8003b82:	6008      	str	r0, [r1, #0]
 8003b84:	0628      	lsls	r0, r5, #24
 8003b86:	d501      	bpl.n	8003b8c <_printf_i+0xec>
 8003b88:	681d      	ldr	r5, [r3, #0]
 8003b8a:	e002      	b.n	8003b92 <_printf_i+0xf2>
 8003b8c:	0669      	lsls	r1, r5, #25
 8003b8e:	d5fb      	bpl.n	8003b88 <_printf_i+0xe8>
 8003b90:	881d      	ldrh	r5, [r3, #0]
 8003b92:	4854      	ldr	r0, [pc, #336]	; (8003ce4 <_printf_i+0x244>)
 8003b94:	2f6f      	cmp	r7, #111	; 0x6f
 8003b96:	bf0c      	ite	eq
 8003b98:	2308      	moveq	r3, #8
 8003b9a:	230a      	movne	r3, #10
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ba2:	6866      	ldr	r6, [r4, #4]
 8003ba4:	60a6      	str	r6, [r4, #8]
 8003ba6:	2e00      	cmp	r6, #0
 8003ba8:	bfa2      	ittt	ge
 8003baa:	6821      	ldrge	r1, [r4, #0]
 8003bac:	f021 0104 	bicge.w	r1, r1, #4
 8003bb0:	6021      	strge	r1, [r4, #0]
 8003bb2:	b90d      	cbnz	r5, 8003bb8 <_printf_i+0x118>
 8003bb4:	2e00      	cmp	r6, #0
 8003bb6:	d04d      	beq.n	8003c54 <_printf_i+0x1b4>
 8003bb8:	4616      	mov	r6, r2
 8003bba:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bbe:	fb03 5711 	mls	r7, r3, r1, r5
 8003bc2:	5dc7      	ldrb	r7, [r0, r7]
 8003bc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003bc8:	462f      	mov	r7, r5
 8003bca:	42bb      	cmp	r3, r7
 8003bcc:	460d      	mov	r5, r1
 8003bce:	d9f4      	bls.n	8003bba <_printf_i+0x11a>
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d10b      	bne.n	8003bec <_printf_i+0x14c>
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	07df      	lsls	r7, r3, #31
 8003bd8:	d508      	bpl.n	8003bec <_printf_i+0x14c>
 8003bda:	6923      	ldr	r3, [r4, #16]
 8003bdc:	6861      	ldr	r1, [r4, #4]
 8003bde:	4299      	cmp	r1, r3
 8003be0:	bfde      	ittt	le
 8003be2:	2330      	movle	r3, #48	; 0x30
 8003be4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003be8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003bec:	1b92      	subs	r2, r2, r6
 8003bee:	6122      	str	r2, [r4, #16]
 8003bf0:	f8cd a000 	str.w	sl, [sp]
 8003bf4:	464b      	mov	r3, r9
 8003bf6:	aa03      	add	r2, sp, #12
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	4640      	mov	r0, r8
 8003bfc:	f7ff fee2 	bl	80039c4 <_printf_common>
 8003c00:	3001      	adds	r0, #1
 8003c02:	d14c      	bne.n	8003c9e <_printf_i+0x1fe>
 8003c04:	f04f 30ff 	mov.w	r0, #4294967295
 8003c08:	b004      	add	sp, #16
 8003c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c0e:	4835      	ldr	r0, [pc, #212]	; (8003ce4 <_printf_i+0x244>)
 8003c10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	680e      	ldr	r6, [r1, #0]
 8003c18:	061f      	lsls	r7, r3, #24
 8003c1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003c1e:	600e      	str	r6, [r1, #0]
 8003c20:	d514      	bpl.n	8003c4c <_printf_i+0x1ac>
 8003c22:	07d9      	lsls	r1, r3, #31
 8003c24:	bf44      	itt	mi
 8003c26:	f043 0320 	orrmi.w	r3, r3, #32
 8003c2a:	6023      	strmi	r3, [r4, #0]
 8003c2c:	b91d      	cbnz	r5, 8003c36 <_printf_i+0x196>
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	f023 0320 	bic.w	r3, r3, #32
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	2310      	movs	r3, #16
 8003c38:	e7b0      	b.n	8003b9c <_printf_i+0xfc>
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	f043 0320 	orr.w	r3, r3, #32
 8003c40:	6023      	str	r3, [r4, #0]
 8003c42:	2378      	movs	r3, #120	; 0x78
 8003c44:	4828      	ldr	r0, [pc, #160]	; (8003ce8 <_printf_i+0x248>)
 8003c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c4a:	e7e3      	b.n	8003c14 <_printf_i+0x174>
 8003c4c:	065e      	lsls	r6, r3, #25
 8003c4e:	bf48      	it	mi
 8003c50:	b2ad      	uxthmi	r5, r5
 8003c52:	e7e6      	b.n	8003c22 <_printf_i+0x182>
 8003c54:	4616      	mov	r6, r2
 8003c56:	e7bb      	b.n	8003bd0 <_printf_i+0x130>
 8003c58:	680b      	ldr	r3, [r1, #0]
 8003c5a:	6826      	ldr	r6, [r4, #0]
 8003c5c:	6960      	ldr	r0, [r4, #20]
 8003c5e:	1d1d      	adds	r5, r3, #4
 8003c60:	600d      	str	r5, [r1, #0]
 8003c62:	0635      	lsls	r5, r6, #24
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	d501      	bpl.n	8003c6c <_printf_i+0x1cc>
 8003c68:	6018      	str	r0, [r3, #0]
 8003c6a:	e002      	b.n	8003c72 <_printf_i+0x1d2>
 8003c6c:	0671      	lsls	r1, r6, #25
 8003c6e:	d5fb      	bpl.n	8003c68 <_printf_i+0x1c8>
 8003c70:	8018      	strh	r0, [r3, #0]
 8003c72:	2300      	movs	r3, #0
 8003c74:	6123      	str	r3, [r4, #16]
 8003c76:	4616      	mov	r6, r2
 8003c78:	e7ba      	b.n	8003bf0 <_printf_i+0x150>
 8003c7a:	680b      	ldr	r3, [r1, #0]
 8003c7c:	1d1a      	adds	r2, r3, #4
 8003c7e:	600a      	str	r2, [r1, #0]
 8003c80:	681e      	ldr	r6, [r3, #0]
 8003c82:	6862      	ldr	r2, [r4, #4]
 8003c84:	2100      	movs	r1, #0
 8003c86:	4630      	mov	r0, r6
 8003c88:	f7fc faa2 	bl	80001d0 <memchr>
 8003c8c:	b108      	cbz	r0, 8003c92 <_printf_i+0x1f2>
 8003c8e:	1b80      	subs	r0, r0, r6
 8003c90:	6060      	str	r0, [r4, #4]
 8003c92:	6863      	ldr	r3, [r4, #4]
 8003c94:	6123      	str	r3, [r4, #16]
 8003c96:	2300      	movs	r3, #0
 8003c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c9c:	e7a8      	b.n	8003bf0 <_printf_i+0x150>
 8003c9e:	6923      	ldr	r3, [r4, #16]
 8003ca0:	4632      	mov	r2, r6
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	4640      	mov	r0, r8
 8003ca6:	47d0      	blx	sl
 8003ca8:	3001      	adds	r0, #1
 8003caa:	d0ab      	beq.n	8003c04 <_printf_i+0x164>
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	079b      	lsls	r3, r3, #30
 8003cb0:	d413      	bmi.n	8003cda <_printf_i+0x23a>
 8003cb2:	68e0      	ldr	r0, [r4, #12]
 8003cb4:	9b03      	ldr	r3, [sp, #12]
 8003cb6:	4298      	cmp	r0, r3
 8003cb8:	bfb8      	it	lt
 8003cba:	4618      	movlt	r0, r3
 8003cbc:	e7a4      	b.n	8003c08 <_printf_i+0x168>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	4632      	mov	r2, r6
 8003cc2:	4649      	mov	r1, r9
 8003cc4:	4640      	mov	r0, r8
 8003cc6:	47d0      	blx	sl
 8003cc8:	3001      	adds	r0, #1
 8003cca:	d09b      	beq.n	8003c04 <_printf_i+0x164>
 8003ccc:	3501      	adds	r5, #1
 8003cce:	68e3      	ldr	r3, [r4, #12]
 8003cd0:	9903      	ldr	r1, [sp, #12]
 8003cd2:	1a5b      	subs	r3, r3, r1
 8003cd4:	42ab      	cmp	r3, r5
 8003cd6:	dcf2      	bgt.n	8003cbe <_printf_i+0x21e>
 8003cd8:	e7eb      	b.n	8003cb2 <_printf_i+0x212>
 8003cda:	2500      	movs	r5, #0
 8003cdc:	f104 0619 	add.w	r6, r4, #25
 8003ce0:	e7f5      	b.n	8003cce <_printf_i+0x22e>
 8003ce2:	bf00      	nop
 8003ce4:	0800405c 	.word	0x0800405c
 8003ce8:	0800406d 	.word	0x0800406d

08003cec <_sbrk_r>:
 8003cec:	b538      	push	{r3, r4, r5, lr}
 8003cee:	4d06      	ldr	r5, [pc, #24]	; (8003d08 <_sbrk_r+0x1c>)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	602b      	str	r3, [r5, #0]
 8003cf8:	f7fd fbca 	bl	8001490 <_sbrk>
 8003cfc:	1c43      	adds	r3, r0, #1
 8003cfe:	d102      	bne.n	8003d06 <_sbrk_r+0x1a>
 8003d00:	682b      	ldr	r3, [r5, #0]
 8003d02:	b103      	cbz	r3, 8003d06 <_sbrk_r+0x1a>
 8003d04:	6023      	str	r3, [r4, #0]
 8003d06:	bd38      	pop	{r3, r4, r5, pc}
 8003d08:	200000dc 	.word	0x200000dc

08003d0c <strpbrk>:
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	7803      	ldrb	r3, [r0, #0]
 8003d10:	b1a3      	cbz	r3, 8003d3c <strpbrk+0x30>
 8003d12:	4603      	mov	r3, r0
 8003d14:	460c      	mov	r4, r1
 8003d16:	4618      	mov	r0, r3
 8003d18:	f813 5b01 	ldrb.w	r5, [r3], #1
 8003d1c:	b14d      	cbz	r5, 8003d32 <strpbrk+0x26>
 8003d1e:	460a      	mov	r2, r1
 8003d20:	e001      	b.n	8003d26 <strpbrk+0x1a>
 8003d22:	42ae      	cmp	r6, r5
 8003d24:	d009      	beq.n	8003d3a <strpbrk+0x2e>
 8003d26:	4614      	mov	r4, r2
 8003d28:	f812 6b01 	ldrb.w	r6, [r2], #1
 8003d2c:	2e00      	cmp	r6, #0
 8003d2e:	d1f8      	bne.n	8003d22 <strpbrk+0x16>
 8003d30:	e7f1      	b.n	8003d16 <strpbrk+0xa>
 8003d32:	7823      	ldrb	r3, [r4, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bf08      	it	eq
 8003d38:	2000      	moveq	r0, #0
 8003d3a:	bd70      	pop	{r4, r5, r6, pc}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	e7fc      	b.n	8003d3a <strpbrk+0x2e>

08003d40 <strstr>:
 8003d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d42:	780c      	ldrb	r4, [r1, #0]
 8003d44:	b164      	cbz	r4, 8003d60 <strstr+0x20>
 8003d46:	4603      	mov	r3, r0
 8003d48:	781a      	ldrb	r2, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	1c5e      	adds	r6, r3, #1
 8003d4e:	b90a      	cbnz	r2, 8003d54 <strstr+0x14>
 8003d50:	4610      	mov	r0, r2
 8003d52:	e005      	b.n	8003d60 <strstr+0x20>
 8003d54:	4294      	cmp	r4, r2
 8003d56:	d108      	bne.n	8003d6a <strstr+0x2a>
 8003d58:	460d      	mov	r5, r1
 8003d5a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003d5e:	b902      	cbnz	r2, 8003d62 <strstr+0x22>
 8003d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d62:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003d66:	4297      	cmp	r7, r2
 8003d68:	d0f7      	beq.n	8003d5a <strstr+0x1a>
 8003d6a:	4633      	mov	r3, r6
 8003d6c:	e7ec      	b.n	8003d48 <strstr+0x8>
	...

08003d70 <_strtol_l.isra.0>:
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d76:	d001      	beq.n	8003d7c <_strtol_l.isra.0+0xc>
 8003d78:	2b24      	cmp	r3, #36	; 0x24
 8003d7a:	d906      	bls.n	8003d8a <_strtol_l.isra.0+0x1a>
 8003d7c:	f7ff fbe2 	bl	8003544 <__errno>
 8003d80:	2316      	movs	r3, #22
 8003d82:	6003      	str	r3, [r0, #0]
 8003d84:	2000      	movs	r0, #0
 8003d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d8a:	4f3a      	ldr	r7, [pc, #232]	; (8003e74 <_strtol_l.isra.0+0x104>)
 8003d8c:	468e      	mov	lr, r1
 8003d8e:	4676      	mov	r6, lr
 8003d90:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003d94:	5de5      	ldrb	r5, [r4, r7]
 8003d96:	f015 0508 	ands.w	r5, r5, #8
 8003d9a:	d1f8      	bne.n	8003d8e <_strtol_l.isra.0+0x1e>
 8003d9c:	2c2d      	cmp	r4, #45	; 0x2d
 8003d9e:	d134      	bne.n	8003e0a <_strtol_l.isra.0+0x9a>
 8003da0:	f89e 4000 	ldrb.w	r4, [lr]
 8003da4:	f04f 0801 	mov.w	r8, #1
 8003da8:	f106 0e02 	add.w	lr, r6, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d05c      	beq.n	8003e6a <_strtol_l.isra.0+0xfa>
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d10c      	bne.n	8003dce <_strtol_l.isra.0+0x5e>
 8003db4:	2c30      	cmp	r4, #48	; 0x30
 8003db6:	d10a      	bne.n	8003dce <_strtol_l.isra.0+0x5e>
 8003db8:	f89e 4000 	ldrb.w	r4, [lr]
 8003dbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003dc0:	2c58      	cmp	r4, #88	; 0x58
 8003dc2:	d14d      	bne.n	8003e60 <_strtol_l.isra.0+0xf0>
 8003dc4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8003dc8:	2310      	movs	r3, #16
 8003dca:	f10e 0e02 	add.w	lr, lr, #2
 8003dce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8003dd2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003dd6:	2600      	movs	r6, #0
 8003dd8:	fbbc f9f3 	udiv	r9, ip, r3
 8003ddc:	4635      	mov	r5, r6
 8003dde:	fb03 ca19 	mls	sl, r3, r9, ip
 8003de2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003de6:	2f09      	cmp	r7, #9
 8003de8:	d818      	bhi.n	8003e1c <_strtol_l.isra.0+0xac>
 8003dea:	463c      	mov	r4, r7
 8003dec:	42a3      	cmp	r3, r4
 8003dee:	dd24      	ble.n	8003e3a <_strtol_l.isra.0+0xca>
 8003df0:	2e00      	cmp	r6, #0
 8003df2:	db1f      	blt.n	8003e34 <_strtol_l.isra.0+0xc4>
 8003df4:	45a9      	cmp	r9, r5
 8003df6:	d31d      	bcc.n	8003e34 <_strtol_l.isra.0+0xc4>
 8003df8:	d101      	bne.n	8003dfe <_strtol_l.isra.0+0x8e>
 8003dfa:	45a2      	cmp	sl, r4
 8003dfc:	db1a      	blt.n	8003e34 <_strtol_l.isra.0+0xc4>
 8003dfe:	fb05 4503 	mla	r5, r5, r3, r4
 8003e02:	2601      	movs	r6, #1
 8003e04:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003e08:	e7eb      	b.n	8003de2 <_strtol_l.isra.0+0x72>
 8003e0a:	2c2b      	cmp	r4, #43	; 0x2b
 8003e0c:	bf08      	it	eq
 8003e0e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8003e12:	46a8      	mov	r8, r5
 8003e14:	bf08      	it	eq
 8003e16:	f106 0e02 	addeq.w	lr, r6, #2
 8003e1a:	e7c7      	b.n	8003dac <_strtol_l.isra.0+0x3c>
 8003e1c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003e20:	2f19      	cmp	r7, #25
 8003e22:	d801      	bhi.n	8003e28 <_strtol_l.isra.0+0xb8>
 8003e24:	3c37      	subs	r4, #55	; 0x37
 8003e26:	e7e1      	b.n	8003dec <_strtol_l.isra.0+0x7c>
 8003e28:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003e2c:	2f19      	cmp	r7, #25
 8003e2e:	d804      	bhi.n	8003e3a <_strtol_l.isra.0+0xca>
 8003e30:	3c57      	subs	r4, #87	; 0x57
 8003e32:	e7db      	b.n	8003dec <_strtol_l.isra.0+0x7c>
 8003e34:	f04f 36ff 	mov.w	r6, #4294967295
 8003e38:	e7e4      	b.n	8003e04 <_strtol_l.isra.0+0x94>
 8003e3a:	2e00      	cmp	r6, #0
 8003e3c:	da05      	bge.n	8003e4a <_strtol_l.isra.0+0xda>
 8003e3e:	2322      	movs	r3, #34	; 0x22
 8003e40:	6003      	str	r3, [r0, #0]
 8003e42:	4665      	mov	r5, ip
 8003e44:	b942      	cbnz	r2, 8003e58 <_strtol_l.isra.0+0xe8>
 8003e46:	4628      	mov	r0, r5
 8003e48:	e79d      	b.n	8003d86 <_strtol_l.isra.0+0x16>
 8003e4a:	f1b8 0f00 	cmp.w	r8, #0
 8003e4e:	d000      	beq.n	8003e52 <_strtol_l.isra.0+0xe2>
 8003e50:	426d      	negs	r5, r5
 8003e52:	2a00      	cmp	r2, #0
 8003e54:	d0f7      	beq.n	8003e46 <_strtol_l.isra.0+0xd6>
 8003e56:	b10e      	cbz	r6, 8003e5c <_strtol_l.isra.0+0xec>
 8003e58:	f10e 31ff 	add.w	r1, lr, #4294967295
 8003e5c:	6011      	str	r1, [r2, #0]
 8003e5e:	e7f2      	b.n	8003e46 <_strtol_l.isra.0+0xd6>
 8003e60:	2430      	movs	r4, #48	; 0x30
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1b3      	bne.n	8003dce <_strtol_l.isra.0+0x5e>
 8003e66:	2308      	movs	r3, #8
 8003e68:	e7b1      	b.n	8003dce <_strtol_l.isra.0+0x5e>
 8003e6a:	2c30      	cmp	r4, #48	; 0x30
 8003e6c:	d0a4      	beq.n	8003db8 <_strtol_l.isra.0+0x48>
 8003e6e:	230a      	movs	r3, #10
 8003e70:	e7ad      	b.n	8003dce <_strtol_l.isra.0+0x5e>
 8003e72:	bf00      	nop
 8003e74:	0800407f 	.word	0x0800407f

08003e78 <strtol>:
 8003e78:	4613      	mov	r3, r2
 8003e7a:	460a      	mov	r2, r1
 8003e7c:	4601      	mov	r1, r0
 8003e7e:	4802      	ldr	r0, [pc, #8]	; (8003e88 <strtol+0x10>)
 8003e80:	6800      	ldr	r0, [r0, #0]
 8003e82:	f7ff bf75 	b.w	8003d70 <_strtol_l.isra.0>
 8003e86:	bf00      	nop
 8003e88:	20000008 	.word	0x20000008

08003e8c <memcpy>:
 8003e8c:	440a      	add	r2, r1
 8003e8e:	4291      	cmp	r1, r2
 8003e90:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e94:	d100      	bne.n	8003e98 <memcpy+0xc>
 8003e96:	4770      	bx	lr
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ea2:	4291      	cmp	r1, r2
 8003ea4:	d1f9      	bne.n	8003e9a <memcpy+0xe>
 8003ea6:	bd10      	pop	{r4, pc}

08003ea8 <memmove>:
 8003ea8:	4288      	cmp	r0, r1
 8003eaa:	b510      	push	{r4, lr}
 8003eac:	eb01 0402 	add.w	r4, r1, r2
 8003eb0:	d902      	bls.n	8003eb8 <memmove+0x10>
 8003eb2:	4284      	cmp	r4, r0
 8003eb4:	4623      	mov	r3, r4
 8003eb6:	d807      	bhi.n	8003ec8 <memmove+0x20>
 8003eb8:	1e43      	subs	r3, r0, #1
 8003eba:	42a1      	cmp	r1, r4
 8003ebc:	d008      	beq.n	8003ed0 <memmove+0x28>
 8003ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ec2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ec6:	e7f8      	b.n	8003eba <memmove+0x12>
 8003ec8:	4402      	add	r2, r0
 8003eca:	4601      	mov	r1, r0
 8003ecc:	428a      	cmp	r2, r1
 8003ece:	d100      	bne.n	8003ed2 <memmove+0x2a>
 8003ed0:	bd10      	pop	{r4, pc}
 8003ed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ed6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003eda:	e7f7      	b.n	8003ecc <memmove+0x24>

08003edc <__malloc_lock>:
 8003edc:	4801      	ldr	r0, [pc, #4]	; (8003ee4 <__malloc_lock+0x8>)
 8003ede:	f000 b82f 	b.w	8003f40 <__retarget_lock_acquire_recursive>
 8003ee2:	bf00      	nop
 8003ee4:	200000e4 	.word	0x200000e4

08003ee8 <__malloc_unlock>:
 8003ee8:	4801      	ldr	r0, [pc, #4]	; (8003ef0 <__malloc_unlock+0x8>)
 8003eea:	f000 b82a 	b.w	8003f42 <__retarget_lock_release_recursive>
 8003eee:	bf00      	nop
 8003ef0:	200000e4 	.word	0x200000e4

08003ef4 <_realloc_r>:
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	4607      	mov	r7, r0
 8003ef8:	4614      	mov	r4, r2
 8003efa:	460e      	mov	r6, r1
 8003efc:	b921      	cbnz	r1, 8003f08 <_realloc_r+0x14>
 8003efe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f02:	4611      	mov	r1, r2
 8003f04:	f7ff bba8 	b.w	8003658 <_malloc_r>
 8003f08:	b922      	cbnz	r2, 8003f14 <_realloc_r+0x20>
 8003f0a:	f7ff fb55 	bl	80035b8 <_free_r>
 8003f0e:	4625      	mov	r5, r4
 8003f10:	4628      	mov	r0, r5
 8003f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f14:	f000 f816 	bl	8003f44 <_malloc_usable_size_r>
 8003f18:	42a0      	cmp	r0, r4
 8003f1a:	d20f      	bcs.n	8003f3c <_realloc_r+0x48>
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	4638      	mov	r0, r7
 8003f20:	f7ff fb9a 	bl	8003658 <_malloc_r>
 8003f24:	4605      	mov	r5, r0
 8003f26:	2800      	cmp	r0, #0
 8003f28:	d0f2      	beq.n	8003f10 <_realloc_r+0x1c>
 8003f2a:	4631      	mov	r1, r6
 8003f2c:	4622      	mov	r2, r4
 8003f2e:	f7ff ffad 	bl	8003e8c <memcpy>
 8003f32:	4631      	mov	r1, r6
 8003f34:	4638      	mov	r0, r7
 8003f36:	f7ff fb3f 	bl	80035b8 <_free_r>
 8003f3a:	e7e9      	b.n	8003f10 <_realloc_r+0x1c>
 8003f3c:	4635      	mov	r5, r6
 8003f3e:	e7e7      	b.n	8003f10 <_realloc_r+0x1c>

08003f40 <__retarget_lock_acquire_recursive>:
 8003f40:	4770      	bx	lr

08003f42 <__retarget_lock_release_recursive>:
 8003f42:	4770      	bx	lr

08003f44 <_malloc_usable_size_r>:
 8003f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f48:	1f18      	subs	r0, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bfbc      	itt	lt
 8003f4e:	580b      	ldrlt	r3, [r1, r0]
 8003f50:	18c0      	addlt	r0, r0, r3
 8003f52:	4770      	bx	lr

08003f54 <_init>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	bf00      	nop
 8003f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5a:	bc08      	pop	{r3}
 8003f5c:	469e      	mov	lr, r3
 8003f5e:	4770      	bx	lr

08003f60 <_fini>:
 8003f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f62:	bf00      	nop
 8003f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f66:	bc08      	pop	{r3}
 8003f68:	469e      	mov	lr, r3
 8003f6a:	4770      	bx	lr
