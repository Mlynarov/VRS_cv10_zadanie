
VRS_cv10_zadanie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003708  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08003898  08003898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa4  08003aa4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003aa4  08003aa4  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003aa4  08003aa4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aa4  08003aa4  00013aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aa8  08003aa8  00013aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000084  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008701  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b83  00000000  00000000  0002879d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  0002a320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007a0  00000000  00000000  0002ab98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000175fe  00000000  00000000  0002b338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006ab1  00000000  00000000  00042936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007a3a0  00000000  00000000  000493e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c3787  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000273c  00000000  00000000  000c37dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003880 	.word	0x08003880

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08003880 	.word	0x08003880

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <__NVIC_GetPriorityGrouping+0x18>)
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	0a1b      	lsrs	r3, r3, #8
 800027a:	f003 0307 	and.w	r3, r3, #7
}
 800027e:	4618      	mov	r0, r3
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029a:	2b00      	cmp	r3, #0
 800029c:	db0b      	blt.n	80002b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	f003 021f 	and.w	r2, r3, #31
 80002a4:	4907      	ldr	r1, [pc, #28]	; (80002c4 <__NVIC_EnableIRQ+0x38>)
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	095b      	lsrs	r3, r3, #5
 80002ac:	2001      	movs	r0, #1
 80002ae:	fa00 f202 	lsl.w	r2, r0, r2
 80002b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	6039      	str	r1, [r7, #0]
 80002d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	db0a      	blt.n	80002f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	490c      	ldr	r1, [pc, #48]	; (8000314 <__NVIC_SetPriority+0x4c>)
 80002e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e6:	0112      	lsls	r2, r2, #4
 80002e8:	b2d2      	uxtb	r2, r2
 80002ea:	440b      	add	r3, r1
 80002ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f0:	e00a      	b.n	8000308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4908      	ldr	r1, [pc, #32]	; (8000318 <__NVIC_SetPriority+0x50>)
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	f003 030f 	and.w	r3, r3, #15
 80002fe:	3b04      	subs	r3, #4
 8000300:	0112      	lsls	r2, r2, #4
 8000302:	b2d2      	uxtb	r2, r2
 8000304:	440b      	add	r3, r1
 8000306:	761a      	strb	r2, [r3, #24]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	e000e100 	.word	0xe000e100
 8000318:	e000ed00 	.word	0xe000ed00

0800031c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800031c:	b480      	push	{r7}
 800031e:	b089      	sub	sp, #36	; 0x24
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f003 0307 	and.w	r3, r3, #7
 800032e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000330:	69fb      	ldr	r3, [r7, #28]
 8000332:	f1c3 0307 	rsb	r3, r3, #7
 8000336:	2b04      	cmp	r3, #4
 8000338:	bf28      	it	cs
 800033a:	2304      	movcs	r3, #4
 800033c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	3304      	adds	r3, #4
 8000342:	2b06      	cmp	r3, #6
 8000344:	d902      	bls.n	800034c <NVIC_EncodePriority+0x30>
 8000346:	69fb      	ldr	r3, [r7, #28]
 8000348:	3b03      	subs	r3, #3
 800034a:	e000      	b.n	800034e <NVIC_EncodePriority+0x32>
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	f04f 32ff 	mov.w	r2, #4294967295
 8000354:	69bb      	ldr	r3, [r7, #24]
 8000356:	fa02 f303 	lsl.w	r3, r2, r3
 800035a:	43da      	mvns	r2, r3
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	401a      	ands	r2, r3
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000364:	f04f 31ff 	mov.w	r1, #4294967295
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	43d9      	mvns	r1, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000374:	4313      	orrs	r3, r2
         );
}
 8000376:	4618      	mov	r0, r3
 8000378:	3724      	adds	r7, #36	; 0x24
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
	...

08000384 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800038e:	695a      	ldr	r2, [r3, #20]
 8000390:	4907      	ldr	r1, [pc, #28]	; (80003b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4313      	orrs	r3, r2
 8000396:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800039a:	695a      	ldr	r2, [r3, #20]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4013      	ands	r3, r2
 80003a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003a2:	68fb      	ldr	r3, [r7, #12]
}
 80003a4:	bf00      	nop
 80003a6:	3714      	adds	r7, #20
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	40021000 	.word	0x40021000

080003b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80003b8:	2001      	movs	r0, #1
 80003ba:	f7ff ffe3 	bl	8000384 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80003be:	f7ff ff57 	bl	8000270 <__NVIC_GetPriorityGrouping>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2200      	movs	r2, #0
 80003c6:	2100      	movs	r1, #0
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff ffa7 	bl	800031c <NVIC_EncodePriority>
 80003ce:	4603      	mov	r3, r0
 80003d0:	4619      	mov	r1, r3
 80003d2:	2010      	movs	r0, #16
 80003d4:	f7ff ff78 	bl	80002c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80003d8:	2010      	movs	r0, #16
 80003da:	f7ff ff57 	bl	800028c <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80003de:	f7ff ff47 	bl	8000270 <__NVIC_GetPriorityGrouping>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2200      	movs	r2, #0
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff97 	bl	800031c <NVIC_EncodePriority>
 80003ee:	4603      	mov	r3, r0
 80003f0:	4619      	mov	r1, r3
 80003f2:	2011      	movs	r0, #17
 80003f4:	f7ff ff68 	bl	80002c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80003f8:	2011      	movs	r0, #17
 80003fa:	f7ff ff47 	bl	800028c <__NVIC_EnableIRQ>

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <LL_AHB1_GRP1_EnableClock>:
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800040e:	695a      	ldr	r2, [r3, #20]
 8000410:	4907      	ldr	r1, [pc, #28]	; (8000430 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4313      	orrs	r3, r2
 8000416:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800041a:	695a      	ldr	r2, [r3, #20]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4013      	ands	r3, r2
 8000420:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000422:	68fb      	ldr	r3, [r7, #12]
}
 8000424:	bf00      	nop
 8000426:	3714      	adds	r7, #20
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000

08000434 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000438:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800043c:	f7ff ffe2 	bl	8000404 <LL_AHB1_GRP1_EnableClock>

}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}

08000444 <__NVIC_SetPriorityGrouping>:
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f003 0307 	and.w	r3, r3, #7
 8000452:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <__NVIC_SetPriorityGrouping+0x44>)
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800045a:	68ba      	ldr	r2, [r7, #8]
 800045c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000460:	4013      	ands	r3, r2
 8000462:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800046c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000476:	4a04      	ldr	r2, [pc, #16]	; (8000488 <__NVIC_SetPriorityGrouping+0x44>)
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	60d3      	str	r3, [r2, #12]
}
 800047c:	bf00      	nop
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr
 8000488:	e000ed00 	.word	0xe000ed00

0800048c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <LL_RCC_HSI_Enable+0x1c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <LL_RCC_HSI_Enable+0x1c>)
 8000496:	f043 0301 	orr.w	r3, r3, #1
 800049a:	6013      	str	r3, [r2, #0]
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000

080004ac <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <LL_RCC_HSI_IsReady+0x20>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f003 0302 	and.w	r3, r3, #2
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	bf0c      	ite	eq
 80004bc:	2301      	moveq	r3, #1
 80004be:	2300      	movne	r3, #0
 80004c0:	b2db      	uxtb	r3, r3
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000

080004d0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	4904      	ldr	r1, [pc, #16]	; (80004f8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80004e6:	4313      	orrs	r3, r2
 80004e8:	600b      	str	r3, [r1, #0]
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <LL_RCC_SetSysClkSource+0x24>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	f023 0203 	bic.w	r2, r3, #3
 800050c:	4904      	ldr	r1, [pc, #16]	; (8000520 <LL_RCC_SetSysClkSource+0x24>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4313      	orrs	r3, r2
 8000512:	604b      	str	r3, [r1, #4]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	40021000 	.word	0x40021000

08000524 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <LL_RCC_GetSysClkSource+0x18>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	f003 030c 	and.w	r3, r3, #12
}
 8000530:	4618      	mov	r0, r3
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <LL_RCC_SetAHBPrescaler+0x24>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000550:	4904      	ldr	r1, [pc, #16]	; (8000564 <LL_RCC_SetAHBPrescaler+0x24>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4313      	orrs	r3, r2
 8000556:	604b      	str	r3, [r1, #4]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40021000 	.word	0x40021000

08000568 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000578:	4904      	ldr	r1, [pc, #16]	; (800058c <LL_RCC_SetAPB1Prescaler+0x24>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4313      	orrs	r3, r2
 800057e:	604b      	str	r3, [r1, #4]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	40021000 	.word	0x40021000

08000590 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80005a0:	4904      	ldr	r1, [pc, #16]	; (80005b4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	604b      	str	r3, [r1, #4]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	40021000 	.word	0x40021000

080005b8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005c2:	69da      	ldr	r2, [r3, #28]
 80005c4:	4907      	ldr	r1, [pc, #28]	; (80005e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005ce:	69da      	ldr	r2, [r3, #28]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4013      	ands	r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005d6:	68fb      	ldr	r3, [r7, #12]
}
 80005d8:	bf00      	nop
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000

080005e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005f2:	699a      	ldr	r2, [r3, #24]
 80005f4:	4907      	ldr	r1, [pc, #28]	; (8000614 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005fe:	699a      	ldr	r2, [r3, #24]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4013      	ands	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000606:	68fb      	ldr	r3, [r7, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000

08000618 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <LL_FLASH_SetLatency+0x24>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f023 0207 	bic.w	r2, r3, #7
 8000628:	4904      	ldr	r1, [pc, #16]	; (800063c <LL_FLASH_SetLatency+0x24>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4313      	orrs	r3, r2
 800062e:	600b      	str	r3, [r1, #0]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40022000 	.word	0x40022000

08000640 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <LL_FLASH_GetLatency+0x18>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f003 0307 	and.w	r3, r3, #7
}
 800064c:	4618      	mov	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40022000 	.word	0x40022000

0800065c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f043 0201 	orr.w	r2, r3, #1
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	601a      	str	r2, [r3, #0]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6a1a      	ldr	r2, [r3, #32]
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	431a      	orrs	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	621a      	str	r2, [r3, #32]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <LL_TIM_EnableIT_CC2>:
  * @rmtoll DIER         CC2IE         LL_TIM_EnableIT_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	f043 0204 	orr.w	r2, r3, #4
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	60da      	str	r2, [r3, #12]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff ff8f 	bl	80005e8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80006ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80006ce:	f7ff ff73 	bl	80005b8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d2:	2003      	movs	r0, #3
 80006d4:	f7ff feb6 	bl	8000444 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f820 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f7ff feaa 	bl	8000434 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e0:	f7ff fe68 	bl	80003b4 <MX_DMA_Init>
  MX_TIM2_Init();
 80006e4:	f000 fd54 	bl	8001190 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80006e8:	f001 f9b6 	bl	8001a58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  USART2_RegisterCallback(proccesDmaData);
 80006ec:	480a      	ldr	r0, [pc, #40]	; (8000718 <main+0x58>)
 80006ee:	f001 f9a1 	bl	8001a34 <USART2_RegisterCallback>
  LL_TIM_EnableIT_CC2(TIM2);
 80006f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80006f6:	f7ff ffd2 	bl	800069e <LL_TIM_EnableIT_CC2>
  LL_TIM_EnableCounter(TIM2);
 80006fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80006fe:	f7ff ffad 	bl	800065c <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000702:	2101      	movs	r1, #1
 8000704:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000708:	f7ff ffb8 	bl	800067c <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM2);
 800070c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000710:	f7ff ffa4 	bl	800065c <LL_TIM_EnableCounter>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000714:	e7fe      	b.n	8000714 <main+0x54>
 8000716:	bf00      	nop
 8000718:	08000781 	.word	0x08000781

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff ff79 	bl	8000618 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000726:	bf00      	nop
 8000728:	f7ff ff8a 	bl	8000640 <LL_FLASH_GetLatency>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1fa      	bne.n	8000728 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000732:	f7ff feab 	bl	800048c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000736:	bf00      	nop
 8000738:	f7ff feb8 	bl	80004ac <LL_RCC_HSI_IsReady>
 800073c:	4603      	mov	r3, r0
 800073e:	2b01      	cmp	r3, #1
 8000740:	d1fa      	bne.n	8000738 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000742:	2010      	movs	r0, #16
 8000744:	f7ff fec4 	bl	80004d0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000748:	2000      	movs	r0, #0
 800074a:	f7ff fef9 	bl	8000540 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800074e:	2000      	movs	r0, #0
 8000750:	f7ff ff0a 	bl	8000568 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000754:	2000      	movs	r0, #0
 8000756:	f7ff ff1b 	bl	8000590 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff fece 	bl	80004fc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000760:	bf00      	nop
 8000762:	f7ff fedf 	bl	8000524 <LL_RCC_GetSysClkSource>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1fa      	bne.n	8000762 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <SystemClock_Config+0x60>)
 800076e:	f002 fb13 	bl	8002d98 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000772:	4802      	ldr	r0, [pc, #8]	; (800077c <SystemClock_Config+0x60>)
 8000774:	f002 fb44 	bl	8002e00 <LL_SetSystemCoreClock>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	007a1200 	.word	0x007a1200

08000780 <proccesDmaData>:

/* USER CODE BEGIN 4 */
void proccesDmaData(uint8_t* sign,uint16_t len){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	807b      	strh	r3, [r7, #2]
	checkMode(sign,len);
 800078c:	887b      	ldrh	r3, [r7, #2]
 800078e:	4619      	mov	r1, r3
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f88b 	bl	80008ac <checkMode>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <sendData>:

void sendData(uint8_t* data,uint16_t len){
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	460b      	mov	r3, r1
 80007a8:	807b      	strh	r3, [r7, #2]
	USART2_PutBuffer(data, len);
 80007aa:	887b      	ldrh	r3, [r7, #2]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4619      	mov	r1, r3
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f001 fa43 	bl	8001c3c <USART2_PutBuffer>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <pwmToLed>:

void pwmToLed(uint8_t* sign,uint16_t len){
 80007c0:	b5b0      	push	{r4, r5, r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	807b      	strh	r3, [r7, #2]
 80007cc:	466b      	mov	r3, sp
 80007ce:	461d      	mov	r5, r3
	uint8_t *tx_data;
	char str[len];
 80007d0:	887c      	ldrh	r4, [r7, #2]
 80007d2:	4623      	mov	r3, r4
 80007d4:	3b01      	subs	r3, #1
 80007d6:	623b      	str	r3, [r7, #32]
 80007d8:	b2a0      	uxth	r0, r4
 80007da:	f04f 0100 	mov.w	r1, #0
 80007de:	f04f 0200 	mov.w	r2, #0
 80007e2:	f04f 0300 	mov.w	r3, #0
 80007e6:	00cb      	lsls	r3, r1, #3
 80007e8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80007ec:	00c2      	lsls	r2, r0, #3
 80007ee:	b2a0      	uxth	r0, r4
 80007f0:	f04f 0100 	mov.w	r1, #0
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	00cb      	lsls	r3, r1, #3
 80007fe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000802:	00c2      	lsls	r2, r0, #3
 8000804:	4623      	mov	r3, r4
 8000806:	3307      	adds	r3, #7
 8000808:	08db      	lsrs	r3, r3, #3
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	ebad 0d03 	sub.w	sp, sp, r3
 8000810:	466b      	mov	r3, sp
 8000812:	3300      	adds	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
	for(int j=0;j<len;j++){
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
 800081a:	e00b      	b.n	8000834 <pwmToLed+0x74>
		str[j] = *(sign+j);
 800081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	7819      	ldrb	r1, [r3, #0]
 8000824:	69fa      	ldr	r2, [r7, #28]
 8000826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000828:	4413      	add	r3, r2
 800082a:	460a      	mov	r2, r1
 800082c:	701a      	strb	r2, [r3, #0]
	for(int j=0;j<len;j++){
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	3301      	adds	r3, #1
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
 8000834:	887b      	ldrh	r3, [r7, #2]
 8000836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000838:	429a      	cmp	r2, r3
 800083a:	dbef      	blt.n	800081c <pwmToLed+0x5c>
	}
	char breakset[] = "0123456789";
 800083c:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <pwmToLed+0xe0>)
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	ca07      	ldmia	r2, {r0, r1, r2}
 8000844:	c303      	stmia	r3!, {r0, r1}
 8000846:	801a      	strh	r2, [r3, #0]
 8000848:	3302      	adds	r3, #2
 800084a:	0c12      	lsrs	r2, r2, #16
 800084c:	701a      	strb	r2, [r3, #0]
	wantedDutyCycle = atoi(strpbrk(str, breakset));
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	f107 0208 	add.w	r2, r7, #8
 8000854:	4611      	mov	r1, r2
 8000856:	4618      	mov	r0, r3
 8000858:	f002 feee 	bl	8003638 <strpbrk>
 800085c:	4603      	mov	r3, r0
 800085e:	4618      	mov	r0, r3
 8000860:	f002 fb02 	bl	8002e68 <atoi>
 8000864:	4603      	mov	r3, r0
 8000866:	b2da      	uxtb	r2, r3
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <pwmToLed+0xe4>)
 800086a:	701a      	strb	r2, [r3, #0]
	int len_data = asprintf(&tx_data, "The brightness is set to: : %d %\n\r",wantedDutyCycle);
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <pwmToLed+0xe4>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	490c      	ldr	r1, [pc, #48]	; (80008a8 <pwmToLed+0xe8>)
 8000878:	4618      	mov	r0, r3
 800087a:	f002 fad1 	bl	8002e20 <asiprintf>
 800087e:	61b8      	str	r0, [r7, #24]
									sendData(tx_data,len_data);
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	b292      	uxth	r2, r2
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff88 	bl	800079e <sendData>
									free(tx_data);
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	4618      	mov	r0, r3
 8000892:	f002 fb17 	bl	8002ec4 <free>
 8000896:	46ad      	mov	sp, r5
}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bdb0      	pop	{r4, r5, r7, pc}
 80008a0:	080038bc 	.word	0x080038bc
 80008a4:	20000088 	.word	0x20000088
 80008a8:	08003898 	.word	0x08003898

080008ac <checkMode>:

void checkMode(uint8_t* sign,uint16_t len){
 80008ac:	b5b0      	push	{r4, r5, r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	807b      	strh	r3, [r7, #2]
 80008b8:	466b      	mov	r3, sp
 80008ba:	461d      	mov	r5, r3
	uint8_t *tx_data;
	char str[len];
 80008bc:	887c      	ldrh	r4, [r7, #2]
 80008be:	4623      	mov	r3, r4
 80008c0:	3b01      	subs	r3, #1
 80008c2:	623b      	str	r3, [r7, #32]
 80008c4:	b2a0      	uxth	r0, r4
 80008c6:	f04f 0100 	mov.w	r1, #0
 80008ca:	f04f 0200 	mov.w	r2, #0
 80008ce:	f04f 0300 	mov.w	r3, #0
 80008d2:	00cb      	lsls	r3, r1, #3
 80008d4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80008d8:	00c2      	lsls	r2, r0, #3
 80008da:	b2a0      	uxth	r0, r4
 80008dc:	f04f 0100 	mov.w	r1, #0
 80008e0:	f04f 0200 	mov.w	r2, #0
 80008e4:	f04f 0300 	mov.w	r3, #0
 80008e8:	00cb      	lsls	r3, r1, #3
 80008ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80008ee:	00c2      	lsls	r2, r0, #3
 80008f0:	4623      	mov	r3, r4
 80008f2:	3307      	adds	r3, #7
 80008f4:	08db      	lsrs	r3, r3, #3
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	ebad 0d03 	sub.w	sp, sp, r3
 80008fc:	466b      	mov	r3, sp
 80008fe:	3300      	adds	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
	for(int j=0;j<len;j++){
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
 8000906:	e00b      	b.n	8000920 <checkMode+0x74>
		str[j] = *(sign+j);
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	7819      	ldrb	r1, [r3, #0]
 8000910:	69fa      	ldr	r2, [r7, #28]
 8000912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000914:	4413      	add	r3, r2
 8000916:	460a      	mov	r2, r1
 8000918:	701a      	strb	r2, [r3, #0]
	for(int j=0;j<len;j++){
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	3301      	adds	r3, #1
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
 8000920:	887b      	ldrh	r3, [r7, #2]
 8000922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000924:	429a      	cmp	r2, r3
 8000926:	dbef      	blt.n	8000908 <checkMode+0x5c>
	}
	if(strstr(str,"$auto$")){
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	4933      	ldr	r1, [pc, #204]	; (80009f8 <checkMode+0x14c>)
 800092c:	4618      	mov	r0, r3
 800092e:	f002 fe9d 	bl	800366c <strstr>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d003      	beq.n	8000940 <checkMode+0x94>
		mode = 1;
 8000938:	4b30      	ldr	r3, [pc, #192]	; (80009fc <checkMode+0x150>)
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
 800093e:	e00a      	b.n	8000956 <checkMode+0xaa>
	}
	else if(strstr(str,"$manual$")){
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	492f      	ldr	r1, [pc, #188]	; (8000a00 <checkMode+0x154>)
 8000944:	4618      	mov	r0, r3
 8000946:	f002 fe91 	bl	800366c <strstr>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <checkMode+0xaa>
		mode = 2;
 8000950:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <checkMode+0x150>)
 8000952:	2202      	movs	r2, #2
 8000954:	701a      	strb	r2, [r3, #0]
	}
	if (mode == 1){
 8000956:	4b29      	ldr	r3, [pc, #164]	; (80009fc <checkMode+0x150>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d111      	bne.n	8000982 <checkMode+0xd6>
			int len_data = asprintf(&tx_data, "Mode is set to:  automatic\n\r");
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	4928      	ldr	r1, [pc, #160]	; (8000a04 <checkMode+0x158>)
 8000964:	4618      	mov	r0, r3
 8000966:	f002 fa5b 	bl	8002e20 <asiprintf>
 800096a:	61b8      	str	r0, [r7, #24]
			sendData(tx_data,len_data);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	b292      	uxth	r2, r2
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff12 	bl	800079e <sendData>
			free(tx_data);
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4618      	mov	r0, r3
 800097e:	f002 faa1 	bl	8002ec4 <free>
		}
		if (mode == 2){
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <checkMode+0x150>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b02      	cmp	r3, #2
 8000988:	d119      	bne.n	80009be <checkMode+0x112>
			pwmToLed(sign,len);
 800098a:	887b      	ldrh	r3, [r7, #2]
 800098c:	4619      	mov	r1, r3
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff ff16 	bl	80007c0 <pwmToLed>
			LL_mDelay(50);
 8000994:	2032      	movs	r0, #50	; 0x32
 8000996:	f002 fa0d 	bl	8002db4 <LL_mDelay>
			int len_data = asprintf(&tx_data, "Mode is set to:  manual\n\r");
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	491a      	ldr	r1, [pc, #104]	; (8000a08 <checkMode+0x15c>)
 80009a0:	4618      	mov	r0, r3
 80009a2:	f002 fa3d 	bl	8002e20 <asiprintf>
 80009a6:	6178      	str	r0, [r7, #20]
			sendData(tx_data,len_data);
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	b292      	uxth	r2, r2
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fef4 	bl	800079e <sendData>
			free(tx_data);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 fa83 	bl	8002ec4 <free>
		}

		if (mode == 0){
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <checkMode+0x150>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d111      	bne.n	80009ea <checkMode+0x13e>
			int len_data = asprintf(&tx_data, "Mode is set to:  none\n\r");
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	4910      	ldr	r1, [pc, #64]	; (8000a0c <checkMode+0x160>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 fa27 	bl	8002e20 <asiprintf>
 80009d2:	6138      	str	r0, [r7, #16]
			sendData(tx_data,len_data);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	b292      	uxth	r2, r2
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fede 	bl	800079e <sendData>
			free(tx_data);
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f002 fa6d 	bl	8002ec4 <free>
		}
	return;
 80009ea:	bf00      	nop
 80009ec:	46ad      	mov	sp, r5
 80009ee:	bf00      	nop
}
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bdb0      	pop	{r4, r5, r7, pc}
 80009f6:	bf00      	nop
 80009f8:	080038c8 	.word	0x080038c8
 80009fc:	20000000 	.word	0x20000000
 8000a00:	080038d0 	.word	0x080038d0
 8000a04:	080038dc 	.word	0x080038dc
 8000a08:	080038fc 	.word	0x080038fc
 8000a0c:	08003918 	.word	0x08003918

08000a10 <changeLedPWM>:

void changeLedPWM(){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	if(mode == 1){
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <changeLedPWM+0x9c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d123      	bne.n	8000a64 <changeLedPWM+0x54>
		if(fadeMode == 0){
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <changeLedPWM+0xa0>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10d      	bne.n	8000a40 <changeLedPWM+0x30>
				dutyCycle -= 1;
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <changeLedPWM+0xa4>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <changeLedPWM+0xa4>)
 8000a2e:	701a      	strb	r2, [r3, #0]
				if(dutyCycle <= 0){
 8000a30:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <changeLedPWM+0xa4>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d132      	bne.n	8000a9e <changeLedPWM+0x8e>
					fadeMode = 1;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <changeLedPWM+0xa0>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
 8000a3e:	e02e      	b.n	8000a9e <changeLedPWM+0x8e>
				}
			}
			else if(fadeMode == 1){
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <changeLedPWM+0xa0>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d12a      	bne.n	8000a9e <changeLedPWM+0x8e>
				dutyCycle += 1;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <changeLedPWM+0xa4>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <changeLedPWM+0xa4>)
 8000a52:	701a      	strb	r2, [r3, #0]
				if (dutyCycle >= 100){
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <changeLedPWM+0xa4>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b63      	cmp	r3, #99	; 0x63
 8000a5a:	d920      	bls.n	8000a9e <changeLedPWM+0x8e>
					fadeMode = 0;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <changeLedPWM+0xa0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]
 8000a62:	e01c      	b.n	8000a9e <changeLedPWM+0x8e>
				}
			}
	}
	else if(mode == 2){
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <changeLedPWM+0x9c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d118      	bne.n	8000a9e <changeLedPWM+0x8e>
		if(wantedDutyCycle < dutyCycle){
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <changeLedPWM+0xa8>)
 8000a6e:	781a      	ldrb	r2, [r3, #0]
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <changeLedPWM+0xa4>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d206      	bcs.n	8000a86 <changeLedPWM+0x76>
			dutyCycle -=1;
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <changeLedPWM+0xa4>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <changeLedPWM+0xa4>)
 8000a82:	701a      	strb	r2, [r3, #0]
 8000a84:	e00b      	b.n	8000a9e <changeLedPWM+0x8e>
		}
		else if(wantedDutyCycle > dutyCycle){
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <changeLedPWM+0xa8>)
 8000a88:	781a      	ldrb	r2, [r3, #0]
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <changeLedPWM+0xa4>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d905      	bls.n	8000a9e <changeLedPWM+0x8e>
			dutyCycle +=1;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <changeLedPWM+0xa4>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	3301      	adds	r3, #1
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <changeLedPWM+0xa4>)
 8000a9c:	701a      	strb	r2, [r3, #0]
		}
	}
	setDutyCycle(dutyCycle);
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <changeLedPWM+0xa4>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f80a 	bl	8000abc <setDutyCycle>
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000089 	.word	0x20000089
 8000ab4:	20000001 	.word	0x20000001
 8000ab8:	20000088 	.word	0x20000088

08000abc <setDutyCycle>:

void setDutyCycle(uint8_t D){
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	TIM2->CCR1 = ((TIM2->ARR) * D) / 100;
 8000ac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000acc:	79fa      	ldrb	r2, [r7, #7]
 8000ace:	fb02 f303 	mul.w	r3, r2, r3
 8000ad2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad6:	4905      	ldr	r1, [pc, #20]	; (8000aec <setDutyCycle+0x30>)
 8000ad8:	fba1 1303 	umull	r1, r3, r1, r3
 8000adc:	095b      	lsrs	r3, r3, #5
 8000ade:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	51eb851f 	.word	0x51eb851f

08000af0 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <LL_DMA_DisableChannel+0x3c>)
 8000b00:	5cd3      	ldrb	r3, [r2, r3]
 8000b02:	461a      	mov	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4413      	add	r3, r2
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	3a01      	subs	r2, #1
 8000b0e:	4907      	ldr	r1, [pc, #28]	; (8000b2c <LL_DMA_DisableChannel+0x3c>)
 8000b10:	5c8a      	ldrb	r2, [r1, r2]
 8000b12:	4611      	mov	r1, r2
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	440a      	add	r2, r1
 8000b18:	f023 0301 	bic.w	r3, r3, #1
 8000b1c:	6013      	str	r3, [r2, #0]
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	08003930 	.word	0x08003930

08000b30 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000b44:	bf0c      	ite	eq
 8000b46:	2301      	moveq	r3, #1
 8000b48:	2300      	movne	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b6c:	bf0c      	ite	eq
 8000b6e:	2301      	moveq	r3, #1
 8000b70:	2300      	movne	r3, #0
 8000b72:	b2db      	uxtb	r3, r3
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b94:	bf0c      	ite	eq
 8000b96:	2301      	moveq	r3, #1
 8000b98:	2300      	movne	r3, #0
 8000b9a:	b2db      	uxtb	r3, r3
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000bb6:	605a      	str	r2, [r3, #4]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bd2:	605a      	str	r2, [r3, #4]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bee:	605a      	str	r2, [r3, #4]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <LL_TIM_ClearFlag_CC2>:
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f06f 0204 	mvn.w	r2, #4
 8000c0a:	611a      	str	r2, [r3, #16]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <LL_TIM_IsActiveFlag_CC2>:
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	2b04      	cmp	r3, #4
 8000c2a:	d101      	bne.n	8000c30 <LL_TIM_IsActiveFlag_CC2+0x18>
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e000      	b.n	8000c32 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	f003 0310 	and.w	r3, r3, #16
 8000c4e:	2b10      	cmp	r3, #16
 8000c50:	d101      	bne.n	8000c56 <LL_USART_IsActiveFlag_IDLE+0x18>
 8000c52:	2301      	movs	r3, #1
 8000c54:	e000      	b.n	8000c58 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	69db      	ldr	r3, [r3, #28]
 8000c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c74:	2b40      	cmp	r3, #64	; 0x40
 8000c76:	d101      	bne.n	8000c7c <LL_USART_IsActiveFlag_TC+0x18>
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e000      	b.n	8000c7e <LL_USART_IsActiveFlag_TC+0x1a>
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2210      	movs	r2, #16
 8000c96:	621a      	str	r2, [r3, #32]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <NMI_Handler+0x4>

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8000d00:	480c      	ldr	r0, [pc, #48]	; (8000d34 <DMA1_Channel6_IRQHandler+0x38>)
 8000d02:	f7ff ff15 	bl	8000b30 <LL_DMA_IsActiveFlag_TC6>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d105      	bne.n	8000d18 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8000d0c:	f000 ffb6 	bl	8001c7c <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8000d10:	4808      	ldr	r0, [pc, #32]	; (8000d34 <DMA1_Channel6_IRQHandler+0x38>)
 8000d12:	f7ff ff49 	bl	8000ba8 <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000d16:	e00a      	b.n	8000d2e <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8000d18:	4806      	ldr	r0, [pc, #24]	; (8000d34 <DMA1_Channel6_IRQHandler+0x38>)
 8000d1a:	f7ff ff31 	bl	8000b80 <LL_DMA_IsActiveFlag_HT6>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d104      	bne.n	8000d2e <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8000d24:	f000 ffaa 	bl	8001c7c <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <DMA1_Channel6_IRQHandler+0x38>)
 8000d2a:	f7ff ff59 	bl	8000be0 <LL_DMA_ClearFlag_HT6>
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40020000 	.word	0x40020000

08000d38 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8000d3c:	480a      	ldr	r0, [pc, #40]	; (8000d68 <DMA1_Channel7_IRQHandler+0x30>)
 8000d3e:	f7ff ff0b 	bl	8000b58 <LL_DMA_IsActiveFlag_TC7>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d10d      	bne.n	8000d64 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8000d48:	4807      	ldr	r0, [pc, #28]	; (8000d68 <DMA1_Channel7_IRQHandler+0x30>)
 8000d4a:	f7ff ff3b 	bl	8000bc4 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8000d4e:	bf00      	nop
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <DMA1_Channel7_IRQHandler+0x34>)
 8000d52:	f7ff ff87 	bl	8000c64 <LL_USART_IsActiveFlag_TC>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0f9      	beq.n	8000d50 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8000d5c:	2107      	movs	r1, #7
 8000d5e:	4802      	ldr	r0, [pc, #8]	; (8000d68 <DMA1_Channel7_IRQHandler+0x30>)
 8000d60:	f7ff fec6 	bl	8000af0 <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	40004400 	.word	0x40004400

08000d70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */
	if(LL_TIM_IsActiveFlag_CC2(TIM2)){
 8000d74:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d78:	f7ff ff4e 	bl	8000c18 <LL_TIM_IsActiveFlag_CC2>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d005      	beq.n	8000d8e <TIM2_IRQHandler+0x1e>
		changeLedPWM();
 8000d82:	f7ff fe45 	bl	8000a10 <changeLedPWM>
		LL_TIM_ClearFlag_CC2(TIM2);
 8000d86:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d8a:	f7ff ff37 	bl	8000bfc <LL_TIM_ClearFlag_CC2>
	}
  /* USER CODE END TIM2_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8000d98:	4806      	ldr	r0, [pc, #24]	; (8000db4 <USART2_IRQHandler+0x20>)
 8000d9a:	f7ff ff50 	bl	8000c3e <LL_USART_IsActiveFlag_IDLE>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d004      	beq.n	8000dae <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8000da4:	f000 ff6a 	bl	8001c7c <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <USART2_IRQHandler+0x20>)
 8000daa:	f7ff ff6e 	bl	8000c8a <LL_USART_ClearFlag_IDLE>
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40004400 	.word	0x40004400

08000db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <_sbrk+0x5c>)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <_sbrk+0x60>)
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <_sbrk+0x64>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <_sbrk+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d207      	bcs.n	8000df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de8:	f002 f842 	bl	8002e70 <__errno>
 8000dec:	4603      	mov	r3, r0
 8000dee:	220c      	movs	r2, #12
 8000df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	e009      	b.n	8000e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <_sbrk+0x64>)
 8000e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20003000 	.word	0x20003000
 8000e18:	00000400 	.word	0x00000400
 8000e1c:	2000008c 	.word	0x2000008c
 8000e20:	200000f0 	.word	0x200000f0

08000e24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_EnableIRQ>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db0b      	blt.n	8000e8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f003 021f 	and.w	r2, r3, #31
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <__NVIC_EnableIRQ+0x38>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	095b      	lsrs	r3, r3, #5
 8000e84:	2001      	movs	r0, #1
 8000e86:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_SetPriority>:
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db0a      	blt.n	8000eca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	490c      	ldr	r1, [pc, #48]	; (8000eec <__NVIC_SetPriority+0x4c>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	0112      	lsls	r2, r2, #4
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ec8:	e00a      	b.n	8000ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <__NVIC_SetPriority+0x50>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	3b04      	subs	r3, #4
 8000ed8:	0112      	lsls	r2, r2, #4
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	440b      	add	r3, r1
 8000ede:	761a      	strb	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000e100 	.word	0xe000e100
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <NVIC_EncodePriority>:
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f1c3 0307 	rsb	r3, r3, #7
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	bf28      	it	cs
 8000f12:	2304      	movcs	r3, #4
 8000f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	2b06      	cmp	r3, #6
 8000f1c:	d902      	bls.n	8000f24 <NVIC_EncodePriority+0x30>
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3b03      	subs	r3, #3
 8000f22:	e000      	b.n	8000f26 <NVIC_EncodePriority+0x32>
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43da      	mvns	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43d9      	mvns	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	4313      	orrs	r3, r2
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <LL_AHB1_GRP1_EnableClock>:
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f72:	695a      	ldr	r2, [r3, #20]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4013      	ands	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	40021000 	.word	0x40021000

08000f8c <LL_APB1_GRP1_EnableClock>:
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f96:	69da      	ldr	r2, [r3, #28]
 8000f98:	4907      	ldr	r1, [pc, #28]	; (8000fb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fa2:	69da      	ldr	r2, [r3, #28]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	40021000 	.word	0x40021000

08000fbc <LL_TIM_DisableARRPreload>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	601a      	str	r2, [r3, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_TIM_OC_DisableFast>:
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d028      	beq.n	800103e <LL_TIM_OC_DisableFast+0x62>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	d023      	beq.n	800103a <LL_TIM_OC_DisableFast+0x5e>
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	2b10      	cmp	r3, #16
 8000ff6:	d01e      	beq.n	8001036 <LL_TIM_OC_DisableFast+0x5a>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	2b40      	cmp	r3, #64	; 0x40
 8000ffc:	d019      	beq.n	8001032 <LL_TIM_OC_DisableFast+0x56>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001004:	d013      	beq.n	800102e <LL_TIM_OC_DisableFast+0x52>
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800100c:	d00d      	beq.n	800102a <LL_TIM_OC_DisableFast+0x4e>
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001014:	d007      	beq.n	8001026 <LL_TIM_OC_DisableFast+0x4a>
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800101c:	d101      	bne.n	8001022 <LL_TIM_OC_DisableFast+0x46>
 800101e:	2307      	movs	r3, #7
 8001020:	e00e      	b.n	8001040 <LL_TIM_OC_DisableFast+0x64>
 8001022:	2308      	movs	r3, #8
 8001024:	e00c      	b.n	8001040 <LL_TIM_OC_DisableFast+0x64>
 8001026:	2306      	movs	r3, #6
 8001028:	e00a      	b.n	8001040 <LL_TIM_OC_DisableFast+0x64>
 800102a:	2305      	movs	r3, #5
 800102c:	e008      	b.n	8001040 <LL_TIM_OC_DisableFast+0x64>
 800102e:	2304      	movs	r3, #4
 8001030:	e006      	b.n	8001040 <LL_TIM_OC_DisableFast+0x64>
 8001032:	2303      	movs	r3, #3
 8001034:	e004      	b.n	8001040 <LL_TIM_OC_DisableFast+0x64>
 8001036:	2302      	movs	r3, #2
 8001038:	e002      	b.n	8001040 <LL_TIM_OC_DisableFast+0x64>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <LL_TIM_OC_DisableFast+0x64>
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3318      	adds	r3, #24
 8001046:	4619      	mov	r1, r3
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <LL_TIM_OC_DisableFast+0x9c>)
 800104c:	5cd3      	ldrb	r3, [r2, r3]
 800104e:	440b      	add	r3, r1
 8001050:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	4908      	ldr	r1, [pc, #32]	; (800107c <LL_TIM_OC_DisableFast+0xa0>)
 800105a:	5ccb      	ldrb	r3, [r1, r3]
 800105c:	4619      	mov	r1, r3
 800105e:	2304      	movs	r3, #4
 8001060:	408b      	lsls	r3, r1
 8001062:	43db      	mvns	r3, r3
 8001064:	401a      	ands	r2, r3
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	601a      	str	r2, [r3, #0]
}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	08003950 	.word	0x08003950
 800107c:	0800395c 	.word	0x0800395c

08001080 <LL_TIM_OC_EnablePreload>:
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d028      	beq.n	80010e2 <LL_TIM_OC_EnablePreload+0x62>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2b04      	cmp	r3, #4
 8001094:	d023      	beq.n	80010de <LL_TIM_OC_EnablePreload+0x5e>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	2b10      	cmp	r3, #16
 800109a:	d01e      	beq.n	80010da <LL_TIM_OC_EnablePreload+0x5a>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	2b40      	cmp	r3, #64	; 0x40
 80010a0:	d019      	beq.n	80010d6 <LL_TIM_OC_EnablePreload+0x56>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010a8:	d013      	beq.n	80010d2 <LL_TIM_OC_EnablePreload+0x52>
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b0:	d00d      	beq.n	80010ce <LL_TIM_OC_EnablePreload+0x4e>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010b8:	d007      	beq.n	80010ca <LL_TIM_OC_EnablePreload+0x4a>
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c0:	d101      	bne.n	80010c6 <LL_TIM_OC_EnablePreload+0x46>
 80010c2:	2307      	movs	r3, #7
 80010c4:	e00e      	b.n	80010e4 <LL_TIM_OC_EnablePreload+0x64>
 80010c6:	2308      	movs	r3, #8
 80010c8:	e00c      	b.n	80010e4 <LL_TIM_OC_EnablePreload+0x64>
 80010ca:	2306      	movs	r3, #6
 80010cc:	e00a      	b.n	80010e4 <LL_TIM_OC_EnablePreload+0x64>
 80010ce:	2305      	movs	r3, #5
 80010d0:	e008      	b.n	80010e4 <LL_TIM_OC_EnablePreload+0x64>
 80010d2:	2304      	movs	r3, #4
 80010d4:	e006      	b.n	80010e4 <LL_TIM_OC_EnablePreload+0x64>
 80010d6:	2303      	movs	r3, #3
 80010d8:	e004      	b.n	80010e4 <LL_TIM_OC_EnablePreload+0x64>
 80010da:	2302      	movs	r3, #2
 80010dc:	e002      	b.n	80010e4 <LL_TIM_OC_EnablePreload+0x64>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <LL_TIM_OC_EnablePreload+0x64>
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3318      	adds	r3, #24
 80010ea:	4619      	mov	r1, r3
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <LL_TIM_OC_EnablePreload+0x98>)
 80010f0:	5cd3      	ldrb	r3, [r2, r3]
 80010f2:	440b      	add	r3, r1
 80010f4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	4907      	ldr	r1, [pc, #28]	; (800111c <LL_TIM_OC_EnablePreload+0x9c>)
 80010fe:	5ccb      	ldrb	r3, [r1, r3]
 8001100:	4619      	mov	r1, r3
 8001102:	2308      	movs	r3, #8
 8001104:	408b      	lsls	r3, r1
 8001106:	431a      	orrs	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	08003950 	.word	0x08003950
 800111c:	0800395c 	.word	0x0800395c

08001120 <LL_TIM_SetClockSource>:
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001132:	f023 0307 	bic.w	r3, r3, #7
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	431a      	orrs	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	609a      	str	r2, [r3, #8]
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <LL_TIM_SetTriggerOutput>:
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	431a      	orrs	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	605a      	str	r2, [r3, #4]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_TIM_DisableMasterSlaveMode>:
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	609a      	str	r2, [r3, #8]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b094      	sub	sp, #80	; 0x50
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001196:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	2220      	movs	r2, #32
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fe90 	bl	8002ed4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]
 80011c2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff fee1 	bl	8000f8c <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011ca:	f7ff fe3d 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fe8d 	bl	8000ef4 <NVIC_EncodePriority>
 80011da:	4603      	mov	r3, r0
 80011dc:	4619      	mov	r1, r3
 80011de:	201c      	movs	r0, #28
 80011e0:	f7ff fe5e 	bl	8000ea0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80011e4:	201c      	movs	r0, #28
 80011e6:	f7ff fe3d 	bl	8000e64 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 80011ea:	f240 331f 	movw	r3, #799	; 0x31f
 80011ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80011f0:	2300      	movs	r3, #0
 80011f2:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 80011f4:	2363      	movs	r3, #99	; 0x63
 80011f6:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80011fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001200:	4619      	mov	r1, r3
 8001202:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001206:	f001 f967 	bl	80024d8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800120a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800120e:	f7ff fed5 	bl	8000fbc <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001212:	2100      	movs	r1, #0
 8001214:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001218:	f7ff ff82 	bl	8001120 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 800121c:	2101      	movs	r1, #1
 800121e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001222:	f7ff ff2d 	bl	8001080 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001226:	2360      	movs	r3, #96	; 0x60
 8001228:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 100;
 8001232:	2364      	movs	r3, #100	; 0x64
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001236:	2300      	movs	r3, #0
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	461a      	mov	r2, r3
 8001240:	2101      	movs	r1, #1
 8001242:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001246:	f001 f9b9 	bl	80025bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 800124a:	2101      	movs	r1, #1
 800124c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001250:	f7ff fec4 	bl	8000fdc <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	461a      	mov	r2, r3
 8001262:	2110      	movs	r1, #16
 8001264:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001268:	f001 f9a8 	bl	80025bc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 800126c:	2110      	movs	r1, #16
 800126e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001272:	f7ff feb3 	bl	8000fdc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001276:	2100      	movs	r1, #0
 8001278:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800127c:	f7ff ff65 	bl	800114a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001280:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001284:	f7ff ff74 	bl	8001170 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001288:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800128c:	f7ff fe66 	bl	8000f5c <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001290:	2320      	movs	r3, #32
 8001292:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001294:	2302      	movs	r3, #2
 8001296:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b0:	f000 fe6a 	bl	8001f88 <LL_GPIO_Init>

}
 80012b4:	bf00      	nop
 80012b6:	3750      	adds	r7, #80	; 0x50
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <__NVIC_GetPriorityGrouping>:
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <__NVIC_GetPriorityGrouping+0x18>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 0307 	and.w	r3, r3, #7
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_EnableIRQ>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db0b      	blt.n	8001302 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	f003 021f 	and.w	r2, r3, #31
 80012f0:	4907      	ldr	r1, [pc, #28]	; (8001310 <__NVIC_EnableIRQ+0x38>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	2001      	movs	r0, #1
 80012fa:	fa00 f202 	lsl.w	r2, r0, r2
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e100 	.word	0xe000e100

08001314 <__NVIC_SetPriority>:
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	; (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <LL_DMA_EnableChannel>:
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3b01      	subs	r3, #1
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <LL_DMA_EnableChannel+0x3c>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	461a      	mov	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	3a01      	subs	r2, #1
 80013ee:	4907      	ldr	r1, [pc, #28]	; (800140c <LL_DMA_EnableChannel+0x3c>)
 80013f0:	5c8a      	ldrb	r2, [r1, r2]
 80013f2:	4611      	mov	r1, r2
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	440a      	add	r2, r1
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6013      	str	r3, [r2, #0]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	08003968 	.word	0x08003968

08001410 <LL_DMA_SetDataTransferDirection>:
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	3b01      	subs	r3, #1
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <LL_DMA_SetDataTransferDirection+0x48>)
 8001422:	5cd3      	ldrb	r3, [r2, r3]
 8001424:	461a      	mov	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4413      	add	r3, r2
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001430:	f023 0310 	bic.w	r3, r3, #16
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	3a01      	subs	r2, #1
 8001438:	4907      	ldr	r1, [pc, #28]	; (8001458 <LL_DMA_SetDataTransferDirection+0x48>)
 800143a:	5c8a      	ldrb	r2, [r1, r2]
 800143c:	4611      	mov	r1, r2
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	440a      	add	r2, r1
 8001442:	4611      	mov	r1, r2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	08003968 	.word	0x08003968

0800145c <LL_DMA_GetDataTransferDirection>:
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	3b01      	subs	r3, #1
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <LL_DMA_GetDataTransferDirection+0x2c>)
 800146c:	5cd3      	ldrb	r3, [r2, r3]
 800146e:	461a      	mov	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	f244 0310 	movw	r3, #16400	; 0x4010
 800147a:	4013      	ands	r3, r2
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	08003968 	.word	0x08003968

0800148c <LL_DMA_SetMode>:
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	3b01      	subs	r3, #1
 800149c:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <LL_DMA_SetMode+0x44>)
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	461a      	mov	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4413      	add	r3, r2
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f023 0220 	bic.w	r2, r3, #32
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	4907      	ldr	r1, [pc, #28]	; (80014d0 <LL_DMA_SetMode+0x44>)
 80014b2:	5ccb      	ldrb	r3, [r1, r3]
 80014b4:	4619      	mov	r1, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	440b      	add	r3, r1
 80014ba:	4619      	mov	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	08003968 	.word	0x08003968

080014d4 <LL_DMA_SetPeriphIncMode>:
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <LL_DMA_SetPeriphIncMode+0x44>)
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	461a      	mov	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4413      	add	r3, r2
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	4907      	ldr	r1, [pc, #28]	; (8001518 <LL_DMA_SetPeriphIncMode+0x44>)
 80014fa:	5ccb      	ldrb	r3, [r1, r3]
 80014fc:	4619      	mov	r1, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	440b      	add	r3, r1
 8001502:	4619      	mov	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	08003968 	.word	0x08003968

0800151c <LL_DMA_SetMemoryIncMode>:
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	3b01      	subs	r3, #1
 800152c:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <LL_DMA_SetMemoryIncMode+0x44>)
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	461a      	mov	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4413      	add	r3, r2
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	3b01      	subs	r3, #1
 8001540:	4907      	ldr	r1, [pc, #28]	; (8001560 <LL_DMA_SetMemoryIncMode+0x44>)
 8001542:	5ccb      	ldrb	r3, [r1, r3]
 8001544:	4619      	mov	r1, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	440b      	add	r3, r1
 800154a:	4619      	mov	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	08003968 	.word	0x08003968

08001564 <LL_DMA_SetPeriphSize>:
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	3b01      	subs	r3, #1
 8001574:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <LL_DMA_SetPeriphSize+0x44>)
 8001576:	5cd3      	ldrb	r3, [r2, r3]
 8001578:	461a      	mov	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4413      	add	r3, r2
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	3b01      	subs	r3, #1
 8001588:	4907      	ldr	r1, [pc, #28]	; (80015a8 <LL_DMA_SetPeriphSize+0x44>)
 800158a:	5ccb      	ldrb	r3, [r1, r3]
 800158c:	4619      	mov	r1, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	440b      	add	r3, r1
 8001592:	4619      	mov	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	08003968 	.word	0x08003968

080015ac <LL_DMA_SetMemorySize>:
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <LL_DMA_SetMemorySize+0x44>)
 80015be:	5cd3      	ldrb	r3, [r2, r3]
 80015c0:	461a      	mov	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	4907      	ldr	r1, [pc, #28]	; (80015f0 <LL_DMA_SetMemorySize+0x44>)
 80015d2:	5ccb      	ldrb	r3, [r1, r3]
 80015d4:	4619      	mov	r1, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	440b      	add	r3, r1
 80015da:	4619      	mov	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4313      	orrs	r3, r2
 80015e0:	600b      	str	r3, [r1, #0]
}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	08003968 	.word	0x08003968

080015f4 <LL_DMA_SetChannelPriorityLevel>:
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	3b01      	subs	r3, #1
 8001604:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001606:	5cd3      	ldrb	r3, [r2, r3]
 8001608:	461a      	mov	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4413      	add	r3, r2
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	3b01      	subs	r3, #1
 8001618:	4907      	ldr	r1, [pc, #28]	; (8001638 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800161a:	5ccb      	ldrb	r3, [r1, r3]
 800161c:	4619      	mov	r1, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	440b      	add	r3, r1
 8001622:	4619      	mov	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	08003968 	.word	0x08003968

0800163c <LL_DMA_SetDataLength>:
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	3b01      	subs	r3, #1
 800164c:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <LL_DMA_SetDataLength+0x44>)
 800164e:	5cd3      	ldrb	r3, [r2, r3]
 8001650:	461a      	mov	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4413      	add	r3, r2
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	0c1b      	lsrs	r3, r3, #16
 800165a:	041b      	lsls	r3, r3, #16
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	3a01      	subs	r2, #1
 8001660:	4907      	ldr	r1, [pc, #28]	; (8001680 <LL_DMA_SetDataLength+0x44>)
 8001662:	5c8a      	ldrb	r2, [r1, r2]
 8001664:	4611      	mov	r1, r2
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	440a      	add	r2, r1
 800166a:	4611      	mov	r1, r2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4313      	orrs	r3, r2
 8001670:	604b      	str	r3, [r1, #4]
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	08003968 	.word	0x08003968

08001684 <LL_DMA_GetDataLength>:
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	3b01      	subs	r3, #1
 8001692:	4a06      	ldr	r2, [pc, #24]	; (80016ac <LL_DMA_GetDataLength+0x28>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	461a      	mov	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	b29b      	uxth	r3, r3
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	08003968 	.word	0x08003968

080016b0 <LL_DMA_ConfigAddresses>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2b10      	cmp	r3, #16
 80016c2:	d114      	bne.n	80016ee <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	4a16      	ldr	r2, [pc, #88]	; (8001724 <LL_DMA_ConfigAddresses+0x74>)
 80016ca:	5cd3      	ldrb	r3, [r2, r3]
 80016cc:	461a      	mov	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4413      	add	r3, r2
 80016d2:	461a      	mov	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	3b01      	subs	r3, #1
 80016dc:	4a11      	ldr	r2, [pc, #68]	; (8001724 <LL_DMA_ConfigAddresses+0x74>)
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	461a      	mov	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4413      	add	r3, r2
 80016e6:	461a      	mov	r2, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6093      	str	r3, [r2, #8]
}
 80016ec:	e013      	b.n	8001716 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	4a0c      	ldr	r2, [pc, #48]	; (8001724 <LL_DMA_ConfigAddresses+0x74>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	461a      	mov	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4413      	add	r3, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	3b01      	subs	r3, #1
 8001706:	4a07      	ldr	r2, [pc, #28]	; (8001724 <LL_DMA_ConfigAddresses+0x74>)
 8001708:	5cd3      	ldrb	r3, [r2, r3]
 800170a:	461a      	mov	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4413      	add	r3, r2
 8001710:	461a      	mov	r2, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	60d3      	str	r3, [r2, #12]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	08003968 	.word	0x08003968

08001728 <LL_DMA_SetMemoryAddress>:
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	3b01      	subs	r3, #1
 8001738:	4a06      	ldr	r2, [pc, #24]	; (8001754 <LL_DMA_SetMemoryAddress+0x2c>)
 800173a:	5cd3      	ldrb	r3, [r2, r3]
 800173c:	461a      	mov	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4413      	add	r3, r2
 8001742:	461a      	mov	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	60d3      	str	r3, [r2, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	08003968 	.word	0x08003968

08001758 <LL_DMA_SetPeriphAddress>:
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	3b01      	subs	r3, #1
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <LL_DMA_SetPeriphAddress+0x2c>)
 800176a:	5cd3      	ldrb	r3, [r2, r3]
 800176c:	461a      	mov	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4413      	add	r3, r2
 8001772:	461a      	mov	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6093      	str	r3, [r2, #8]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	08003968 	.word	0x08003968

08001788 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	3b01      	subs	r3, #1
 8001796:	4a0b      	ldr	r2, [pc, #44]	; (80017c4 <LL_DMA_EnableIT_TC+0x3c>)
 8001798:	5cd3      	ldrb	r3, [r2, r3]
 800179a:	461a      	mov	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4413      	add	r3, r2
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	3a01      	subs	r2, #1
 80017a6:	4907      	ldr	r1, [pc, #28]	; (80017c4 <LL_DMA_EnableIT_TC+0x3c>)
 80017a8:	5c8a      	ldrb	r2, [r1, r2]
 80017aa:	4611      	mov	r1, r2
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	440a      	add	r2, r1
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6013      	str	r3, [r2, #0]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	08003968 	.word	0x08003968

080017c8 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <LL_DMA_EnableIT_HT+0x3c>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	461a      	mov	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	3a01      	subs	r2, #1
 80017e6:	4907      	ldr	r1, [pc, #28]	; (8001804 <LL_DMA_EnableIT_HT+0x3c>)
 80017e8:	5c8a      	ldrb	r2, [r1, r2]
 80017ea:	4611      	mov	r1, r2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	440a      	add	r2, r1
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6013      	str	r3, [r2, #0]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	08003968 	.word	0x08003968

08001808 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	3b01      	subs	r3, #1
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <LL_DMA_EnableIT_TE+0x3c>)
 8001818:	5cd3      	ldrb	r3, [r2, r3]
 800181a:	461a      	mov	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	3a01      	subs	r2, #1
 8001826:	4907      	ldr	r1, [pc, #28]	; (8001844 <LL_DMA_EnableIT_TE+0x3c>)
 8001828:	5c8a      	ldrb	r2, [r1, r2]
 800182a:	4611      	mov	r1, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	440a      	add	r2, r1
 8001830:	f043 0308 	orr.w	r3, r3, #8
 8001834:	6013      	str	r3, [r2, #0]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	08003968 	.word	0x08003968

08001848 <LL_AHB1_GRP1_EnableClock>:
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001852:	695a      	ldr	r2, [r3, #20]
 8001854:	4907      	ldr	r1, [pc, #28]	; (8001874 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4313      	orrs	r3, r2
 800185a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800185e:	695a      	ldr	r2, [r3, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4013      	ands	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	40021000 	.word	0x40021000

08001878 <LL_APB1_GRP1_EnableClock>:
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001882:	69da      	ldr	r2, [r3, #28]
 8001884:	4907      	ldr	r1, [pc, #28]	; (80018a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4313      	orrs	r3, r2
 800188a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800188e:	69da      	ldr	r2, [r3, #28]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4013      	ands	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	40021000 	.word	0x40021000

080018a8 <LL_USART_Enable>:
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f043 0201 	orr.w	r2, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	601a      	str	r2, [r3, #0]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_USART_ConfigAsyncMode>:
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	609a      	str	r2, [r3, #8]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	e853 3f00 	ldrex	r3, [r3]
 8001906:	60bb      	str	r3, [r7, #8]
   return(result);
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f043 0310 	orr.w	r3, r3, #16
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	61ba      	str	r2, [r7, #24]
 8001916:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001918:	6979      	ldr	r1, [r7, #20]
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	e841 2300 	strex	r3, r2, [r1]
 8001920:	613b      	str	r3, [r7, #16]
   return(result);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1e9      	bne.n	80018fc <LL_USART_EnableIT_IDLE+0x8>
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	3724      	adds	r7, #36	; 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001936:	b480      	push	{r7}
 8001938:	b089      	sub	sp, #36	; 0x24
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3308      	adds	r3, #8
 8001942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	e853 3f00 	ldrex	r3, [r3]
 800194a:	60bb      	str	r3, [r7, #8]
   return(result);
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001952:	61fb      	str	r3, [r7, #28]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3308      	adds	r3, #8
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	61ba      	str	r2, [r7, #24]
 800195c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800195e:	6979      	ldr	r1, [r7, #20]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	e841 2300 	strex	r3, r2, [r1]
 8001966:	613b      	str	r3, [r7, #16]
   return(result);
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1e7      	bne.n	800193e <LL_USART_DisableIT_CTS+0x8>
}
 800196e:	bf00      	nop
 8001970:	bf00      	nop
 8001972:	3724      	adds	r7, #36	; 0x24
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3308      	adds	r3, #8
 8001988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	e853 3f00 	ldrex	r3, [r3]
 8001990:	60bb      	str	r3, [r7, #8]
   return(result);
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3308      	adds	r3, #8
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	61ba      	str	r2, [r7, #24]
 80019a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019a4:	6979      	ldr	r1, [r7, #20]
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	e841 2300 	strex	r3, r2, [r1]
 80019ac:	613b      	str	r3, [r7, #16]
   return(result);
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1e7      	bne.n	8001984 <LL_USART_EnableDMAReq_RX+0x8>
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b089      	sub	sp, #36	; 0x24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3308      	adds	r3, #8
 80019ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	e853 3f00 	ldrex	r3, [r3]
 80019d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3308      	adds	r3, #8
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	61ba      	str	r2, [r7, #24]
 80019e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019ea:	6979      	ldr	r1, [r7, #20]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	e841 2300 	strex	r3, r2, [r1]
 80019f2:	613b      	str	r3, [r7, #16]
   return(result);
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1e7      	bne.n	80019ca <LL_USART_EnableDMAReq_TX+0x8>
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	3724      	adds	r7, #36	; 0x24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d103      	bne.n	8001a20 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3328      	adds	r3, #40	; 0x28
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	e002      	b.n	8001a26 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3324      	adds	r3, #36	; 0x24
 8001a24:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <USART2_RegisterCallback>:
uint8_t bufferUSART2dma[DMA_USART2_BUFFER_SIZE];

static void (* USART2_ProcessData)(const uint8_t* data, uint16_t len) = 0;

void USART2_RegisterCallback(void *callback)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a03      	ldr	r2, [pc, #12]	; (8001a54 <USART2_RegisterCallback+0x20>)
 8001a46:	6013      	str	r3, [r2, #0]
	}
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	20000090 	.word	0x20000090

08001a58 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b090      	sub	sp, #64	; 0x40
 8001a5c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]
 8001a6e:	615a      	str	r2, [r3, #20]
 8001a70:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001a82:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a86:	f7ff fef7 	bl	8001878 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001a8a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a8e:	f7ff fedb 	bl	8001848 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8001a92:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001aa8:	2307      	movs	r3, #7
 8001aaa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab4:	f000 fa68 	bl	8001f88 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2106      	movs	r1, #6
 8001abc:	485c      	ldr	r0, [pc, #368]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001abe:	f7ff fca7 	bl	8001410 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8001ac2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ac6:	2106      	movs	r1, #6
 8001ac8:	4859      	ldr	r0, [pc, #356]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001aca:	f7ff fd93 	bl	80015f4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 8001ace:	2220      	movs	r2, #32
 8001ad0:	2106      	movs	r1, #6
 8001ad2:	4857      	ldr	r0, [pc, #348]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001ad4:	f7ff fcda 	bl	800148c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2106      	movs	r1, #6
 8001adc:	4854      	ldr	r0, [pc, #336]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001ade:	f7ff fcf9 	bl	80014d4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	2106      	movs	r1, #6
 8001ae6:	4852      	ldr	r0, [pc, #328]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001ae8:	f7ff fd18 	bl	800151c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2106      	movs	r1, #6
 8001af0:	484f      	ldr	r0, [pc, #316]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001af2:	f7ff fd37 	bl	8001564 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2106      	movs	r1, #6
 8001afa:	484d      	ldr	r0, [pc, #308]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001afc:	f7ff fd56 	bl	80015ac <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001b00:	2210      	movs	r2, #16
 8001b02:	2107      	movs	r1, #7
 8001b04:	484a      	ldr	r0, [pc, #296]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001b06:	f7ff fc83 	bl	8001410 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8001b0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b0e:	2107      	movs	r1, #7
 8001b10:	4847      	ldr	r0, [pc, #284]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001b12:	f7ff fd6f 	bl	80015f4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2107      	movs	r1, #7
 8001b1a:	4845      	ldr	r0, [pc, #276]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001b1c:	f7ff fcb6 	bl	800148c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2107      	movs	r1, #7
 8001b24:	4842      	ldr	r0, [pc, #264]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001b26:	f7ff fcd5 	bl	80014d4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	2107      	movs	r1, #7
 8001b2e:	4840      	ldr	r0, [pc, #256]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001b30:	f7ff fcf4 	bl	800151c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2107      	movs	r1, #7
 8001b38:	483d      	ldr	r0, [pc, #244]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001b3a:	f7ff fd13 	bl	8001564 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2107      	movs	r1, #7
 8001b42:	483b      	ldr	r0, [pc, #236]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001b44:	f7ff fd32 	bl	80015ac <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b48:	f7ff fbb8 	bl	80012bc <__NVIC_GetPriorityGrouping>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fc08 	bl	8001368 <NVIC_EncodePriority>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	2026      	movs	r0, #38	; 0x26
 8001b5e:	f7ff fbd9 	bl	8001314 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001b62:	2026      	movs	r0, #38	; 0x26
 8001b64:	f7ff fbb8 	bl	80012d8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8001b68:	2101      	movs	r1, #1
 8001b6a:	4832      	ldr	r0, [pc, #200]	; (8001c34 <MX_USART2_UART_Init+0x1dc>)
 8001b6c:	f7ff ff4c 	bl	8001a08 <LL_USART_DMA_GetRegAddr>
 8001b70:	4604      	mov	r4, r0
 8001b72:	4d31      	ldr	r5, [pc, #196]	; (8001c38 <MX_USART2_UART_Init+0x1e0>)
 8001b74:	2106      	movs	r1, #6
 8001b76:	482e      	ldr	r0, [pc, #184]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001b78:	f7ff fc70 	bl	800145c <LL_DMA_GetDataTransferDirection>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	462b      	mov	r3, r5
 8001b82:	4622      	mov	r2, r4
 8001b84:	2106      	movs	r1, #6
 8001b86:	482a      	ldr	r0, [pc, #168]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001b88:	f7ff fd92 	bl	80016b0 <LL_DMA_ConfigAddresses>
					LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
					(uint32_t)bufferUSART2dma,
					LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8001b8c:	2240      	movs	r2, #64	; 0x40
 8001b8e:	2106      	movs	r1, #6
 8001b90:	4827      	ldr	r0, [pc, #156]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001b92:	f7ff fd53 	bl	800163c <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001b96:	2106      	movs	r1, #6
 8001b98:	4825      	ldr	r0, [pc, #148]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001b9a:	f7ff fc19 	bl	80013d0 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8001b9e:	4825      	ldr	r0, [pc, #148]	; (8001c34 <MX_USART2_UART_Init+0x1dc>)
 8001ba0:	f7ff feec 	bl	800197c <LL_USART_EnableDMAReq_RX>
  
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8001ba4:	2106      	movs	r1, #6
 8001ba6:	4822      	ldr	r0, [pc, #136]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001ba8:	f7ff fdee 	bl	8001788 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8001bac:	2106      	movs	r1, #6
 8001bae:	4820      	ldr	r0, [pc, #128]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001bb0:	f7ff fe0a 	bl	80017c8 <LL_DMA_EnableIT_HT>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	481f      	ldr	r0, [pc, #124]	; (8001c34 <MX_USART2_UART_Init+0x1dc>)
 8001bb8:	f7ff ff26 	bl	8001a08 <LL_USART_DMA_GetRegAddr>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2107      	movs	r1, #7
 8001bc2:	481b      	ldr	r0, [pc, #108]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001bc4:	f7ff fdc8 	bl	8001758 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8001bc8:	481a      	ldr	r0, [pc, #104]	; (8001c34 <MX_USART2_UART_Init+0x1dc>)
 8001bca:	f7ff fefa 	bl	80019c2 <LL_USART_EnableDMAReq_TX>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8001bce:	2107      	movs	r1, #7
 8001bd0:	4817      	ldr	r0, [pc, #92]	; (8001c30 <MX_USART2_UART_Init+0x1d8>)
 8001bd2:	f7ff fe19 	bl	8001808 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2026      	movs	r0, #38	; 0x26
 8001bda:	f7ff fb9b 	bl	8001314 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001bde:	2026      	movs	r0, #38	; 0x26
 8001be0:	f7ff fb7a 	bl	80012d8 <__NVIC_EnableIRQ>

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001be4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001be8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001bf6:	230c      	movs	r3, #12
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	4619      	mov	r1, r3
 8001c08:	480a      	ldr	r0, [pc, #40]	; (8001c34 <MX_USART2_UART_Init+0x1dc>)
 8001c0a:	f001 f83f 	bl	8002c8c <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8001c0e:	4809      	ldr	r0, [pc, #36]	; (8001c34 <MX_USART2_UART_Init+0x1dc>)
 8001c10:	f7ff fe91 	bl	8001936 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8001c14:	4807      	ldr	r0, [pc, #28]	; (8001c34 <MX_USART2_UART_Init+0x1dc>)
 8001c16:	f7ff fe57 	bl	80018c8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001c1a:	4806      	ldr	r0, [pc, #24]	; (8001c34 <MX_USART2_UART_Init+0x1dc>)
 8001c1c:	f7ff fe44 	bl	80018a8 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  LL_USART_EnableIT_IDLE(USART2);
 8001c20:	4804      	ldr	r0, [pc, #16]	; (8001c34 <MX_USART2_UART_Init+0x1dc>)
 8001c22:	f7ff fe67 	bl	80018f4 <LL_USART_EnableIT_IDLE>
  /* USER CODE END USART2_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	3738      	adds	r7, #56	; 0x38
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40004400 	.word	0x40004400
 8001c38:	200000a0 	.word	0x200000a0

08001c3c <USART2_PutBuffer>:

/* USER CODE BEGIN 1 */
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	2107      	movs	r1, #7
 8001c4e:	480a      	ldr	r0, [pc, #40]	; (8001c78 <USART2_PutBuffer+0x3c>)
 8001c50:	f7ff fd6a 	bl	8001728 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	461a      	mov	r2, r3
 8001c58:	2107      	movs	r1, #7
 8001c5a:	4807      	ldr	r0, [pc, #28]	; (8001c78 <USART2_PutBuffer+0x3c>)
 8001c5c:	f7ff fcee 	bl	800163c <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8001c60:	2107      	movs	r1, #7
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <USART2_PutBuffer+0x3c>)
 8001c64:	f7ff fd90 	bl	8001788 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001c68:	2107      	movs	r1, #7
 8001c6a:	4803      	ldr	r0, [pc, #12]	; (8001c78 <USART2_PutBuffer+0x3c>)
 8001c6c:	f7ff fbb0 	bl	80013d0 <LL_DMA_EnableChannel>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40020000 	.word	0x40020000

08001c7c <USART2_CheckDmaReception>:


void USART2_CheckDmaReception(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
	if(USART2_ProcessData == 0) return;
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <USART2_CheckDmaReception+0xa0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d043      	beq.n	8001d12 <USART2_CheckDmaReception+0x96>

	static uint16_t old_pos = 0;

	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8001c8a:	2106      	movs	r1, #6
 8001c8c:	4824      	ldr	r0, [pc, #144]	; (8001d20 <USART2_CheckDmaReception+0xa4>)
 8001c8e:	f7ff fcf9 	bl	8001684 <LL_DMA_GetDataLength>
 8001c92:	4603      	mov	r3, r0
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001c9a:	80fb      	strh	r3, [r7, #6]

	if (pos != old_pos)
 8001c9c:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <USART2_CheckDmaReception+0xa8>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	88fa      	ldrh	r2, [r7, #6]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d02a      	beq.n	8001cfc <USART2_CheckDmaReception+0x80>
	{
		if (pos > old_pos)
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <USART2_CheckDmaReception+0xa8>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	88fa      	ldrh	r2, [r7, #6]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d90e      	bls.n	8001cce <USART2_CheckDmaReception+0x52>
		{
			USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <USART2_CheckDmaReception+0xa0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <USART2_CheckDmaReception+0xa8>)
 8001cb6:	8812      	ldrh	r2, [r2, #0]
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <USART2_CheckDmaReception+0xac>)
 8001cbc:	1888      	adds	r0, r1, r2
 8001cbe:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <USART2_CheckDmaReception+0xa8>)
 8001cc0:	8812      	ldrh	r2, [r2, #0]
 8001cc2:	88f9      	ldrh	r1, [r7, #6]
 8001cc4:	1a8a      	subs	r2, r1, r2
 8001cc6:	b292      	uxth	r2, r2
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4798      	blx	r3
 8001ccc:	e016      	b.n	8001cfc <USART2_CheckDmaReception+0x80>
		}
		else
		{
			USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <USART2_CheckDmaReception+0xa0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <USART2_CheckDmaReception+0xa8>)
 8001cd4:	8812      	ldrh	r2, [r2, #0]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <USART2_CheckDmaReception+0xac>)
 8001cda:	1888      	adds	r0, r1, r2
 8001cdc:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <USART2_CheckDmaReception+0xa8>)
 8001cde:	8812      	ldrh	r2, [r2, #0]
 8001ce0:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 8001ce4:	b292      	uxth	r2, r2
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4798      	blx	r3

			if (pos > 0)
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <USART2_CheckDmaReception+0x80>
			{
				USART2_ProcessData(&bufferUSART2dma[0], pos);
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <USART2_CheckDmaReception+0xa0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	88fa      	ldrh	r2, [r7, #6]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	480b      	ldr	r0, [pc, #44]	; (8001d28 <USART2_CheckDmaReception+0xac>)
 8001cfa:	4798      	blx	r3
			}
		}
	}

	old_pos = pos;
 8001cfc:	4a09      	ldr	r2, [pc, #36]	; (8001d24 <USART2_CheckDmaReception+0xa8>)
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	8013      	strh	r3, [r2, #0]

	if (old_pos == DMA_USART2_BUFFER_SIZE)
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <USART2_CheckDmaReception+0xa8>)
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	2b40      	cmp	r3, #64	; 0x40
 8001d08:	d104      	bne.n	8001d14 <USART2_CheckDmaReception+0x98>
	{
		old_pos = 0;
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <USART2_CheckDmaReception+0xa8>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	801a      	strh	r2, [r3, #0]
 8001d10:	e000      	b.n	8001d14 <USART2_CheckDmaReception+0x98>
	if(USART2_ProcessData == 0) return;
 8001d12:	bf00      	nop
	}
}
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000090 	.word	0x20000090
 8001d20:	40020000 	.word	0x40020000
 8001d24:	20000094 	.word	0x20000094
 8001d28:	200000a0 	.word	0x200000a0

08001d2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d30:	480d      	ldr	r0, [pc, #52]	; (8001d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d32:	490e      	ldr	r1, [pc, #56]	; (8001d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d34:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <LoopForever+0xe>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d38:	e002      	b.n	8001d40 <LoopCopyDataInit>

08001d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3e:	3304      	adds	r3, #4

08001d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d44:	d3f9      	bcc.n	8001d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d48:	4c0b      	ldr	r4, [pc, #44]	; (8001d78 <LoopForever+0x16>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d4c:	e001      	b.n	8001d52 <LoopFillZerobss>

08001d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d50:	3204      	adds	r2, #4

08001d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d54:	d3fb      	bcc.n	8001d4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d56:	f7ff f865 	bl	8000e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f001 f88f 	bl	8002e7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d5e:	f7fe fcaf 	bl	80006c0 <main>

08001d62 <LoopForever>:

LoopForever:
    b LoopForever
 8001d62:	e7fe      	b.n	8001d62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d64:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d6c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001d70:	08003aac 	.word	0x08003aac
  ldr r2, =_sbss
 8001d74:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001d78:	200000f0 	.word	0x200000f0

08001d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC1_2_IRQHandler>

08001d7e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b089      	sub	sp, #36	; 0x24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	613b      	str	r3, [r7, #16]
  return result;
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	fab3 f383 	clz	r3, r3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2103      	movs	r1, #3
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	401a      	ands	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	61bb      	str	r3, [r7, #24]
  return result;
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	fab3 f383 	clz	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	601a      	str	r2, [r3, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	3724      	adds	r7, #36	; 0x24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	401a      	ands	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	605a      	str	r2, [r3, #4]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	; 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	613b      	str	r3, [r7, #16]
  return result;
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2103      	movs	r1, #3
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	61bb      	str	r3, [r7, #24]
  return result;
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001e5e:	bf00      	nop
 8001e60:	3724      	adds	r7, #36	; 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b089      	sub	sp, #36	; 0x24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	613b      	str	r3, [r7, #16]
  return result;
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	2103      	movs	r1, #3
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	401a      	ands	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	61bb      	str	r3, [r7, #24]
  return result;
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	fab3 f383 	clz	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	60da      	str	r2, [r3, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3724      	adds	r7, #36	; 0x24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a1a      	ldr	r2, [r3, #32]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	613b      	str	r3, [r7, #16]
  return result;
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	210f      	movs	r1, #15
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	61bb      	str	r3, [r7, #24]
  return result;
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	431a      	orrs	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001f1a:	bf00      	nop
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b089      	sub	sp, #36	; 0x24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	613b      	str	r3, [r7, #16]
  return result;
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	210f      	movs	r1, #15
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	401a      	ands	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	0a1b      	lsrs	r3, r3, #8
 8001f5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	61bb      	str	r3, [r7, #24]
  return result;
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	fab3 f383 	clz	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	431a      	orrs	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001f7c:	bf00      	nop
 8001f7e:	3724      	adds	r7, #36	; 0x24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	613b      	str	r3, [r7, #16]
  return result;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001faa:	e051      	b.n	8002050 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d043      	beq.n	800204a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d003      	beq.n	8001fd2 <LL_GPIO_Init+0x4a>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d10e      	bne.n	8001ff0 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	69b9      	ldr	r1, [r7, #24]
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ff16 	bl	8001e0c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	6819      	ldr	r1, [r3, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fef6 	bl	8001ddc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	69b9      	ldr	r1, [r7, #24]
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff36 	bl	8001e6a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d11a      	bne.n	800203c <LL_GPIO_Init+0xb4>
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	60bb      	str	r3, [r7, #8]
  return result;
 8002012:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002014:	fab3 f383 	clz	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b07      	cmp	r3, #7
 800201c:	d807      	bhi.n	800202e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	461a      	mov	r2, r3
 8002024:	69b9      	ldr	r1, [r7, #24]
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ff4e 	bl	8001ec8 <LL_GPIO_SetAFPin_0_7>
 800202c:	e006      	b.n	800203c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	461a      	mov	r2, r3
 8002034:	69b9      	ldr	r1, [r7, #24]
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ff75 	bl	8001f26 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	461a      	mov	r2, r3
 8002042:	69b9      	ldr	r1, [r7, #24]
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff fe9a 	bl	8001d7e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3301      	adds	r3, #1
 800204e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	fa22 f303 	lsr.w	r3, r2, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1a6      	bne.n	8001fac <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <LL_RCC_HSI_IsReady>:
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <LL_RCC_HSI_IsReady+0x20>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b02      	cmp	r3, #2
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40021000 	.word	0x40021000

0800208c <LL_RCC_LSE_IsReady>:
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <LL_RCC_LSE_IsReady+0x20>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b02      	cmp	r3, #2
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40021000 	.word	0x40021000

080020b0 <LL_RCC_GetSysClkSource>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <LL_RCC_GetSysClkSource+0x18>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 030c 	and.w	r3, r3, #12
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000

080020cc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <LL_RCC_GetAHBPrescaler+0x18>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000

080020e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <LL_RCC_GetAPB1Prescaler+0x18>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000

08002104 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <LL_RCC_GetAPB2Prescaler+0x18>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000

08002120 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <LL_RCC_GetUSARTClockSource+0x28>)
 800212a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800212c:	2103      	movs	r1, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	fa01 f303 	lsl.w	r3, r1, r3
 8002134:	401a      	ands	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	061b      	lsls	r3, r3, #24
 800213a:	4313      	orrs	r3, r2
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40021000 	.word	0x40021000

0800214c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <LL_RCC_PLL_GetMainSource+0x18>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000

08002168 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <LL_RCC_PLL_GetMultiplicator+0x18>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000

08002184 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <LL_RCC_PLL_GetPrediv+0x18>)
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	f003 030f 	and.w	r3, r3, #15
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000

080021a0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80021a8:	f000 f864 	bl	8002274 <RCC_GetSystemClockFreq>
 80021ac:	4602      	mov	r2, r0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f882 	bl	80022c0 <RCC_GetHCLKClockFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f890 	bl	80022ec <RCC_GetPCLK1ClockFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f89c 	bl	8002314 <RCC_GetPCLK2ClockFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60da      	str	r2, [r3, #12]
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d12d      	bne.n	800225a <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ff8e 	bl	8002120 <LL_RCC_GetUSARTClockSource>
 8002204:	4603      	mov	r3, r0
 8002206:	2b03      	cmp	r3, #3
 8002208:	d00a      	beq.n	8002220 <LL_RCC_GetUSARTClockFreq+0x34>
 800220a:	2b03      	cmp	r3, #3
 800220c:	d819      	bhi.n	8002242 <LL_RCC_GetUSARTClockFreq+0x56>
 800220e:	2b01      	cmp	r3, #1
 8002210:	d002      	beq.n	8002218 <LL_RCC_GetUSARTClockFreq+0x2c>
 8002212:	2b02      	cmp	r3, #2
 8002214:	d00c      	beq.n	8002230 <LL_RCC_GetUSARTClockFreq+0x44>
 8002216:	e014      	b.n	8002242 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002218:	f000 f82c 	bl	8002274 <RCC_GetSystemClockFreq>
 800221c:	60f8      	str	r0, [r7, #12]
        break;
 800221e:	e021      	b.n	8002264 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002220:	f7ff ff22 	bl	8002068 <LL_RCC_HSI_IsReady>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d019      	beq.n	800225e <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 800222a:	4b11      	ldr	r3, [pc, #68]	; (8002270 <LL_RCC_GetUSARTClockFreq+0x84>)
 800222c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800222e:	e016      	b.n	800225e <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002230:	f7ff ff2c 	bl	800208c <LL_RCC_LSE_IsReady>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d013      	beq.n	8002262 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 800223a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800223e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002240:	e00f      	b.n	8002262 <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002242:	f000 f817 	bl	8002274 <RCC_GetSystemClockFreq>
 8002246:	4603      	mov	r3, r0
 8002248:	4618      	mov	r0, r3
 800224a:	f000 f839 	bl	80022c0 <RCC_GetHCLKClockFreq>
 800224e:	4603      	mov	r3, r0
 8002250:	4618      	mov	r0, r3
 8002252:	f000 f84b 	bl	80022ec <RCC_GetPCLK1ClockFreq>
 8002256:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002258:	e004      	b.n	8002264 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 800225a:	bf00      	nop
 800225c:	e002      	b.n	8002264 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 800225e:	bf00      	nop
 8002260:	e000      	b.n	8002264 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002262:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002264:	68fb      	ldr	r3, [r7, #12]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	007a1200 	.word	0x007a1200

08002274 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800227e:	f7ff ff17 	bl	80020b0 <LL_RCC_GetSysClkSource>
 8002282:	4603      	mov	r3, r0
 8002284:	2b08      	cmp	r3, #8
 8002286:	d00c      	beq.n	80022a2 <RCC_GetSystemClockFreq+0x2e>
 8002288:	2b08      	cmp	r3, #8
 800228a:	d80e      	bhi.n	80022aa <RCC_GetSystemClockFreq+0x36>
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <RCC_GetSystemClockFreq+0x22>
 8002290:	2b04      	cmp	r3, #4
 8002292:	d003      	beq.n	800229c <RCC_GetSystemClockFreq+0x28>
 8002294:	e009      	b.n	80022aa <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <RCC_GetSystemClockFreq+0x48>)
 8002298:	607b      	str	r3, [r7, #4]
      break;
 800229a:	e009      	b.n	80022b0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <RCC_GetSystemClockFreq+0x48>)
 800229e:	607b      	str	r3, [r7, #4]
      break;
 80022a0:	e006      	b.n	80022b0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80022a2:	f000 f84b 	bl	800233c <RCC_PLL_GetFreqDomain_SYS>
 80022a6:	6078      	str	r0, [r7, #4]
      break;
 80022a8:	e002      	b.n	80022b0 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80022aa:	4b04      	ldr	r3, [pc, #16]	; (80022bc <RCC_GetSystemClockFreq+0x48>)
 80022ac:	607b      	str	r3, [r7, #4]
      break;
 80022ae:	bf00      	nop
  }

  return frequency;
 80022b0:	687b      	ldr	r3, [r7, #4]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	007a1200 	.word	0x007a1200

080022c0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80022c8:	f7ff ff00 	bl	80020cc <LL_RCC_GetAHBPrescaler>
 80022cc:	4603      	mov	r3, r0
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <RCC_GetHCLKClockFreq+0x28>)
 80022d6:	5cd3      	ldrb	r3, [r2, r3]
 80022d8:	461a      	mov	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	40d3      	lsrs	r3, r2
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	08003938 	.word	0x08003938

080022ec <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80022f4:	f7ff fef8 	bl	80020e8 <LL_RCC_GetAPB1Prescaler>
 80022f8:	4603      	mov	r3, r0
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <RCC_GetPCLK1ClockFreq+0x24>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	461a      	mov	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	40d3      	lsrs	r3, r2
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	08003948 	.word	0x08003948

08002314 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800231c:	f7ff fef2 	bl	8002104 <LL_RCC_GetAPB2Prescaler>
 8002320:	4603      	mov	r3, r0
 8002322:	0adb      	lsrs	r3, r3, #11
 8002324:	4a04      	ldr	r2, [pc, #16]	; (8002338 <RCC_GetPCLK2ClockFreq+0x24>)
 8002326:	5cd3      	ldrb	r3, [r2, r3]
 8002328:	461a      	mov	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	40d3      	lsrs	r3, r2
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	08003948 	.word	0x08003948

0800233c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800234a:	f7ff feff 	bl	800214c <LL_RCC_PLL_GetMainSource>
 800234e:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d004      	beq.n	8002360 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235c:	d003      	beq.n	8002366 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800235e:	e005      	b.n	800236c <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002360:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002362:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002364:	e005      	b.n	8002372 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002366:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002368:	60fb      	str	r3, [r7, #12]
      break;
 800236a:	e002      	b.n	8002372 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 800236c:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800236e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002370:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002372:	f7ff ff07 	bl	8002184 <LL_RCC_PLL_GetPrediv>
 8002376:	4603      	mov	r3, r0
 8002378:	3301      	adds	r3, #1
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	fbb2 f4f3 	udiv	r4, r2, r3
 8002380:	f7ff fef2 	bl	8002168 <LL_RCC_PLL_GetMultiplicator>
 8002384:	4603      	mov	r3, r0
 8002386:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800238a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800238e:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	fa92 f2a2 	rbit	r2, r2
 8002396:	603a      	str	r2, [r7, #0]
  return result;
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	fab2 f282 	clz	r2, r2
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	40d3      	lsrs	r3, r2
 80023a2:	3302      	adds	r3, #2
 80023a4:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd90      	pop	{r4, r7, pc}
 80023b0:	003d0900 	.word	0x003d0900
 80023b4:	007a1200 	.word	0x007a1200

080023b8 <LL_TIM_SetPrescaler>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_TIM_SetAutoReload>:
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_TIM_SetRepetitionCounter>:
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <LL_TIM_OC_SetCompareCH1>:
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_TIM_OC_SetCompareCH2>:
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_TIM_OC_SetCompareCH3>:
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_TIM_OC_SetCompareCH4>:
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_TIM_OC_SetCompareCH5>:
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_TIM_OC_SetCompareCH6>:
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f043 0201 	orr.w	r2, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	615a      	str	r2, [r3, #20]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a2f      	ldr	r2, [pc, #188]	; (80025a8 <LL_TIM_Init+0xd0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d007      	beq.n	8002500 <LL_TIM_Init+0x28>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f6:	d003      	beq.n	8002500 <LL_TIM_Init+0x28>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a2c      	ldr	r2, [pc, #176]	; (80025ac <LL_TIM_Init+0xd4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d106      	bne.n	800250e <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <LL_TIM_Init+0xd0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <LL_TIM_Init+0x66>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251c:	d00f      	beq.n	800253e <LL_TIM_Init+0x66>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a22      	ldr	r2, [pc, #136]	; (80025ac <LL_TIM_Init+0xd4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00b      	beq.n	800253e <LL_TIM_Init+0x66>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a21      	ldr	r2, [pc, #132]	; (80025b0 <LL_TIM_Init+0xd8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d007      	beq.n	800253e <LL_TIM_Init+0x66>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a20      	ldr	r2, [pc, #128]	; (80025b4 <LL_TIM_Init+0xdc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d003      	beq.n	800253e <LL_TIM_Init+0x66>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <LL_TIM_Init+0xe0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d106      	bne.n	800254c <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4313      	orrs	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	4619      	mov	r1, r3
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ff3b 	bl	80023d4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	4619      	mov	r1, r3
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff27 	bl	80023b8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <LL_TIM_Init+0xd0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00b      	beq.n	800258a <LL_TIM_Init+0xb2>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a0e      	ldr	r2, [pc, #56]	; (80025b0 <LL_TIM_Init+0xd8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <LL_TIM_Init+0xb2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <LL_TIM_Init+0xdc>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d003      	beq.n	800258a <LL_TIM_Init+0xb2>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a0c      	ldr	r2, [pc, #48]	; (80025b8 <LL_TIM_Init+0xe0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d105      	bne.n	8002596 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	4619      	mov	r1, r3
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ff2d 	bl	80023f0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ff8e 	bl	80024b8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40000400 	.word	0x40000400
 80025b0:	40014000 	.word	0x40014000
 80025b4:	40014400 	.word	0x40014400
 80025b8:	40014800 	.word	0x40014800

080025bc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025d2:	d045      	beq.n	8002660 <LL_TIM_OC_Init+0xa4>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025da:	d848      	bhi.n	800266e <LL_TIM_OC_Init+0xb2>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e2:	d036      	beq.n	8002652 <LL_TIM_OC_Init+0x96>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ea:	d840      	bhi.n	800266e <LL_TIM_OC_Init+0xb2>
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f2:	d027      	beq.n	8002644 <LL_TIM_OC_Init+0x88>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fa:	d838      	bhi.n	800266e <LL_TIM_OC_Init+0xb2>
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002602:	d018      	beq.n	8002636 <LL_TIM_OC_Init+0x7a>
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260a:	d830      	bhi.n	800266e <LL_TIM_OC_Init+0xb2>
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d003      	beq.n	800261a <LL_TIM_OC_Init+0x5e>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b10      	cmp	r3, #16
 8002616:	d007      	beq.n	8002628 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8002618:	e029      	b.n	800266e <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f82d 	bl	800267c <OC1Config>
 8002622:	4603      	mov	r3, r0
 8002624:	75fb      	strb	r3, [r7, #23]
      break;
 8002626:	e023      	b.n	8002670 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f8a0 	bl	8002770 <OC2Config>
 8002630:	4603      	mov	r3, r0
 8002632:	75fb      	strb	r3, [r7, #23]
      break;
 8002634:	e01c      	b.n	8002670 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f917 	bl	800286c <OC3Config>
 800263e:	4603      	mov	r3, r0
 8002640:	75fb      	strb	r3, [r7, #23]
      break;
 8002642:	e015      	b.n	8002670 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f98e 	bl	8002968 <OC4Config>
 800264c:	4603      	mov	r3, r0
 800264e:	75fb      	strb	r3, [r7, #23]
      break;
 8002650:	e00e      	b.n	8002670 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 f9ed 	bl	8002a34 <OC5Config>
 800265a:	4603      	mov	r3, r0
 800265c:	75fb      	strb	r3, [r7, #23]
      break;
 800265e:	e007      	b.n	8002670 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 fa44 	bl	8002af0 <OC6Config>
 8002668:	4603      	mov	r3, r0
 800266a:	75fb      	strb	r3, [r7, #23]
      break;
 800266c:	e000      	b.n	8002670 <LL_TIM_OC_Init+0xb4>
      break;
 800266e:	bf00      	nop
  }

  return result;
 8002670:	7dfb      	ldrb	r3, [r7, #23]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	f023 0201 	bic.w	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 0303 	bic.w	r3, r3, #3
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f023 0202 	bic.w	r2, r3, #2
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f023 0201 	bic.w	r2, r3, #1
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a20      	ldr	r2, [pc, #128]	; (8002760 <OC1Config+0xe4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00b      	beq.n	80026fa <OC1Config+0x7e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a1f      	ldr	r2, [pc, #124]	; (8002764 <OC1Config+0xe8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d007      	beq.n	80026fa <OC1Config+0x7e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a1e      	ldr	r2, [pc, #120]	; (8002768 <OC1Config+0xec>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d003      	beq.n	80026fa <OC1Config+0x7e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a1d      	ldr	r2, [pc, #116]	; (800276c <OC1Config+0xf0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d11e      	bne.n	8002738 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f023 0208 	bic.w	r2, r3, #8
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f023 0204 	bic.w	r2, r3, #4
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4313      	orrs	r3, r2
 8002718:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4619      	mov	r1, r3
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff fe5e 	bl	800240c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40012c00 	.word	0x40012c00
 8002764:	40014000 	.word	0x40014000
 8002768:	40014400 	.word	0x40014400
 800276c:	40014800 	.word	0x40014800

08002770 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	f023 0210 	bic.w	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	0212      	lsls	r2, r2, #8
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f023 0220 	bic.w	r2, r3, #32
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f023 0210 	bic.w	r2, r3, #16
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a21      	ldr	r2, [pc, #132]	; (800285c <OC2Config+0xec>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00b      	beq.n	80027f4 <OC2Config+0x84>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a20      	ldr	r2, [pc, #128]	; (8002860 <OC2Config+0xf0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d007      	beq.n	80027f4 <OC2Config+0x84>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a1f      	ldr	r2, [pc, #124]	; (8002864 <OC2Config+0xf4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d003      	beq.n	80027f4 <OC2Config+0x84>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a1e      	ldr	r2, [pc, #120]	; (8002868 <OC2Config+0xf8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d11f      	bne.n	8002834 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	019b      	lsls	r3, r3, #6
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	019b      	lsls	r3, r3, #6
 8002810:	4313      	orrs	r3, r2
 8002812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4619      	mov	r1, r3
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff fdee 	bl	8002428 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40012c00 	.word	0x40012c00
 8002860:	40014000 	.word	0x40014000
 8002864:	40014400 	.word	0x40014400
 8002868:	40014800 	.word	0x40014800

0800286c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	4313      	orrs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a21      	ldr	r2, [pc, #132]	; (8002958 <OC3Config+0xec>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00b      	beq.n	80028ee <OC3Config+0x82>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a20      	ldr	r2, [pc, #128]	; (800295c <OC3Config+0xf0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <OC3Config+0x82>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a1f      	ldr	r2, [pc, #124]	; (8002960 <OC3Config+0xf4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d003      	beq.n	80028ee <OC3Config+0x82>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a1e      	ldr	r2, [pc, #120]	; (8002964 <OC3Config+0xf8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d11f      	bne.n	800292e <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	029b      	lsls	r3, r3, #10
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	029b      	lsls	r3, r3, #10
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	015b      	lsls	r3, r3, #5
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	4619      	mov	r1, r3
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff fd7f 	bl	8002444 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40012c00 	.word	0x40012c00
 800295c:	40014000 	.word	0x40014000
 8002960:	40014400 	.word	0x40014400
 8002964:	40014800 	.word	0x40014800

08002968 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800299e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	0212      	lsls	r2, r2, #8
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	031b      	lsls	r3, r3, #12
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	031b      	lsls	r3, r3, #12
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a15      	ldr	r2, [pc, #84]	; (8002a24 <OC4Config+0xbc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00b      	beq.n	80029ec <OC4Config+0x84>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a14      	ldr	r2, [pc, #80]	; (8002a28 <OC4Config+0xc0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d007      	beq.n	80029ec <OC4Config+0x84>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a13      	ldr	r2, [pc, #76]	; (8002a2c <OC4Config+0xc4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d003      	beq.n	80029ec <OC4Config+0x84>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a12      	ldr	r2, [pc, #72]	; (8002a30 <OC4Config+0xc8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d107      	bne.n	80029fc <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	019b      	lsls	r3, r3, #6
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fd26 	bl	8002460 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40012c00 	.word	0x40012c00
 8002a28:	40014000 	.word	0x40014000
 8002a2c:	40014400 	.word	0x40014400
 8002a30:	40014800 	.word	0x40014800

08002a34 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a54:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	041b      	lsls	r3, r3, #16
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	041b      	lsls	r3, r3, #16
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a15      	ldr	r2, [pc, #84]	; (8002ae0 <OC5Config+0xac>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d00b      	beq.n	8002aa8 <OC5Config+0x74>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a14      	ldr	r2, [pc, #80]	; (8002ae4 <OC5Config+0xb0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d007      	beq.n	8002aa8 <OC5Config+0x74>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a13      	ldr	r2, [pc, #76]	; (8002ae8 <OC5Config+0xb4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d003      	beq.n	8002aa8 <OC5Config+0x74>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a12      	ldr	r2, [pc, #72]	; (8002aec <OC5Config+0xb8>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d109      	bne.n	8002abc <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff fcd7 	bl	800247c <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	40014000 	.word	0x40014000
 8002ae8:	40014400 	.word	0x40014400
 8002aec:	40014800 	.word	0x40014800

08002af0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	0212      	lsls	r2, r2, #8
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	051b      	lsls	r3, r3, #20
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	051b      	lsls	r3, r3, #20
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <OC6Config+0xac>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00b      	beq.n	8002b66 <OC6Config+0x76>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <OC6Config+0xb0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d007      	beq.n	8002b66 <OC6Config+0x76>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <OC6Config+0xb4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d003      	beq.n	8002b66 <OC6Config+0x76>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a11      	ldr	r2, [pc, #68]	; (8002ba8 <OC6Config+0xb8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d109      	bne.n	8002b7a <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	029b      	lsls	r3, r3, #10
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4619      	mov	r1, r3
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff fc88 	bl	800249c <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40012c00 	.word	0x40012c00
 8002ba0:	40014000 	.word	0x40014000
 8002ba4:	40014400 	.word	0x40014400
 8002ba8:	40014800 	.word	0x40014800

08002bac <LL_USART_IsEnabled>:
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <LL_USART_IsEnabled+0x18>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <LL_USART_IsEnabled+0x1a>
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <LL_USART_SetStopBitsLength>:
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	605a      	str	r2, [r3, #4]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_USART_SetHWFlowCtrl>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	609a      	str	r2, [r3, #8]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_USART_SetBaudRate>:
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b087      	sub	sp, #28
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c32:	d11a      	bne.n	8002c6a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	005a      	lsls	r2, r3, #1
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	085b      	lsrs	r3, r3, #1
 8002c3c:	441a      	add	r2, r3
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002c4e:	4013      	ands	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	60da      	str	r2, [r3, #12]
}
 8002c68:	e00a      	b.n	8002c80 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	085a      	lsrs	r2, r3, #1
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	441a      	add	r2, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	60da      	str	r2, [r3, #12]
}
 8002c80:	bf00      	nop
 8002c82:	371c      	adds	r7, #28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff ff84 	bl	8002bac <LL_USART_IsEnabled>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d14e      	bne.n	8002d48 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4b29      	ldr	r3, [pc, #164]	; (8002d54 <LL_USART_Init+0xc8>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	6851      	ldr	r1, [r2, #4]
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	68d2      	ldr	r2, [r2, #12]
 8002cba:	4311      	orrs	r1, r2
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	6912      	ldr	r2, [r2, #16]
 8002cc0:	4311      	orrs	r1, r2
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	6992      	ldr	r2, [r2, #24]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ff7c 	bl	8002bd2 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff ff89 	bl	8002bf8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a1b      	ldr	r2, [pc, #108]	; (8002d58 <LL_USART_Init+0xcc>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d104      	bne.n	8002cf8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f7ff fa7c 	bl	80021ec <LL_RCC_GetUSARTClockFreq>
 8002cf4:	61b8      	str	r0, [r7, #24]
 8002cf6:	e016      	b.n	8002d26 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <LL_USART_Init+0xd0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d107      	bne.n	8002d10 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002d00:	f107 0308 	add.w	r3, r7, #8
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fa4b 	bl	80021a0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	e00a      	b.n	8002d26 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <LL_USART_Init+0xd4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d106      	bne.n	8002d26 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002d18:	f107 0308 	add.w	r3, r7, #8
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fa3f 	bl	80021a0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00d      	beq.n	8002d48 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002d34:	2300      	movs	r3, #0
 8002d36:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	699a      	ldr	r2, [r3, #24]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	69b9      	ldr	r1, [r7, #24]
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff ff6b 	bl	8002c1e <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002d48:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	efff69f3 	.word	0xefff69f3
 8002d58:	40013800 	.word	0x40013800
 8002d5c:	40004400 	.word	0x40004400
 8002d60:	40004800 	.word	0x40004800

08002d64 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d76:	4a07      	ldr	r2, [pc, #28]	; (8002d94 <LL_InitTick+0x30>)
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <LL_InitTick+0x30>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d82:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <LL_InitTick+0x30>)
 8002d84:	2205      	movs	r2, #5
 8002d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000e010 	.word	0xe000e010

08002d98 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002da0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ffdd 	bl	8002d64 <LL_InitTick>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <LL_mDelay+0x48>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002dc2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dca:	d00c      	beq.n	8002de6 <LL_mDelay+0x32>
  {
    Delay++;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002dd2:	e008      	b.n	8002de6 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <LL_mDelay+0x48>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <LL_mDelay+0x32>
    {
      Delay--;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f3      	bne.n	8002dd4 <LL_mDelay+0x20>
    }
  }
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000e010 	.word	0xe000e010

08002e00 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002e08:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <LL_SetSystemCoreClock+0x1c>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6013      	str	r3, [r2, #0]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20000004 	.word	0x20000004

08002e20 <asiprintf>:
 8002e20:	b40e      	push	{r1, r2, r3}
 8002e22:	b530      	push	{r4, r5, lr}
 8002e24:	b09c      	sub	sp, #112	; 0x70
 8002e26:	ab1f      	add	r3, sp, #124	; 0x7c
 8002e28:	4605      	mov	r5, r0
 8002e2a:	490d      	ldr	r1, [pc, #52]	; (8002e60 <asiprintf+0x40>)
 8002e2c:	480d      	ldr	r0, [pc, #52]	; (8002e64 <asiprintf+0x44>)
 8002e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e32:	6800      	ldr	r0, [r0, #0]
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	2400      	movs	r4, #0
 8002e38:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8002e3c:	a902      	add	r1, sp, #8
 8002e3e:	9402      	str	r4, [sp, #8]
 8002e40:	9404      	str	r4, [sp, #16]
 8002e42:	9407      	str	r4, [sp, #28]
 8002e44:	f000 f954 	bl	80030f0 <_svfiprintf_r>
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	bfa1      	itttt	ge
 8002e4c:	9b02      	ldrge	r3, [sp, #8]
 8002e4e:	701c      	strbge	r4, [r3, #0]
 8002e50:	9b06      	ldrge	r3, [sp, #24]
 8002e52:	602b      	strge	r3, [r5, #0]
 8002e54:	b01c      	add	sp, #112	; 0x70
 8002e56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e5a:	b003      	add	sp, #12
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	ffff0288 	.word	0xffff0288
 8002e64:	20000008 	.word	0x20000008

08002e68 <atoi>:
 8002e68:	220a      	movs	r2, #10
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	f000 bc9a 	b.w	80037a4 <strtol>

08002e70 <__errno>:
 8002e70:	4b01      	ldr	r3, [pc, #4]	; (8002e78 <__errno+0x8>)
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000008 	.word	0x20000008

08002e7c <__libc_init_array>:
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	4d0d      	ldr	r5, [pc, #52]	; (8002eb4 <__libc_init_array+0x38>)
 8002e80:	4c0d      	ldr	r4, [pc, #52]	; (8002eb8 <__libc_init_array+0x3c>)
 8002e82:	1b64      	subs	r4, r4, r5
 8002e84:	10a4      	asrs	r4, r4, #2
 8002e86:	2600      	movs	r6, #0
 8002e88:	42a6      	cmp	r6, r4
 8002e8a:	d109      	bne.n	8002ea0 <__libc_init_array+0x24>
 8002e8c:	4d0b      	ldr	r5, [pc, #44]	; (8002ebc <__libc_init_array+0x40>)
 8002e8e:	4c0c      	ldr	r4, [pc, #48]	; (8002ec0 <__libc_init_array+0x44>)
 8002e90:	f000 fcf6 	bl	8003880 <_init>
 8002e94:	1b64      	subs	r4, r4, r5
 8002e96:	10a4      	asrs	r4, r4, #2
 8002e98:	2600      	movs	r6, #0
 8002e9a:	42a6      	cmp	r6, r4
 8002e9c:	d105      	bne.n	8002eaa <__libc_init_array+0x2e>
 8002e9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea4:	4798      	blx	r3
 8002ea6:	3601      	adds	r6, #1
 8002ea8:	e7ee      	b.n	8002e88 <__libc_init_array+0xc>
 8002eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eae:	4798      	blx	r3
 8002eb0:	3601      	adds	r6, #1
 8002eb2:	e7f2      	b.n	8002e9a <__libc_init_array+0x1e>
 8002eb4:	08003aa4 	.word	0x08003aa4
 8002eb8:	08003aa4 	.word	0x08003aa4
 8002ebc:	08003aa4 	.word	0x08003aa4
 8002ec0:	08003aa8 	.word	0x08003aa8

08002ec4 <free>:
 8002ec4:	4b02      	ldr	r3, [pc, #8]	; (8002ed0 <free+0xc>)
 8002ec6:	4601      	mov	r1, r0
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	f000 b80b 	b.w	8002ee4 <_free_r>
 8002ece:	bf00      	nop
 8002ed0:	20000008 	.word	0x20000008

08002ed4 <memset>:
 8002ed4:	4402      	add	r2, r0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d100      	bne.n	8002ede <memset+0xa>
 8002edc:	4770      	bx	lr
 8002ede:	f803 1b01 	strb.w	r1, [r3], #1
 8002ee2:	e7f9      	b.n	8002ed8 <memset+0x4>

08002ee4 <_free_r>:
 8002ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ee6:	2900      	cmp	r1, #0
 8002ee8:	d048      	beq.n	8002f7c <_free_r+0x98>
 8002eea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eee:	9001      	str	r0, [sp, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f1a1 0404 	sub.w	r4, r1, #4
 8002ef6:	bfb8      	it	lt
 8002ef8:	18e4      	addlt	r4, r4, r3
 8002efa:	f000 fc85 	bl	8003808 <__malloc_lock>
 8002efe:	4a20      	ldr	r2, [pc, #128]	; (8002f80 <_free_r+0x9c>)
 8002f00:	9801      	ldr	r0, [sp, #4]
 8002f02:	6813      	ldr	r3, [r2, #0]
 8002f04:	4615      	mov	r5, r2
 8002f06:	b933      	cbnz	r3, 8002f16 <_free_r+0x32>
 8002f08:	6063      	str	r3, [r4, #4]
 8002f0a:	6014      	str	r4, [r2, #0]
 8002f0c:	b003      	add	sp, #12
 8002f0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f12:	f000 bc7f 	b.w	8003814 <__malloc_unlock>
 8002f16:	42a3      	cmp	r3, r4
 8002f18:	d90b      	bls.n	8002f32 <_free_r+0x4e>
 8002f1a:	6821      	ldr	r1, [r4, #0]
 8002f1c:	1862      	adds	r2, r4, r1
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	bf04      	itt	eq
 8002f22:	681a      	ldreq	r2, [r3, #0]
 8002f24:	685b      	ldreq	r3, [r3, #4]
 8002f26:	6063      	str	r3, [r4, #4]
 8002f28:	bf04      	itt	eq
 8002f2a:	1852      	addeq	r2, r2, r1
 8002f2c:	6022      	streq	r2, [r4, #0]
 8002f2e:	602c      	str	r4, [r5, #0]
 8002f30:	e7ec      	b.n	8002f0c <_free_r+0x28>
 8002f32:	461a      	mov	r2, r3
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	b10b      	cbz	r3, 8002f3c <_free_r+0x58>
 8002f38:	42a3      	cmp	r3, r4
 8002f3a:	d9fa      	bls.n	8002f32 <_free_r+0x4e>
 8002f3c:	6811      	ldr	r1, [r2, #0]
 8002f3e:	1855      	adds	r5, r2, r1
 8002f40:	42a5      	cmp	r5, r4
 8002f42:	d10b      	bne.n	8002f5c <_free_r+0x78>
 8002f44:	6824      	ldr	r4, [r4, #0]
 8002f46:	4421      	add	r1, r4
 8002f48:	1854      	adds	r4, r2, r1
 8002f4a:	42a3      	cmp	r3, r4
 8002f4c:	6011      	str	r1, [r2, #0]
 8002f4e:	d1dd      	bne.n	8002f0c <_free_r+0x28>
 8002f50:	681c      	ldr	r4, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	6053      	str	r3, [r2, #4]
 8002f56:	4421      	add	r1, r4
 8002f58:	6011      	str	r1, [r2, #0]
 8002f5a:	e7d7      	b.n	8002f0c <_free_r+0x28>
 8002f5c:	d902      	bls.n	8002f64 <_free_r+0x80>
 8002f5e:	230c      	movs	r3, #12
 8002f60:	6003      	str	r3, [r0, #0]
 8002f62:	e7d3      	b.n	8002f0c <_free_r+0x28>
 8002f64:	6825      	ldr	r5, [r4, #0]
 8002f66:	1961      	adds	r1, r4, r5
 8002f68:	428b      	cmp	r3, r1
 8002f6a:	bf04      	itt	eq
 8002f6c:	6819      	ldreq	r1, [r3, #0]
 8002f6e:	685b      	ldreq	r3, [r3, #4]
 8002f70:	6063      	str	r3, [r4, #4]
 8002f72:	bf04      	itt	eq
 8002f74:	1949      	addeq	r1, r1, r5
 8002f76:	6021      	streq	r1, [r4, #0]
 8002f78:	6054      	str	r4, [r2, #4]
 8002f7a:	e7c7      	b.n	8002f0c <_free_r+0x28>
 8002f7c:	b003      	add	sp, #12
 8002f7e:	bd30      	pop	{r4, r5, pc}
 8002f80:	20000098 	.word	0x20000098

08002f84 <_malloc_r>:
 8002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f86:	1ccd      	adds	r5, r1, #3
 8002f88:	f025 0503 	bic.w	r5, r5, #3
 8002f8c:	3508      	adds	r5, #8
 8002f8e:	2d0c      	cmp	r5, #12
 8002f90:	bf38      	it	cc
 8002f92:	250c      	movcc	r5, #12
 8002f94:	2d00      	cmp	r5, #0
 8002f96:	4606      	mov	r6, r0
 8002f98:	db01      	blt.n	8002f9e <_malloc_r+0x1a>
 8002f9a:	42a9      	cmp	r1, r5
 8002f9c:	d903      	bls.n	8002fa6 <_malloc_r+0x22>
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	6033      	str	r3, [r6, #0]
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fa6:	f000 fc2f 	bl	8003808 <__malloc_lock>
 8002faa:	4921      	ldr	r1, [pc, #132]	; (8003030 <_malloc_r+0xac>)
 8002fac:	680a      	ldr	r2, [r1, #0]
 8002fae:	4614      	mov	r4, r2
 8002fb0:	b99c      	cbnz	r4, 8002fda <_malloc_r+0x56>
 8002fb2:	4f20      	ldr	r7, [pc, #128]	; (8003034 <_malloc_r+0xb0>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	b923      	cbnz	r3, 8002fc2 <_malloc_r+0x3e>
 8002fb8:	4621      	mov	r1, r4
 8002fba:	4630      	mov	r0, r6
 8002fbc:	f000 fb2c 	bl	8003618 <_sbrk_r>
 8002fc0:	6038      	str	r0, [r7, #0]
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	4630      	mov	r0, r6
 8002fc6:	f000 fb27 	bl	8003618 <_sbrk_r>
 8002fca:	1c43      	adds	r3, r0, #1
 8002fcc:	d123      	bne.n	8003016 <_malloc_r+0x92>
 8002fce:	230c      	movs	r3, #12
 8002fd0:	6033      	str	r3, [r6, #0]
 8002fd2:	4630      	mov	r0, r6
 8002fd4:	f000 fc1e 	bl	8003814 <__malloc_unlock>
 8002fd8:	e7e3      	b.n	8002fa2 <_malloc_r+0x1e>
 8002fda:	6823      	ldr	r3, [r4, #0]
 8002fdc:	1b5b      	subs	r3, r3, r5
 8002fde:	d417      	bmi.n	8003010 <_malloc_r+0x8c>
 8002fe0:	2b0b      	cmp	r3, #11
 8002fe2:	d903      	bls.n	8002fec <_malloc_r+0x68>
 8002fe4:	6023      	str	r3, [r4, #0]
 8002fe6:	441c      	add	r4, r3
 8002fe8:	6025      	str	r5, [r4, #0]
 8002fea:	e004      	b.n	8002ff6 <_malloc_r+0x72>
 8002fec:	6863      	ldr	r3, [r4, #4]
 8002fee:	42a2      	cmp	r2, r4
 8002ff0:	bf0c      	ite	eq
 8002ff2:	600b      	streq	r3, [r1, #0]
 8002ff4:	6053      	strne	r3, [r2, #4]
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	f000 fc0c 	bl	8003814 <__malloc_unlock>
 8002ffc:	f104 000b 	add.w	r0, r4, #11
 8003000:	1d23      	adds	r3, r4, #4
 8003002:	f020 0007 	bic.w	r0, r0, #7
 8003006:	1ac2      	subs	r2, r0, r3
 8003008:	d0cc      	beq.n	8002fa4 <_malloc_r+0x20>
 800300a:	1a1b      	subs	r3, r3, r0
 800300c:	50a3      	str	r3, [r4, r2]
 800300e:	e7c9      	b.n	8002fa4 <_malloc_r+0x20>
 8003010:	4622      	mov	r2, r4
 8003012:	6864      	ldr	r4, [r4, #4]
 8003014:	e7cc      	b.n	8002fb0 <_malloc_r+0x2c>
 8003016:	1cc4      	adds	r4, r0, #3
 8003018:	f024 0403 	bic.w	r4, r4, #3
 800301c:	42a0      	cmp	r0, r4
 800301e:	d0e3      	beq.n	8002fe8 <_malloc_r+0x64>
 8003020:	1a21      	subs	r1, r4, r0
 8003022:	4630      	mov	r0, r6
 8003024:	f000 faf8 	bl	8003618 <_sbrk_r>
 8003028:	3001      	adds	r0, #1
 800302a:	d1dd      	bne.n	8002fe8 <_malloc_r+0x64>
 800302c:	e7cf      	b.n	8002fce <_malloc_r+0x4a>
 800302e:	bf00      	nop
 8003030:	20000098 	.word	0x20000098
 8003034:	2000009c 	.word	0x2000009c

08003038 <__ssputs_r>:
 8003038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800303c:	688e      	ldr	r6, [r1, #8]
 800303e:	429e      	cmp	r6, r3
 8003040:	4682      	mov	sl, r0
 8003042:	460c      	mov	r4, r1
 8003044:	4690      	mov	r8, r2
 8003046:	461f      	mov	r7, r3
 8003048:	d838      	bhi.n	80030bc <__ssputs_r+0x84>
 800304a:	898a      	ldrh	r2, [r1, #12]
 800304c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003050:	d032      	beq.n	80030b8 <__ssputs_r+0x80>
 8003052:	6825      	ldr	r5, [r4, #0]
 8003054:	6909      	ldr	r1, [r1, #16]
 8003056:	eba5 0901 	sub.w	r9, r5, r1
 800305a:	6965      	ldr	r5, [r4, #20]
 800305c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003060:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003064:	3301      	adds	r3, #1
 8003066:	444b      	add	r3, r9
 8003068:	106d      	asrs	r5, r5, #1
 800306a:	429d      	cmp	r5, r3
 800306c:	bf38      	it	cc
 800306e:	461d      	movcc	r5, r3
 8003070:	0553      	lsls	r3, r2, #21
 8003072:	d531      	bpl.n	80030d8 <__ssputs_r+0xa0>
 8003074:	4629      	mov	r1, r5
 8003076:	f7ff ff85 	bl	8002f84 <_malloc_r>
 800307a:	4606      	mov	r6, r0
 800307c:	b950      	cbnz	r0, 8003094 <__ssputs_r+0x5c>
 800307e:	230c      	movs	r3, #12
 8003080:	f8ca 3000 	str.w	r3, [sl]
 8003084:	89a3      	ldrh	r3, [r4, #12]
 8003086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800308a:	81a3      	strh	r3, [r4, #12]
 800308c:	f04f 30ff 	mov.w	r0, #4294967295
 8003090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003094:	6921      	ldr	r1, [r4, #16]
 8003096:	464a      	mov	r2, r9
 8003098:	f000 fb8e 	bl	80037b8 <memcpy>
 800309c:	89a3      	ldrh	r3, [r4, #12]
 800309e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a6:	81a3      	strh	r3, [r4, #12]
 80030a8:	6126      	str	r6, [r4, #16]
 80030aa:	6165      	str	r5, [r4, #20]
 80030ac:	444e      	add	r6, r9
 80030ae:	eba5 0509 	sub.w	r5, r5, r9
 80030b2:	6026      	str	r6, [r4, #0]
 80030b4:	60a5      	str	r5, [r4, #8]
 80030b6:	463e      	mov	r6, r7
 80030b8:	42be      	cmp	r6, r7
 80030ba:	d900      	bls.n	80030be <__ssputs_r+0x86>
 80030bc:	463e      	mov	r6, r7
 80030be:	4632      	mov	r2, r6
 80030c0:	6820      	ldr	r0, [r4, #0]
 80030c2:	4641      	mov	r1, r8
 80030c4:	f000 fb86 	bl	80037d4 <memmove>
 80030c8:	68a3      	ldr	r3, [r4, #8]
 80030ca:	6822      	ldr	r2, [r4, #0]
 80030cc:	1b9b      	subs	r3, r3, r6
 80030ce:	4432      	add	r2, r6
 80030d0:	60a3      	str	r3, [r4, #8]
 80030d2:	6022      	str	r2, [r4, #0]
 80030d4:	2000      	movs	r0, #0
 80030d6:	e7db      	b.n	8003090 <__ssputs_r+0x58>
 80030d8:	462a      	mov	r2, r5
 80030da:	f000 fba1 	bl	8003820 <_realloc_r>
 80030de:	4606      	mov	r6, r0
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d1e1      	bne.n	80030a8 <__ssputs_r+0x70>
 80030e4:	6921      	ldr	r1, [r4, #16]
 80030e6:	4650      	mov	r0, sl
 80030e8:	f7ff fefc 	bl	8002ee4 <_free_r>
 80030ec:	e7c7      	b.n	800307e <__ssputs_r+0x46>
	...

080030f0 <_svfiprintf_r>:
 80030f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f4:	4698      	mov	r8, r3
 80030f6:	898b      	ldrh	r3, [r1, #12]
 80030f8:	061b      	lsls	r3, r3, #24
 80030fa:	b09d      	sub	sp, #116	; 0x74
 80030fc:	4607      	mov	r7, r0
 80030fe:	460d      	mov	r5, r1
 8003100:	4614      	mov	r4, r2
 8003102:	d50e      	bpl.n	8003122 <_svfiprintf_r+0x32>
 8003104:	690b      	ldr	r3, [r1, #16]
 8003106:	b963      	cbnz	r3, 8003122 <_svfiprintf_r+0x32>
 8003108:	2140      	movs	r1, #64	; 0x40
 800310a:	f7ff ff3b 	bl	8002f84 <_malloc_r>
 800310e:	6028      	str	r0, [r5, #0]
 8003110:	6128      	str	r0, [r5, #16]
 8003112:	b920      	cbnz	r0, 800311e <_svfiprintf_r+0x2e>
 8003114:	230c      	movs	r3, #12
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	f04f 30ff 	mov.w	r0, #4294967295
 800311c:	e0d1      	b.n	80032c2 <_svfiprintf_r+0x1d2>
 800311e:	2340      	movs	r3, #64	; 0x40
 8003120:	616b      	str	r3, [r5, #20]
 8003122:	2300      	movs	r3, #0
 8003124:	9309      	str	r3, [sp, #36]	; 0x24
 8003126:	2320      	movs	r3, #32
 8003128:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800312c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003130:	2330      	movs	r3, #48	; 0x30
 8003132:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80032dc <_svfiprintf_r+0x1ec>
 8003136:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800313a:	f04f 0901 	mov.w	r9, #1
 800313e:	4623      	mov	r3, r4
 8003140:	469a      	mov	sl, r3
 8003142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003146:	b10a      	cbz	r2, 800314c <_svfiprintf_r+0x5c>
 8003148:	2a25      	cmp	r2, #37	; 0x25
 800314a:	d1f9      	bne.n	8003140 <_svfiprintf_r+0x50>
 800314c:	ebba 0b04 	subs.w	fp, sl, r4
 8003150:	d00b      	beq.n	800316a <_svfiprintf_r+0x7a>
 8003152:	465b      	mov	r3, fp
 8003154:	4622      	mov	r2, r4
 8003156:	4629      	mov	r1, r5
 8003158:	4638      	mov	r0, r7
 800315a:	f7ff ff6d 	bl	8003038 <__ssputs_r>
 800315e:	3001      	adds	r0, #1
 8003160:	f000 80aa 	beq.w	80032b8 <_svfiprintf_r+0x1c8>
 8003164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003166:	445a      	add	r2, fp
 8003168:	9209      	str	r2, [sp, #36]	; 0x24
 800316a:	f89a 3000 	ldrb.w	r3, [sl]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 80a2 	beq.w	80032b8 <_svfiprintf_r+0x1c8>
 8003174:	2300      	movs	r3, #0
 8003176:	f04f 32ff 	mov.w	r2, #4294967295
 800317a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800317e:	f10a 0a01 	add.w	sl, sl, #1
 8003182:	9304      	str	r3, [sp, #16]
 8003184:	9307      	str	r3, [sp, #28]
 8003186:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800318a:	931a      	str	r3, [sp, #104]	; 0x68
 800318c:	4654      	mov	r4, sl
 800318e:	2205      	movs	r2, #5
 8003190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003194:	4851      	ldr	r0, [pc, #324]	; (80032dc <_svfiprintf_r+0x1ec>)
 8003196:	f7fd f81b 	bl	80001d0 <memchr>
 800319a:	9a04      	ldr	r2, [sp, #16]
 800319c:	b9d8      	cbnz	r0, 80031d6 <_svfiprintf_r+0xe6>
 800319e:	06d0      	lsls	r0, r2, #27
 80031a0:	bf44      	itt	mi
 80031a2:	2320      	movmi	r3, #32
 80031a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031a8:	0711      	lsls	r1, r2, #28
 80031aa:	bf44      	itt	mi
 80031ac:	232b      	movmi	r3, #43	; 0x2b
 80031ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031b2:	f89a 3000 	ldrb.w	r3, [sl]
 80031b6:	2b2a      	cmp	r3, #42	; 0x2a
 80031b8:	d015      	beq.n	80031e6 <_svfiprintf_r+0xf6>
 80031ba:	9a07      	ldr	r2, [sp, #28]
 80031bc:	4654      	mov	r4, sl
 80031be:	2000      	movs	r0, #0
 80031c0:	f04f 0c0a 	mov.w	ip, #10
 80031c4:	4621      	mov	r1, r4
 80031c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031ca:	3b30      	subs	r3, #48	; 0x30
 80031cc:	2b09      	cmp	r3, #9
 80031ce:	d94e      	bls.n	800326e <_svfiprintf_r+0x17e>
 80031d0:	b1b0      	cbz	r0, 8003200 <_svfiprintf_r+0x110>
 80031d2:	9207      	str	r2, [sp, #28]
 80031d4:	e014      	b.n	8003200 <_svfiprintf_r+0x110>
 80031d6:	eba0 0308 	sub.w	r3, r0, r8
 80031da:	fa09 f303 	lsl.w	r3, r9, r3
 80031de:	4313      	orrs	r3, r2
 80031e0:	9304      	str	r3, [sp, #16]
 80031e2:	46a2      	mov	sl, r4
 80031e4:	e7d2      	b.n	800318c <_svfiprintf_r+0x9c>
 80031e6:	9b03      	ldr	r3, [sp, #12]
 80031e8:	1d19      	adds	r1, r3, #4
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	9103      	str	r1, [sp, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bfbb      	ittet	lt
 80031f2:	425b      	neglt	r3, r3
 80031f4:	f042 0202 	orrlt.w	r2, r2, #2
 80031f8:	9307      	strge	r3, [sp, #28]
 80031fa:	9307      	strlt	r3, [sp, #28]
 80031fc:	bfb8      	it	lt
 80031fe:	9204      	strlt	r2, [sp, #16]
 8003200:	7823      	ldrb	r3, [r4, #0]
 8003202:	2b2e      	cmp	r3, #46	; 0x2e
 8003204:	d10c      	bne.n	8003220 <_svfiprintf_r+0x130>
 8003206:	7863      	ldrb	r3, [r4, #1]
 8003208:	2b2a      	cmp	r3, #42	; 0x2a
 800320a:	d135      	bne.n	8003278 <_svfiprintf_r+0x188>
 800320c:	9b03      	ldr	r3, [sp, #12]
 800320e:	1d1a      	adds	r2, r3, #4
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	9203      	str	r2, [sp, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	bfb8      	it	lt
 8003218:	f04f 33ff 	movlt.w	r3, #4294967295
 800321c:	3402      	adds	r4, #2
 800321e:	9305      	str	r3, [sp, #20]
 8003220:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80032ec <_svfiprintf_r+0x1fc>
 8003224:	7821      	ldrb	r1, [r4, #0]
 8003226:	2203      	movs	r2, #3
 8003228:	4650      	mov	r0, sl
 800322a:	f7fc ffd1 	bl	80001d0 <memchr>
 800322e:	b140      	cbz	r0, 8003242 <_svfiprintf_r+0x152>
 8003230:	2340      	movs	r3, #64	; 0x40
 8003232:	eba0 000a 	sub.w	r0, r0, sl
 8003236:	fa03 f000 	lsl.w	r0, r3, r0
 800323a:	9b04      	ldr	r3, [sp, #16]
 800323c:	4303      	orrs	r3, r0
 800323e:	3401      	adds	r4, #1
 8003240:	9304      	str	r3, [sp, #16]
 8003242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003246:	4826      	ldr	r0, [pc, #152]	; (80032e0 <_svfiprintf_r+0x1f0>)
 8003248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800324c:	2206      	movs	r2, #6
 800324e:	f7fc ffbf 	bl	80001d0 <memchr>
 8003252:	2800      	cmp	r0, #0
 8003254:	d038      	beq.n	80032c8 <_svfiprintf_r+0x1d8>
 8003256:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <_svfiprintf_r+0x1f4>)
 8003258:	bb1b      	cbnz	r3, 80032a2 <_svfiprintf_r+0x1b2>
 800325a:	9b03      	ldr	r3, [sp, #12]
 800325c:	3307      	adds	r3, #7
 800325e:	f023 0307 	bic.w	r3, r3, #7
 8003262:	3308      	adds	r3, #8
 8003264:	9303      	str	r3, [sp, #12]
 8003266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003268:	4433      	add	r3, r6
 800326a:	9309      	str	r3, [sp, #36]	; 0x24
 800326c:	e767      	b.n	800313e <_svfiprintf_r+0x4e>
 800326e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003272:	460c      	mov	r4, r1
 8003274:	2001      	movs	r0, #1
 8003276:	e7a5      	b.n	80031c4 <_svfiprintf_r+0xd4>
 8003278:	2300      	movs	r3, #0
 800327a:	3401      	adds	r4, #1
 800327c:	9305      	str	r3, [sp, #20]
 800327e:	4619      	mov	r1, r3
 8003280:	f04f 0c0a 	mov.w	ip, #10
 8003284:	4620      	mov	r0, r4
 8003286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800328a:	3a30      	subs	r2, #48	; 0x30
 800328c:	2a09      	cmp	r2, #9
 800328e:	d903      	bls.n	8003298 <_svfiprintf_r+0x1a8>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0c5      	beq.n	8003220 <_svfiprintf_r+0x130>
 8003294:	9105      	str	r1, [sp, #20]
 8003296:	e7c3      	b.n	8003220 <_svfiprintf_r+0x130>
 8003298:	fb0c 2101 	mla	r1, ip, r1, r2
 800329c:	4604      	mov	r4, r0
 800329e:	2301      	movs	r3, #1
 80032a0:	e7f0      	b.n	8003284 <_svfiprintf_r+0x194>
 80032a2:	ab03      	add	r3, sp, #12
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	462a      	mov	r2, r5
 80032a8:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <_svfiprintf_r+0x1f8>)
 80032aa:	a904      	add	r1, sp, #16
 80032ac:	4638      	mov	r0, r7
 80032ae:	f3af 8000 	nop.w
 80032b2:	1c42      	adds	r2, r0, #1
 80032b4:	4606      	mov	r6, r0
 80032b6:	d1d6      	bne.n	8003266 <_svfiprintf_r+0x176>
 80032b8:	89ab      	ldrh	r3, [r5, #12]
 80032ba:	065b      	lsls	r3, r3, #25
 80032bc:	f53f af2c 	bmi.w	8003118 <_svfiprintf_r+0x28>
 80032c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032c2:	b01d      	add	sp, #116	; 0x74
 80032c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032c8:	ab03      	add	r3, sp, #12
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	462a      	mov	r2, r5
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <_svfiprintf_r+0x1f8>)
 80032d0:	a904      	add	r1, sp, #16
 80032d2:	4638      	mov	r0, r7
 80032d4:	f000 f87a 	bl	80033cc <_printf_i>
 80032d8:	e7eb      	b.n	80032b2 <_svfiprintf_r+0x1c2>
 80032da:	bf00      	nop
 80032dc:	0800396f 	.word	0x0800396f
 80032e0:	08003979 	.word	0x08003979
 80032e4:	00000000 	.word	0x00000000
 80032e8:	08003039 	.word	0x08003039
 80032ec:	08003975 	.word	0x08003975

080032f0 <_printf_common>:
 80032f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032f4:	4616      	mov	r6, r2
 80032f6:	4699      	mov	r9, r3
 80032f8:	688a      	ldr	r2, [r1, #8]
 80032fa:	690b      	ldr	r3, [r1, #16]
 80032fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003300:	4293      	cmp	r3, r2
 8003302:	bfb8      	it	lt
 8003304:	4613      	movlt	r3, r2
 8003306:	6033      	str	r3, [r6, #0]
 8003308:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800330c:	4607      	mov	r7, r0
 800330e:	460c      	mov	r4, r1
 8003310:	b10a      	cbz	r2, 8003316 <_printf_common+0x26>
 8003312:	3301      	adds	r3, #1
 8003314:	6033      	str	r3, [r6, #0]
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	0699      	lsls	r1, r3, #26
 800331a:	bf42      	ittt	mi
 800331c:	6833      	ldrmi	r3, [r6, #0]
 800331e:	3302      	addmi	r3, #2
 8003320:	6033      	strmi	r3, [r6, #0]
 8003322:	6825      	ldr	r5, [r4, #0]
 8003324:	f015 0506 	ands.w	r5, r5, #6
 8003328:	d106      	bne.n	8003338 <_printf_common+0x48>
 800332a:	f104 0a19 	add.w	sl, r4, #25
 800332e:	68e3      	ldr	r3, [r4, #12]
 8003330:	6832      	ldr	r2, [r6, #0]
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	42ab      	cmp	r3, r5
 8003336:	dc26      	bgt.n	8003386 <_printf_common+0x96>
 8003338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800333c:	1e13      	subs	r3, r2, #0
 800333e:	6822      	ldr	r2, [r4, #0]
 8003340:	bf18      	it	ne
 8003342:	2301      	movne	r3, #1
 8003344:	0692      	lsls	r2, r2, #26
 8003346:	d42b      	bmi.n	80033a0 <_printf_common+0xb0>
 8003348:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800334c:	4649      	mov	r1, r9
 800334e:	4638      	mov	r0, r7
 8003350:	47c0      	blx	r8
 8003352:	3001      	adds	r0, #1
 8003354:	d01e      	beq.n	8003394 <_printf_common+0xa4>
 8003356:	6823      	ldr	r3, [r4, #0]
 8003358:	68e5      	ldr	r5, [r4, #12]
 800335a:	6832      	ldr	r2, [r6, #0]
 800335c:	f003 0306 	and.w	r3, r3, #6
 8003360:	2b04      	cmp	r3, #4
 8003362:	bf08      	it	eq
 8003364:	1aad      	subeq	r5, r5, r2
 8003366:	68a3      	ldr	r3, [r4, #8]
 8003368:	6922      	ldr	r2, [r4, #16]
 800336a:	bf0c      	ite	eq
 800336c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003370:	2500      	movne	r5, #0
 8003372:	4293      	cmp	r3, r2
 8003374:	bfc4      	itt	gt
 8003376:	1a9b      	subgt	r3, r3, r2
 8003378:	18ed      	addgt	r5, r5, r3
 800337a:	2600      	movs	r6, #0
 800337c:	341a      	adds	r4, #26
 800337e:	42b5      	cmp	r5, r6
 8003380:	d11a      	bne.n	80033b8 <_printf_common+0xc8>
 8003382:	2000      	movs	r0, #0
 8003384:	e008      	b.n	8003398 <_printf_common+0xa8>
 8003386:	2301      	movs	r3, #1
 8003388:	4652      	mov	r2, sl
 800338a:	4649      	mov	r1, r9
 800338c:	4638      	mov	r0, r7
 800338e:	47c0      	blx	r8
 8003390:	3001      	adds	r0, #1
 8003392:	d103      	bne.n	800339c <_printf_common+0xac>
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800339c:	3501      	adds	r5, #1
 800339e:	e7c6      	b.n	800332e <_printf_common+0x3e>
 80033a0:	18e1      	adds	r1, r4, r3
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	2030      	movs	r0, #48	; 0x30
 80033a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033aa:	4422      	add	r2, r4
 80033ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033b4:	3302      	adds	r3, #2
 80033b6:	e7c7      	b.n	8003348 <_printf_common+0x58>
 80033b8:	2301      	movs	r3, #1
 80033ba:	4622      	mov	r2, r4
 80033bc:	4649      	mov	r1, r9
 80033be:	4638      	mov	r0, r7
 80033c0:	47c0      	blx	r8
 80033c2:	3001      	adds	r0, #1
 80033c4:	d0e6      	beq.n	8003394 <_printf_common+0xa4>
 80033c6:	3601      	adds	r6, #1
 80033c8:	e7d9      	b.n	800337e <_printf_common+0x8e>
	...

080033cc <_printf_i>:
 80033cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033d0:	460c      	mov	r4, r1
 80033d2:	4691      	mov	r9, r2
 80033d4:	7e27      	ldrb	r7, [r4, #24]
 80033d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80033d8:	2f78      	cmp	r7, #120	; 0x78
 80033da:	4680      	mov	r8, r0
 80033dc:	469a      	mov	sl, r3
 80033de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033e2:	d807      	bhi.n	80033f4 <_printf_i+0x28>
 80033e4:	2f62      	cmp	r7, #98	; 0x62
 80033e6:	d80a      	bhi.n	80033fe <_printf_i+0x32>
 80033e8:	2f00      	cmp	r7, #0
 80033ea:	f000 80d8 	beq.w	800359e <_printf_i+0x1d2>
 80033ee:	2f58      	cmp	r7, #88	; 0x58
 80033f0:	f000 80a3 	beq.w	800353a <_printf_i+0x16e>
 80033f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033fc:	e03a      	b.n	8003474 <_printf_i+0xa8>
 80033fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003402:	2b15      	cmp	r3, #21
 8003404:	d8f6      	bhi.n	80033f4 <_printf_i+0x28>
 8003406:	a001      	add	r0, pc, #4	; (adr r0, 800340c <_printf_i+0x40>)
 8003408:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800340c:	08003465 	.word	0x08003465
 8003410:	08003479 	.word	0x08003479
 8003414:	080033f5 	.word	0x080033f5
 8003418:	080033f5 	.word	0x080033f5
 800341c:	080033f5 	.word	0x080033f5
 8003420:	080033f5 	.word	0x080033f5
 8003424:	08003479 	.word	0x08003479
 8003428:	080033f5 	.word	0x080033f5
 800342c:	080033f5 	.word	0x080033f5
 8003430:	080033f5 	.word	0x080033f5
 8003434:	080033f5 	.word	0x080033f5
 8003438:	08003585 	.word	0x08003585
 800343c:	080034a9 	.word	0x080034a9
 8003440:	08003567 	.word	0x08003567
 8003444:	080033f5 	.word	0x080033f5
 8003448:	080033f5 	.word	0x080033f5
 800344c:	080035a7 	.word	0x080035a7
 8003450:	080033f5 	.word	0x080033f5
 8003454:	080034a9 	.word	0x080034a9
 8003458:	080033f5 	.word	0x080033f5
 800345c:	080033f5 	.word	0x080033f5
 8003460:	0800356f 	.word	0x0800356f
 8003464:	680b      	ldr	r3, [r1, #0]
 8003466:	1d1a      	adds	r2, r3, #4
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	600a      	str	r2, [r1, #0]
 800346c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003474:	2301      	movs	r3, #1
 8003476:	e0a3      	b.n	80035c0 <_printf_i+0x1f4>
 8003478:	6825      	ldr	r5, [r4, #0]
 800347a:	6808      	ldr	r0, [r1, #0]
 800347c:	062e      	lsls	r6, r5, #24
 800347e:	f100 0304 	add.w	r3, r0, #4
 8003482:	d50a      	bpl.n	800349a <_printf_i+0xce>
 8003484:	6805      	ldr	r5, [r0, #0]
 8003486:	600b      	str	r3, [r1, #0]
 8003488:	2d00      	cmp	r5, #0
 800348a:	da03      	bge.n	8003494 <_printf_i+0xc8>
 800348c:	232d      	movs	r3, #45	; 0x2d
 800348e:	426d      	negs	r5, r5
 8003490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003494:	485e      	ldr	r0, [pc, #376]	; (8003610 <_printf_i+0x244>)
 8003496:	230a      	movs	r3, #10
 8003498:	e019      	b.n	80034ce <_printf_i+0x102>
 800349a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800349e:	6805      	ldr	r5, [r0, #0]
 80034a0:	600b      	str	r3, [r1, #0]
 80034a2:	bf18      	it	ne
 80034a4:	b22d      	sxthne	r5, r5
 80034a6:	e7ef      	b.n	8003488 <_printf_i+0xbc>
 80034a8:	680b      	ldr	r3, [r1, #0]
 80034aa:	6825      	ldr	r5, [r4, #0]
 80034ac:	1d18      	adds	r0, r3, #4
 80034ae:	6008      	str	r0, [r1, #0]
 80034b0:	0628      	lsls	r0, r5, #24
 80034b2:	d501      	bpl.n	80034b8 <_printf_i+0xec>
 80034b4:	681d      	ldr	r5, [r3, #0]
 80034b6:	e002      	b.n	80034be <_printf_i+0xf2>
 80034b8:	0669      	lsls	r1, r5, #25
 80034ba:	d5fb      	bpl.n	80034b4 <_printf_i+0xe8>
 80034bc:	881d      	ldrh	r5, [r3, #0]
 80034be:	4854      	ldr	r0, [pc, #336]	; (8003610 <_printf_i+0x244>)
 80034c0:	2f6f      	cmp	r7, #111	; 0x6f
 80034c2:	bf0c      	ite	eq
 80034c4:	2308      	moveq	r3, #8
 80034c6:	230a      	movne	r3, #10
 80034c8:	2100      	movs	r1, #0
 80034ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034ce:	6866      	ldr	r6, [r4, #4]
 80034d0:	60a6      	str	r6, [r4, #8]
 80034d2:	2e00      	cmp	r6, #0
 80034d4:	bfa2      	ittt	ge
 80034d6:	6821      	ldrge	r1, [r4, #0]
 80034d8:	f021 0104 	bicge.w	r1, r1, #4
 80034dc:	6021      	strge	r1, [r4, #0]
 80034de:	b90d      	cbnz	r5, 80034e4 <_printf_i+0x118>
 80034e0:	2e00      	cmp	r6, #0
 80034e2:	d04d      	beq.n	8003580 <_printf_i+0x1b4>
 80034e4:	4616      	mov	r6, r2
 80034e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80034ea:	fb03 5711 	mls	r7, r3, r1, r5
 80034ee:	5dc7      	ldrb	r7, [r0, r7]
 80034f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034f4:	462f      	mov	r7, r5
 80034f6:	42bb      	cmp	r3, r7
 80034f8:	460d      	mov	r5, r1
 80034fa:	d9f4      	bls.n	80034e6 <_printf_i+0x11a>
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d10b      	bne.n	8003518 <_printf_i+0x14c>
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	07df      	lsls	r7, r3, #31
 8003504:	d508      	bpl.n	8003518 <_printf_i+0x14c>
 8003506:	6923      	ldr	r3, [r4, #16]
 8003508:	6861      	ldr	r1, [r4, #4]
 800350a:	4299      	cmp	r1, r3
 800350c:	bfde      	ittt	le
 800350e:	2330      	movle	r3, #48	; 0x30
 8003510:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003514:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003518:	1b92      	subs	r2, r2, r6
 800351a:	6122      	str	r2, [r4, #16]
 800351c:	f8cd a000 	str.w	sl, [sp]
 8003520:	464b      	mov	r3, r9
 8003522:	aa03      	add	r2, sp, #12
 8003524:	4621      	mov	r1, r4
 8003526:	4640      	mov	r0, r8
 8003528:	f7ff fee2 	bl	80032f0 <_printf_common>
 800352c:	3001      	adds	r0, #1
 800352e:	d14c      	bne.n	80035ca <_printf_i+0x1fe>
 8003530:	f04f 30ff 	mov.w	r0, #4294967295
 8003534:	b004      	add	sp, #16
 8003536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800353a:	4835      	ldr	r0, [pc, #212]	; (8003610 <_printf_i+0x244>)
 800353c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	680e      	ldr	r6, [r1, #0]
 8003544:	061f      	lsls	r7, r3, #24
 8003546:	f856 5b04 	ldr.w	r5, [r6], #4
 800354a:	600e      	str	r6, [r1, #0]
 800354c:	d514      	bpl.n	8003578 <_printf_i+0x1ac>
 800354e:	07d9      	lsls	r1, r3, #31
 8003550:	bf44      	itt	mi
 8003552:	f043 0320 	orrmi.w	r3, r3, #32
 8003556:	6023      	strmi	r3, [r4, #0]
 8003558:	b91d      	cbnz	r5, 8003562 <_printf_i+0x196>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	f023 0320 	bic.w	r3, r3, #32
 8003560:	6023      	str	r3, [r4, #0]
 8003562:	2310      	movs	r3, #16
 8003564:	e7b0      	b.n	80034c8 <_printf_i+0xfc>
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	f043 0320 	orr.w	r3, r3, #32
 800356c:	6023      	str	r3, [r4, #0]
 800356e:	2378      	movs	r3, #120	; 0x78
 8003570:	4828      	ldr	r0, [pc, #160]	; (8003614 <_printf_i+0x248>)
 8003572:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003576:	e7e3      	b.n	8003540 <_printf_i+0x174>
 8003578:	065e      	lsls	r6, r3, #25
 800357a:	bf48      	it	mi
 800357c:	b2ad      	uxthmi	r5, r5
 800357e:	e7e6      	b.n	800354e <_printf_i+0x182>
 8003580:	4616      	mov	r6, r2
 8003582:	e7bb      	b.n	80034fc <_printf_i+0x130>
 8003584:	680b      	ldr	r3, [r1, #0]
 8003586:	6826      	ldr	r6, [r4, #0]
 8003588:	6960      	ldr	r0, [r4, #20]
 800358a:	1d1d      	adds	r5, r3, #4
 800358c:	600d      	str	r5, [r1, #0]
 800358e:	0635      	lsls	r5, r6, #24
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	d501      	bpl.n	8003598 <_printf_i+0x1cc>
 8003594:	6018      	str	r0, [r3, #0]
 8003596:	e002      	b.n	800359e <_printf_i+0x1d2>
 8003598:	0671      	lsls	r1, r6, #25
 800359a:	d5fb      	bpl.n	8003594 <_printf_i+0x1c8>
 800359c:	8018      	strh	r0, [r3, #0]
 800359e:	2300      	movs	r3, #0
 80035a0:	6123      	str	r3, [r4, #16]
 80035a2:	4616      	mov	r6, r2
 80035a4:	e7ba      	b.n	800351c <_printf_i+0x150>
 80035a6:	680b      	ldr	r3, [r1, #0]
 80035a8:	1d1a      	adds	r2, r3, #4
 80035aa:	600a      	str	r2, [r1, #0]
 80035ac:	681e      	ldr	r6, [r3, #0]
 80035ae:	6862      	ldr	r2, [r4, #4]
 80035b0:	2100      	movs	r1, #0
 80035b2:	4630      	mov	r0, r6
 80035b4:	f7fc fe0c 	bl	80001d0 <memchr>
 80035b8:	b108      	cbz	r0, 80035be <_printf_i+0x1f2>
 80035ba:	1b80      	subs	r0, r0, r6
 80035bc:	6060      	str	r0, [r4, #4]
 80035be:	6863      	ldr	r3, [r4, #4]
 80035c0:	6123      	str	r3, [r4, #16]
 80035c2:	2300      	movs	r3, #0
 80035c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035c8:	e7a8      	b.n	800351c <_printf_i+0x150>
 80035ca:	6923      	ldr	r3, [r4, #16]
 80035cc:	4632      	mov	r2, r6
 80035ce:	4649      	mov	r1, r9
 80035d0:	4640      	mov	r0, r8
 80035d2:	47d0      	blx	sl
 80035d4:	3001      	adds	r0, #1
 80035d6:	d0ab      	beq.n	8003530 <_printf_i+0x164>
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	079b      	lsls	r3, r3, #30
 80035dc:	d413      	bmi.n	8003606 <_printf_i+0x23a>
 80035de:	68e0      	ldr	r0, [r4, #12]
 80035e0:	9b03      	ldr	r3, [sp, #12]
 80035e2:	4298      	cmp	r0, r3
 80035e4:	bfb8      	it	lt
 80035e6:	4618      	movlt	r0, r3
 80035e8:	e7a4      	b.n	8003534 <_printf_i+0x168>
 80035ea:	2301      	movs	r3, #1
 80035ec:	4632      	mov	r2, r6
 80035ee:	4649      	mov	r1, r9
 80035f0:	4640      	mov	r0, r8
 80035f2:	47d0      	blx	sl
 80035f4:	3001      	adds	r0, #1
 80035f6:	d09b      	beq.n	8003530 <_printf_i+0x164>
 80035f8:	3501      	adds	r5, #1
 80035fa:	68e3      	ldr	r3, [r4, #12]
 80035fc:	9903      	ldr	r1, [sp, #12]
 80035fe:	1a5b      	subs	r3, r3, r1
 8003600:	42ab      	cmp	r3, r5
 8003602:	dcf2      	bgt.n	80035ea <_printf_i+0x21e>
 8003604:	e7eb      	b.n	80035de <_printf_i+0x212>
 8003606:	2500      	movs	r5, #0
 8003608:	f104 0619 	add.w	r6, r4, #25
 800360c:	e7f5      	b.n	80035fa <_printf_i+0x22e>
 800360e:	bf00      	nop
 8003610:	08003980 	.word	0x08003980
 8003614:	08003991 	.word	0x08003991

08003618 <_sbrk_r>:
 8003618:	b538      	push	{r3, r4, r5, lr}
 800361a:	4d06      	ldr	r5, [pc, #24]	; (8003634 <_sbrk_r+0x1c>)
 800361c:	2300      	movs	r3, #0
 800361e:	4604      	mov	r4, r0
 8003620:	4608      	mov	r0, r1
 8003622:	602b      	str	r3, [r5, #0]
 8003624:	f7fd fbc8 	bl	8000db8 <_sbrk>
 8003628:	1c43      	adds	r3, r0, #1
 800362a:	d102      	bne.n	8003632 <_sbrk_r+0x1a>
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	b103      	cbz	r3, 8003632 <_sbrk_r+0x1a>
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	bd38      	pop	{r3, r4, r5, pc}
 8003634:	200000e0 	.word	0x200000e0

08003638 <strpbrk>:
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	7803      	ldrb	r3, [r0, #0]
 800363c:	b1a3      	cbz	r3, 8003668 <strpbrk+0x30>
 800363e:	4603      	mov	r3, r0
 8003640:	460c      	mov	r4, r1
 8003642:	4618      	mov	r0, r3
 8003644:	f813 5b01 	ldrb.w	r5, [r3], #1
 8003648:	b14d      	cbz	r5, 800365e <strpbrk+0x26>
 800364a:	460a      	mov	r2, r1
 800364c:	e001      	b.n	8003652 <strpbrk+0x1a>
 800364e:	42ae      	cmp	r6, r5
 8003650:	d009      	beq.n	8003666 <strpbrk+0x2e>
 8003652:	4614      	mov	r4, r2
 8003654:	f812 6b01 	ldrb.w	r6, [r2], #1
 8003658:	2e00      	cmp	r6, #0
 800365a:	d1f8      	bne.n	800364e <strpbrk+0x16>
 800365c:	e7f1      	b.n	8003642 <strpbrk+0xa>
 800365e:	7823      	ldrb	r3, [r4, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf08      	it	eq
 8003664:	2000      	moveq	r0, #0
 8003666:	bd70      	pop	{r4, r5, r6, pc}
 8003668:	4618      	mov	r0, r3
 800366a:	e7fc      	b.n	8003666 <strpbrk+0x2e>

0800366c <strstr>:
 800366c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800366e:	780c      	ldrb	r4, [r1, #0]
 8003670:	b164      	cbz	r4, 800368c <strstr+0x20>
 8003672:	4603      	mov	r3, r0
 8003674:	781a      	ldrb	r2, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	1c5e      	adds	r6, r3, #1
 800367a:	b90a      	cbnz	r2, 8003680 <strstr+0x14>
 800367c:	4610      	mov	r0, r2
 800367e:	e005      	b.n	800368c <strstr+0x20>
 8003680:	4294      	cmp	r4, r2
 8003682:	d108      	bne.n	8003696 <strstr+0x2a>
 8003684:	460d      	mov	r5, r1
 8003686:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800368a:	b902      	cbnz	r2, 800368e <strstr+0x22>
 800368c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800368e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003692:	4297      	cmp	r7, r2
 8003694:	d0f7      	beq.n	8003686 <strstr+0x1a>
 8003696:	4633      	mov	r3, r6
 8003698:	e7ec      	b.n	8003674 <strstr+0x8>
	...

0800369c <_strtol_l.isra.0>:
 800369c:	2b01      	cmp	r3, #1
 800369e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a2:	d001      	beq.n	80036a8 <_strtol_l.isra.0+0xc>
 80036a4:	2b24      	cmp	r3, #36	; 0x24
 80036a6:	d906      	bls.n	80036b6 <_strtol_l.isra.0+0x1a>
 80036a8:	f7ff fbe2 	bl	8002e70 <__errno>
 80036ac:	2316      	movs	r3, #22
 80036ae:	6003      	str	r3, [r0, #0]
 80036b0:	2000      	movs	r0, #0
 80036b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036b6:	4f3a      	ldr	r7, [pc, #232]	; (80037a0 <_strtol_l.isra.0+0x104>)
 80036b8:	468e      	mov	lr, r1
 80036ba:	4676      	mov	r6, lr
 80036bc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80036c0:	5de5      	ldrb	r5, [r4, r7]
 80036c2:	f015 0508 	ands.w	r5, r5, #8
 80036c6:	d1f8      	bne.n	80036ba <_strtol_l.isra.0+0x1e>
 80036c8:	2c2d      	cmp	r4, #45	; 0x2d
 80036ca:	d134      	bne.n	8003736 <_strtol_l.isra.0+0x9a>
 80036cc:	f89e 4000 	ldrb.w	r4, [lr]
 80036d0:	f04f 0801 	mov.w	r8, #1
 80036d4:	f106 0e02 	add.w	lr, r6, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d05c      	beq.n	8003796 <_strtol_l.isra.0+0xfa>
 80036dc:	2b10      	cmp	r3, #16
 80036de:	d10c      	bne.n	80036fa <_strtol_l.isra.0+0x5e>
 80036e0:	2c30      	cmp	r4, #48	; 0x30
 80036e2:	d10a      	bne.n	80036fa <_strtol_l.isra.0+0x5e>
 80036e4:	f89e 4000 	ldrb.w	r4, [lr]
 80036e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80036ec:	2c58      	cmp	r4, #88	; 0x58
 80036ee:	d14d      	bne.n	800378c <_strtol_l.isra.0+0xf0>
 80036f0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80036f4:	2310      	movs	r3, #16
 80036f6:	f10e 0e02 	add.w	lr, lr, #2
 80036fa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80036fe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003702:	2600      	movs	r6, #0
 8003704:	fbbc f9f3 	udiv	r9, ip, r3
 8003708:	4635      	mov	r5, r6
 800370a:	fb03 ca19 	mls	sl, r3, r9, ip
 800370e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003712:	2f09      	cmp	r7, #9
 8003714:	d818      	bhi.n	8003748 <_strtol_l.isra.0+0xac>
 8003716:	463c      	mov	r4, r7
 8003718:	42a3      	cmp	r3, r4
 800371a:	dd24      	ble.n	8003766 <_strtol_l.isra.0+0xca>
 800371c:	2e00      	cmp	r6, #0
 800371e:	db1f      	blt.n	8003760 <_strtol_l.isra.0+0xc4>
 8003720:	45a9      	cmp	r9, r5
 8003722:	d31d      	bcc.n	8003760 <_strtol_l.isra.0+0xc4>
 8003724:	d101      	bne.n	800372a <_strtol_l.isra.0+0x8e>
 8003726:	45a2      	cmp	sl, r4
 8003728:	db1a      	blt.n	8003760 <_strtol_l.isra.0+0xc4>
 800372a:	fb05 4503 	mla	r5, r5, r3, r4
 800372e:	2601      	movs	r6, #1
 8003730:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003734:	e7eb      	b.n	800370e <_strtol_l.isra.0+0x72>
 8003736:	2c2b      	cmp	r4, #43	; 0x2b
 8003738:	bf08      	it	eq
 800373a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800373e:	46a8      	mov	r8, r5
 8003740:	bf08      	it	eq
 8003742:	f106 0e02 	addeq.w	lr, r6, #2
 8003746:	e7c7      	b.n	80036d8 <_strtol_l.isra.0+0x3c>
 8003748:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800374c:	2f19      	cmp	r7, #25
 800374e:	d801      	bhi.n	8003754 <_strtol_l.isra.0+0xb8>
 8003750:	3c37      	subs	r4, #55	; 0x37
 8003752:	e7e1      	b.n	8003718 <_strtol_l.isra.0+0x7c>
 8003754:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003758:	2f19      	cmp	r7, #25
 800375a:	d804      	bhi.n	8003766 <_strtol_l.isra.0+0xca>
 800375c:	3c57      	subs	r4, #87	; 0x57
 800375e:	e7db      	b.n	8003718 <_strtol_l.isra.0+0x7c>
 8003760:	f04f 36ff 	mov.w	r6, #4294967295
 8003764:	e7e4      	b.n	8003730 <_strtol_l.isra.0+0x94>
 8003766:	2e00      	cmp	r6, #0
 8003768:	da05      	bge.n	8003776 <_strtol_l.isra.0+0xda>
 800376a:	2322      	movs	r3, #34	; 0x22
 800376c:	6003      	str	r3, [r0, #0]
 800376e:	4665      	mov	r5, ip
 8003770:	b942      	cbnz	r2, 8003784 <_strtol_l.isra.0+0xe8>
 8003772:	4628      	mov	r0, r5
 8003774:	e79d      	b.n	80036b2 <_strtol_l.isra.0+0x16>
 8003776:	f1b8 0f00 	cmp.w	r8, #0
 800377a:	d000      	beq.n	800377e <_strtol_l.isra.0+0xe2>
 800377c:	426d      	negs	r5, r5
 800377e:	2a00      	cmp	r2, #0
 8003780:	d0f7      	beq.n	8003772 <_strtol_l.isra.0+0xd6>
 8003782:	b10e      	cbz	r6, 8003788 <_strtol_l.isra.0+0xec>
 8003784:	f10e 31ff 	add.w	r1, lr, #4294967295
 8003788:	6011      	str	r1, [r2, #0]
 800378a:	e7f2      	b.n	8003772 <_strtol_l.isra.0+0xd6>
 800378c:	2430      	movs	r4, #48	; 0x30
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1b3      	bne.n	80036fa <_strtol_l.isra.0+0x5e>
 8003792:	2308      	movs	r3, #8
 8003794:	e7b1      	b.n	80036fa <_strtol_l.isra.0+0x5e>
 8003796:	2c30      	cmp	r4, #48	; 0x30
 8003798:	d0a4      	beq.n	80036e4 <_strtol_l.isra.0+0x48>
 800379a:	230a      	movs	r3, #10
 800379c:	e7ad      	b.n	80036fa <_strtol_l.isra.0+0x5e>
 800379e:	bf00      	nop
 80037a0:	080039a3 	.word	0x080039a3

080037a4 <strtol>:
 80037a4:	4613      	mov	r3, r2
 80037a6:	460a      	mov	r2, r1
 80037a8:	4601      	mov	r1, r0
 80037aa:	4802      	ldr	r0, [pc, #8]	; (80037b4 <strtol+0x10>)
 80037ac:	6800      	ldr	r0, [r0, #0]
 80037ae:	f7ff bf75 	b.w	800369c <_strtol_l.isra.0>
 80037b2:	bf00      	nop
 80037b4:	20000008 	.word	0x20000008

080037b8 <memcpy>:
 80037b8:	440a      	add	r2, r1
 80037ba:	4291      	cmp	r1, r2
 80037bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80037c0:	d100      	bne.n	80037c4 <memcpy+0xc>
 80037c2:	4770      	bx	lr
 80037c4:	b510      	push	{r4, lr}
 80037c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037ce:	4291      	cmp	r1, r2
 80037d0:	d1f9      	bne.n	80037c6 <memcpy+0xe>
 80037d2:	bd10      	pop	{r4, pc}

080037d4 <memmove>:
 80037d4:	4288      	cmp	r0, r1
 80037d6:	b510      	push	{r4, lr}
 80037d8:	eb01 0402 	add.w	r4, r1, r2
 80037dc:	d902      	bls.n	80037e4 <memmove+0x10>
 80037de:	4284      	cmp	r4, r0
 80037e0:	4623      	mov	r3, r4
 80037e2:	d807      	bhi.n	80037f4 <memmove+0x20>
 80037e4:	1e43      	subs	r3, r0, #1
 80037e6:	42a1      	cmp	r1, r4
 80037e8:	d008      	beq.n	80037fc <memmove+0x28>
 80037ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037f2:	e7f8      	b.n	80037e6 <memmove+0x12>
 80037f4:	4402      	add	r2, r0
 80037f6:	4601      	mov	r1, r0
 80037f8:	428a      	cmp	r2, r1
 80037fa:	d100      	bne.n	80037fe <memmove+0x2a>
 80037fc:	bd10      	pop	{r4, pc}
 80037fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003806:	e7f7      	b.n	80037f8 <memmove+0x24>

08003808 <__malloc_lock>:
 8003808:	4801      	ldr	r0, [pc, #4]	; (8003810 <__malloc_lock+0x8>)
 800380a:	f000 b82f 	b.w	800386c <__retarget_lock_acquire_recursive>
 800380e:	bf00      	nop
 8003810:	200000e8 	.word	0x200000e8

08003814 <__malloc_unlock>:
 8003814:	4801      	ldr	r0, [pc, #4]	; (800381c <__malloc_unlock+0x8>)
 8003816:	f000 b82a 	b.w	800386e <__retarget_lock_release_recursive>
 800381a:	bf00      	nop
 800381c:	200000e8 	.word	0x200000e8

08003820 <_realloc_r>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	4607      	mov	r7, r0
 8003824:	4614      	mov	r4, r2
 8003826:	460e      	mov	r6, r1
 8003828:	b921      	cbnz	r1, 8003834 <_realloc_r+0x14>
 800382a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800382e:	4611      	mov	r1, r2
 8003830:	f7ff bba8 	b.w	8002f84 <_malloc_r>
 8003834:	b922      	cbnz	r2, 8003840 <_realloc_r+0x20>
 8003836:	f7ff fb55 	bl	8002ee4 <_free_r>
 800383a:	4625      	mov	r5, r4
 800383c:	4628      	mov	r0, r5
 800383e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003840:	f000 f816 	bl	8003870 <_malloc_usable_size_r>
 8003844:	42a0      	cmp	r0, r4
 8003846:	d20f      	bcs.n	8003868 <_realloc_r+0x48>
 8003848:	4621      	mov	r1, r4
 800384a:	4638      	mov	r0, r7
 800384c:	f7ff fb9a 	bl	8002f84 <_malloc_r>
 8003850:	4605      	mov	r5, r0
 8003852:	2800      	cmp	r0, #0
 8003854:	d0f2      	beq.n	800383c <_realloc_r+0x1c>
 8003856:	4631      	mov	r1, r6
 8003858:	4622      	mov	r2, r4
 800385a:	f7ff ffad 	bl	80037b8 <memcpy>
 800385e:	4631      	mov	r1, r6
 8003860:	4638      	mov	r0, r7
 8003862:	f7ff fb3f 	bl	8002ee4 <_free_r>
 8003866:	e7e9      	b.n	800383c <_realloc_r+0x1c>
 8003868:	4635      	mov	r5, r6
 800386a:	e7e7      	b.n	800383c <_realloc_r+0x1c>

0800386c <__retarget_lock_acquire_recursive>:
 800386c:	4770      	bx	lr

0800386e <__retarget_lock_release_recursive>:
 800386e:	4770      	bx	lr

08003870 <_malloc_usable_size_r>:
 8003870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003874:	1f18      	subs	r0, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	bfbc      	itt	lt
 800387a:	580b      	ldrlt	r3, [r1, r0]
 800387c:	18c0      	addlt	r0, r0, r3
 800387e:	4770      	bx	lr

08003880 <_init>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	bf00      	nop
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr

0800388c <_fini>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	bf00      	nop
 8003890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003892:	bc08      	pop	{r3}
 8003894:	469e      	mov	lr, r3
 8003896:	4770      	bx	lr
